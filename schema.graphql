directive @allowUnverifiedUsers on FIELD_DEFINITION

"""Exposes a URL that specifies the behavior of this scalar."""
directive @specifiedBy(
  """The URL that specifies the behavior of this scalar."""
  url: String!
) on SCALAR

"""
The `CreditAmount` scalar type represents the amount of credit (should be float on FE and
integer on BE)
"""
scalar CreditAmount

"""
The `Date` scalar type represents a date. The Date appears in a JSON
response as an ISO8601 formatted string, without a time component.
"""
scalar Date

"""
The `DateTime` scalar type represents a date and time in the UTC
timezone. The DateTime appears in a JSON response as an ISO8601 formatted
string, including UTC timezone ("Z"). The parsed date and time string will
be converted to UTC if there is an offset.
"""
scalar DateTime

"""
The `Decimal` scalar type represents signed double-precision fractional
values parsed by the `Decimal` library. The Decimal appears in a JSON
response as a string to preserve precision.
"""
scalar Decimal

"""A valid e-mail address"""
scalar Email

"""The `JSON` scalar type represents a UTF-8 string value parsed by the `Jason` library."""
scalar Json

"""
The `Naive DateTime` scalar type represents a naive date and time without
timezone. The DateTime appears in a JSON response as an ISO8601 formatted
string.
"""
scalar NaiveDateTime

"""
The `ShortId` scalar type represents the short version of the unique
identifier for a resource
"""
scalar ShortId

"""
The `UUID` scalar type represents a unique identifier for a resource
according to the UUIDv4 spec
"""
scalar UUID

"""Represents an uploaded file."""
scalar Upload

"""Possible types of component annotations"""
enum AnnotationComponentType {
  """Color variables"""
  COLOR_VARIABLE
  """Layer styles"""
  LAYER_STYLE
  """Text styles"""
  TEXT_STYLE
}

"""Annotation sort order"""
enum AnnotationSortOrder {
  """Sort annotation based on creation time of last comment."""
  LATEST_FIRST
  """
  Sort annotations by resolved at (unresolved first),
          and secondarily by creation time of last comment
  """
  LATEST_OPEN_FIRST
  """
  Sort annotation based on resolution time. Can be used *only* in conjunction with
  `RESOLVED_ONLY` for status.
  """
  LATEST_RESOLVED_FIRST
  """Sort annotation based on read status and creation time of last comment."""
  NEW_FIRST
}

"""Filter annotations by resolution status"""
enum AnnotationStatusFilter {
  """Get active annotations only"""
  ACTIVE_ONLY
  """Get all annotations"""
  ALL
  """Get resolved annotations only"""
  RESOLVED_ONLY
  """Get annotations with unread comments only"""
  UNREAD_ONLY
}

"""Possible types of annotation subjects"""
enum AnnotationSubjectType {
  """For annotations bounded to an artboard"""
  ARTBOARD
  """For annotations bounded to a component"""
  COMPONENT
  """For annotations bounded to a page"""
  PAGE
}

"""Artboard Filter"""
enum ArtboardFilterType {
  """All"""
  ALL
  """Prototype"""
  PROTOTYPE
}

"""[WILL BE REMOVED] Type of an item in the billing history"""
enum BillingHistoryItemType {
  """Credit addition"""
  CREDIT
  """Invoice creation"""
  INVOICE
}

"""Billing period in which changes should be made"""
enum BillingPeriodInput {
  """Current billing period"""
  CURRENT
  """Next billing period"""
  NEXT
}

"""Status (from payments) of the customer's subscription"""
enum BillingStatus {
  """Active"""
  ACTIVE
  """Canceled"""
  CANCELED
  """Incomplete"""
  INCOMPLETE
  """Incomplete and Expired"""
  INCOMPLETE_EXPIRED
  """Past Due"""
  PAST_DUE
  """Trialing"""
  TRIALING
  """Unpaid"""
  UNPAID
}

"""[WILL BE REMOVED] Payment collection method"""
enum CollectionMethod {
  """Automatic"""
  AUTOMATIC
  """Invoice"""
  INVOICE
}

"""Component filter type"""
enum ComponentFilterType {
  """Color variables"""
  COLOR_VARIABLE
  """Layer styles"""
  LAYER_STYLE
  """Symbols"""
  SYMBOL
  """Text styles"""
  TEXT_STYLE
}

"""Credit types"""
enum CreditType {
  """Individual"""
  INDIVIDUAL
  """Team"""
  TEAM
  """Unknown"""
  UNKNOWN
}

"""Supported currencies"""
enum Currency {
  """Euro"""
  EUR
  """US Dollar"""
  USD
}

"""State of components in a document"""
enum DocumentComponentsState {
  """Components cannot be processed"""
  CANNOT_PROCESS
  """Components can be processed"""
  CAN_PROCESS
  """Components has been processed"""
  PROCESSED
  """Components is being processed"""
  PROCESSING
}

"""Document download unavailable error"""
enum DocumentDownloadUnavailableError {
  """Old sketch version"""
  OLD_SKETCH_VERSION
  """Processing failed"""
  PROCESSING_FAILED
  """Processing in progress"""
  PROCESSING_IN_PROGRESS
  """Share download disabled"""
  SHARE_DOWNLOAD_DISABLED @deprecated(reason: "Use userCanInspect instead")
}

"""A three state enum that describes the state of our assets."""
enum DownloadableAssetStatus {
  AVAILABLE
  FAILED
  REQUESTED
}

"""The state of the education application"""
enum EducationApplicationState {
  """Approved"""
  APPROVED
  """Overwritten by a newer application"""
  OVERWRITTEN
  """Pending approval"""
  PENDING
  """Rejected"""
  REJECTED
}

"""The type of the education application request"""
enum EducationApplicationType {
  """Institution"""
  INSTITUTION
  """Student"""
  STUDENT
  """Teacher"""
  TEACHER
}

"""The formats in which we can export assets"""
enum ExportFormat {
  EPS
  HEIC
  JPG
  PDF
  PNG
  SVG
  TIFF
  WEBP
}

"""An enum representing the types of Components that can be exported"""
enum ExportableComponentType {
  """Color variables"""
  COLOR_VARIABLE
  """Layer styles"""
  LAYER_STYLE
  """Text styles"""
  TEXT_STYLE
}

"""File types"""
enum FileType {
  """Image file for the layers in an artboard with fix position when scrolling"""
  FIXED
  """Image file for an entire artboard"""
  FULL
  """Image file for the layers in an artboard without fix position when scrolling"""
  SCROLLABLE
}

"""Frame filter"""
enum FrameFilterType {
  """All"""
  ALL
  """Prototype"""
  PROTOTYPE
}

"""The status of the inspector data."""
enum InspectorStatus {
  """Generating the inspector data is pending."""
  PENDING
  """Inspector data is ready."""
  READY
}

"""Invite status"""
enum InviteStatus {
  """The membership has been accepted by the owner or the requested user."""
  ACCEPTED
  """
  The user has been invited by the owner,
    but the invited user hasn't accepted the invite yet.
  """
  INVITED
  """
  The user has requested access to a share or private project, but the owner hasn't
    granted permission (yet).
  """
  REQUESTED
}

"""Version's kind"""
enum Kind {
  """
  Auto-saved Version / An auto-saved version containing changes not
  explicitly consolidated by the user
  """
  AUTO
  """Draft version / 'Save' in UI visible terminology"""
  DRAFT
  """Published version / 'Star' in UI visible terminology"""
  PUBLISHED
}

"""Indicates the operation to perform on memberships when transferring a share"""
enum MembershipsTransferOperation {
  """Delete all previous memberships"""
  DELETE_ALL
  """Transfer only non-SSO previous memberships and delete the rest"""
  TRANSFER_NON_SSO
}

"""Possible states of the user's Multi-Factor Authentication configuration."""
enum MfaStateType {
  """The user has disabled or never configured the Multi-Factor Authentication"""
  DISABLED
  """The user has enabled the Multi-Factor Authentication"""
  ENABLED
}

"""The read state of a notification"""
enum NotificationState {
  """The notification has been marked done"""
  DONE
  """The notification has not been seen"""
  NEW @deprecated(reason: "Use `unread` instead")
  """The notification has been read"""
  READ
  """The notification has not been read"""
  UNREAD
}

"""The state of a notification subscription can be explicitly set to"""
enum NotificationSubscriptionState {
  """The user will not receive notifications"""
  OFF
  """The user will receive notifications"""
  ON
}

"""The status of a notification subscription"""
enum NotificationSubscriptionStatus {
  """The user will not receive notifications"""
  OFF
  """The user will receive notifications"""
  ON
  """The user will receive some notifications"""
  PARTIAL
}

enum OrderDirection {
  ASC
  DESC
}

"""Organization membership order type"""
enum OrganizationMembershipOrderType {
  """License"""
  LICENSE
  """Role"""
  ROLE
}

"""Organization membership roles"""
enum OrganizationMembershipRole {
  """Admin"""
  ADMIN
  """Member"""
  MEMBER
}

"""Organization share filter type"""
enum OrganizationShareFilterType {
  """Library"""
  LIBRARY
  """No project"""
  NO_PROJECT
  """Shared with me"""
  SHARED_WITH_ME
}

"""Determines the default access level, on a share, for workspace members."""
enum ParentAccessLevel {
  """Default value for each member type: inspect for viewers, edit for editors"""
  DEFAULT
  """View only"""
  VIEW
}

"""[WILL BE REMOVED] Form of payment for adding a contributor"""
enum PaymentType {
  CARD
  CREDIT
  CREDIT_AND_CARD
  CREDIT_AND_INVOICE
  INVOICE
  NO_PAYMENT
}

"""The preferred state of the default version"""
enum PreferredVersionState {
  """Any status is acceptable, in effect the most recently created version will be returned."""
  ANY
  """
  The latest published version is preferred.
  
  If no published version exist, latest version is returned.
  """
  ANY_PUBLISHED
  """
  The latest processed version is preferred.
  
  A processed version is one that has finished rendering.
  If no processed version exists, the latest version is returned.
  """
  PROCESSED
  """
  The latest processed _and_ published version is preferred.
  
  If no processed and published version exists, falls back to the latest
  processed version.
  
  If no processed version exitsts, the latest version is returned.
  """
  PROCESSED_AND_PUBLISHED
  """
  The latest uploaded version id preferred.
  
  An uploaded version is one whose document has been uploaded to S3 and so
  is available for download.
  
  If no uploaded version exists, the latest version is returned
  """
  UPLOADED
}

"""Presentation file status describes the state of the generation of the presentation files"""
enum PresentationFileStatus {
  COMPLETED
  PENDING
}

"""Type of the preview content item"""
enum PreviewItemType {
  """The preview item is a page."""
  PAGE
  """The preview item is a prototype."""
  PROTOTYPE
}

"""Private access level"""
enum PrivateAccessLevel {
  """View and inspect and download and upload"""
  EDIT
  """View only"""
  VIEW
}

"""The status of the project if it was archived. Used for filtering"""
enum ProjectArchivedStatus {
  """All projects"""
  ALL
  """Archived projects only"""
  ARCHIVED
  """Unarchived projects only"""
  UNARCHIVED
}

"""The status of the project if it was pinned. Used for filtering"""
enum ProjectPinnedStatus {
  """All projects"""
  ALL
  """Pinned projects only"""
  PINNED
  """Unpinned projects only"""
  UNPINNED
}

"""The privacy icon to be displayed"""
enum ProjectPrivacyIcon {
  """Restricted or non-restricted project with some guests"""
  GUESTS
  """Restricted project: only invited workspace members can access the project. No guest invited"""
  INVITED_WORKSPACE_MEMBERS
  """All workspace members can access this project. No guest invited"""
  WORKSPACE_MEMBERS
}

"""The type of project"""
enum ProjectType {
  """The private 'Drafts' folder each editor in a workspace has"""
  PERSONAL_DRAFTS
  """A standard project"""
  STANDARD
}

"""The access level of a project"""
enum ProjectWorkspaceAccessLevel {
  """Default value for each member type: inspect for viewers, edit for editors"""
  DEFAULT
  """Only users with a ProjectMembership can access this project"""
  NONE
}

"""Public access level"""
enum PublicAccessLevel {
  """No public access (private share)"""
  NONE
  """View only"""
  VIEW
}

"""Options for enabling public export of design tokens"""
enum PublicTokenExport {
  """The public URL is disabled"""
  DISABLED
  """Export tokens from the latest version"""
  LATEST
  """Export tokens from the latest starred version"""
  LATEST_STARRED
}

"""Possible options for Publication Reactions."""
enum PublicationReactionType {
  """Heart reaction on a publication."""
  HEART
  """No reaction on a publication."""
  NO_REACTION
}

"""Publications sort order"""
enum PublicationSortOrder {
  """Sort by most recently published"""
  LATEST_FIRST @deprecated(reason: "Use `UPDATED_AT_DESC instead`")
  """
  Sort by number of reactions, in descending order
  (i.e. the one with most reactions first).
  """
  MOST_REACTED_DESC
  """Sort by share's name, alphabetically in ascending order."""
  NAME_ASC
  """Sort randomly"""
  RANDOM
  """Sort by most recently published"""
  UPDATED_AT_DESC
}

enum RenderStatusType {
  """Created"""
  CREATED
  """Errored"""
  ERRORED
  """Finished"""
  FINISHED
  """Processing"""
  PROCESSING
  """Rendering"""
  RENDERING
  """Uploaded"""
  UPLOADED
}

"""Where to position something relative to the target when re-ordering"""
enum ReorderPosition {
  """Move something above the target"""
  ABOVE
  """Move something below the target"""
  BELOW
}

"""
An access scope represents a set of actions in the SCIM API.

When creating a personal token, users can decide which access scopes the
token should be allowed to use. This controls what SCIM API resources are
available to the token.

For example, information can only be read by tokens with the `SCIM_READ`
scope.
"""
enum ScimApiAccessScope {
  """Read access to the SCIM API"""
  SCIM_READ
  """Write access to the SCIM API"""
  SCIM_WRITE
}

"""Session types"""
enum SessionType {
  """Mac App"""
  MAC_APP
  """Web"""
  WEB
}

"""The status of the share if it was archived. Used for filtering"""
enum ShareArchivedStatus {
  """All shares in the workspace"""
  ALL
  """Archived shares only"""
  ARCHIVED
  """Unarchived shares only"""
  UNARCHIVED
}

"""Available versions depending on user's permissions and starred updates"""
enum ShareAvailableVersionType {
  """Any version"""
  ANY
  """Any starred update"""
  ANY_STARRED
  """Only latest update (starred or save)"""
  LATEST
}

"""Possible values by which we can filter shares."""
enum ShareFilterType {
  """No filtering - return everything"""
  ALL
  """Only shares that are libraries"""
  LIBRARY
  """Only shares with no project"""
  NO_PROJECT
  """[DEPRECATED] Use ShareFilterType.PERSONAL_WORKSPACE instead."""
  OWN
  """Only shares belonging to the current user personal workspace"""
  PERSONAL_WORKSPACE
  """Only shares which have been shared with the current user"""
  SHARED
  """Only shares which have been shared with the current user and are editable by them"""
  SHARED_AND_EDITABLE
  """Only shares that are templates"""
  TEMPLATE
}

"""Filter for the list of membership"""
enum ShareMembershipFilterType {
  """Filter membership by e-mail"""
  EMAIL
}

"""Badge icon type based on share privacy status"""
enum SharePrivacyIconType {
  """Anyone with the link can access"""
  ANYONE_WITH_LINK
  """Selected Guests can access"""
  GUESTS
  """Only you can access"""
  ONLY_YOU
  """Visible in Community"""
  PUBLICLY_VISIBLE
  """Selected people in your Workspace can access"""
  SELECTED_WORKSPACE_MEMBERS
  """People in your Workspace can access"""
  WORKSPACE_MEMBERS
}

"""Reason for reporting the share"""
enum ShareReportReason {
  """It's inappropriate"""
  INAPPROPRIATE
  """Spam"""
  SPAM
  """Includes copyrighted material"""
  VIOLATED_COPYRIGHT
}

"""Share sort order"""
enum ShareSortOrder {
  """
  Sort by when the share was created, in ascending order (i.e. oldest share
  first).
  """
  CREATED_AT_ASC
  """
  Sort by when the share was created, in descending order (i.e. newest
  share first).
  """
  CREATED_AT_DESC
  """
  Sort by when the latest version of the share was created, ascending
  (i.e. least recent save first).
  
  Shares with no versions will appear last in the list.
  """
  LAST_MODIFIED_ASC
  """
  Sort by when the latest version of the share was created, descending
  (i.e. most recent save first).
  
  Shares with no versions will appear last in the list.
  """
  LAST_MODIFIED_DESC
  """Sort by the share's name, alphabetically in ascending order."""
  NAME_ASC
  """Sort by the share's name, alphabetically in descending order."""
  NAME_DESC
}

"""Share type"""
enum ShareType {
  """A library"""
  LIBRARY
  """A standard share"""
  STANDARD
  """A template"""
  TEMPLATE
}

"""Social sign-in authentication providers"""
enum SocialSigninProvider {
  APPLE
}

"""SSO Binding Types"""
enum SsoBindingType {
  """HTTP POST Binding"""
  POST
  """HTTP Redirect Binding"""
  REDIRECT
}

"""Status"""
enum StatusEnum {
  """Available"""
  AVAILABLE
  """Unavailable"""
  UNAVAILABLE
  """Unknown"""
  UNKNOWN
}

"""
An enum representing the different filters that can be used when querying
Storage items.
"""
enum StorageItemFilterType {
  """
  Filter for Shares that contain at least one Prototype.
  
  i.e. At least one Artboard in the latest Version of the Share has
  `is_flow_home=true`.
  """
  HAS_PROTOTYPES
  """Filter for Shares that the current user can edit."""
  I_CAN_EDIT
  """Filter for Shares that are Libraries."""
  LIBRARY
  """Filter for Storage Items that do not belong to a Project."""
  NO_PROJECT
  """Filter for Storage Items that have been shared with you."""
  SHARED_WITH_ME
  """Filter for Shares that are Templates."""
  TEMPLATE
}

"""Source of the storage item"""
enum StorageItemSource {
  """The storage item is in the Archive."""
  ARCHIVE
  """The storage item is in the Trash."""
  TRASH
  """The storage item is in the Workspace."""
  WORKSPACE
}

"""Type of the storage item"""
enum StorageItemType {
  """The storage item is a project."""
  PROJECT
  """The storage item is a share."""
  SHARE
}

"""[WILL BE REMOVED] Subscription status"""
enum SubscriptionStatus {
  """Active"""
  ACTIVE
  """Canceled"""
  CANCELED
  """Incomplete"""
  INCOMPLETE
  """Incomplete expired"""
  INCOMPLETE_EXPIRED
  """Past due"""
  PAST_DUE
  """Trialing"""
  TRIALING
  """Unpaid"""
  UNPAID
}

"""[WILL BE REMOVED] Tax ID verification states"""
enum TaxIdStatus {
  """Verification is pending"""
  PENDING
  """Verification is unavailable"""
  UNAVAILABLE
  """The tax ID is unverified"""
  UNVERIFIED
  """The tax ID is verified"""
  VERIFIED
}

"""[WILL BE REMOVED] A code identifying the country and tax abbreviation."""
enum TaxIdType {
  """Tax code for Australia"""
  AU_ABN
  """Tax code for Switzerland"""
  CH_VAT
  """A special case denoting a credit"""
  CREDIT
  """Tax code for the European Union"""
  EU_VAT
  """A special case denoting an invoice"""
  INVOICE
  """Tax code for Indonesia"""
  IN_GST
  """Tax code for Mexico"""
  MX_RFC
  """Tax code for Norway"""
  NO_VAT
  """Tax code for New Zealand"""
  NZ_GST
  """An unknown type"""
  UNKNOWN
  """Tax code for the United States of America"""
  US_EIN
  """Tax code for South Africa"""
  ZA_VAT
}

"""Horizontal alignment type"""
enum TextStyleAlignment {
  """Center alignment"""
  CENTER
  """Justified"""
  JUSTIFIED
  """Left alignment"""
  LEFT
  """Right alignment"""
  RIGHT
}

"""Thumbnail size types"""
enum ThumbnailSizeType {
  """Size L"""
  L
  """Size M"""
  M
  """Size S"""
  S
  """Size XL"""
  XL @deprecated(reason: "Do not use")
}

"""
Color format to use in a css token export. Ignored for other formats than
      CSS. Defaults to rgba if nothing is specified.
"""
enum TokenColorFormat {
  """Hexadecimal with alpha, #RRGGBBAA or #RRGGBBAA"""
  HEX
  """Hue saturation lightness, hsla(hue, sat, lum, alpha)"""
  HSLA
  """Red green blue alpha, rgba(r, g, b, a)"""
  RGBA
}

"""Design Token export format"""
enum TokenExportFormat {
  """Amazon Style Dictonary"""
  AMAZON
  """Cascading Style Sheets"""
  CSS
  """W3C Design Tokens"""
  W3C
}

"""Uploads restricted for"""
enum UploadsRestrictedForType {
  """Uploads are not restricted"""
  NONE
  """Uploads are restricted, but not to the caller"""
  OTHERS
  """Uploads are restricted to the caller"""
  SELF
}

"""Computed field for current user access level"""
enum UserAccessLevel {
  """View, inspect, download, edit and upload"""
  EDIT
  """View, inspect and download"""
  INSPECT
  """No access"""
  NONE
  """View only"""
  VIEW
}

"""User activity status"""
enum UserActivityStatus {
  """User is active"""
  ACTIVE
  """User is not active"""
  INACTIVE
}

"""The general skill set of the user"""
enum UserProfessionalRole {
  """Designer"""
  DESIGNER
  """Design System Manager"""
  DESIGN_SYSTEM_MANAGER
  """Developer"""
  DEVELOPER
  """Educational Institution"""
  EDUCATIONAL_INSTITUTION
  """Finance/Admin"""
  FINANCE_OR_ADMIN
  """Manager/Design Team Lead"""
  MANAGER_OR_DESIGN_TEAM_LEAD
  """Marketing Specialist"""
  MARKETING_SPECIALIST
  """Other"""
  OTHER
  """Product"""
  PRODUCT
  """Researcher"""
  RESEARCHER
  """Student"""
  STUDENT
  """Teacher"""
  TEACHER
  """Writer"""
  WRITER
}

"""Filter values for version history"""
enum VersionHistoryItemType {
  """Version created after Versioning feature"""
  VERSION
  """Version that has been softly deleted"""
  VERSION_DELETED
  """Version created prior to Versioning feature"""
  VERSION_UNAVAILABLE
}

"""Filter values for version subscriptions"""
enum VersionSubscriptionStateFilter {
  """Subscribes to all updates"""
  ANY
  """
  Subscribes to published version if at least one published version exists.
  Otherwise subscribes to all versions.
  """
  PUBLISHED
}

"""
Determines the default access level, on a share, for workspace members.
This value gets overridden if the user has a share membership.
"""
enum WorkspaceAccessLevel {
  """Default value for each member type: inspect for viewers, edit for editors"""
  DEFAULT
  """View only"""
  VIEW
}

"""Available access_levels for workspace members"""
enum WorkspaceMemberAccessLevel {
  """Can edit documents"""
  EDITOR
  """Can only see documents but not edit/add them"""
  VIEWER
}

"""Workspace membership roles allowed on creation"""
enum WorkspaceMembershipInviteRole {
  """Admin"""
  ADMIN
  """Member"""
  MEMBER
}

"""Workspace membership order type"""
enum WorkspaceMembershipOrderType {
  """Access Level"""
  ACCESS_LEVEL
  """User Activity Status"""
  ACTIVITY_STATUS
  """License"""
  LICENSE
  """Name"""
  NAME
  """Role"""
  ROLE
}

"""Workspace membership roles"""
enum WorkspaceMembershipRole {
  """Admin"""
  ADMIN
  """Finance"""
  FINANCE
  """Guest"""
  GUEST
  """Member"""
  MEMBER
  """Partner"""
  PARTNER
}

"""Membership status"""
enum WorkspaceMembershipStatus {
  """User is an editor"""
  EDITOR
  """User has no access to the workspace"""
  NONE
  """User is a viewer"""
  VIEWER
}

"""
An enum representing the different filters that can be used when querying
Shares.
"""
enum WorkspaceShareFilterType {
  """Filter for Shares that do not belong to a users drafts"""
  EXCLUDE_PERSONAL_DRAFTS
  """Filter for Shares that have associated previews."""
  HAS_PREVIEWS
  """
  Filter for Shares that contain at least one Prototype.
  
  i.e. At least one Artboard in the latest Version of the Share has
  `is_flow_home=true`.
  """
  HAS_PROTOTYPES
  """Filter for Shares that the current user can edit."""
  I_CAN_EDIT
  """Filter for Shares that are Libraries."""
  LIBRARY
  """Filter for Shares that do not belong to a Collection."""
  NO_COLLECTION
  """Filter for Shares that do not belong to a Project."""
  NO_PROJECT
  """Filter for Shares that have been published to a profile."""
  PUBLISHED
  """Filter for Shares that have been shared with you."""
  SHARED_WITH_ME
  """Filter for Shares that are templates."""
  TEMPLATE
}

"""Values for the current state of a workspace"""
enum WorkspaceStatus {
  """When in the active state a workspace functions as normal"""
  ACTIVE
  """
  When in the inactive state a workspace can not be uploaded to, and
  the members list cannot be modified.
  """
  INACTIVE
}

"""The type of a workspace"""
enum WorkspaceType {
  """A business workspace. This type of workspace is granted for business plans."""
  BUSINESS
  """A essential workspace. This type of workspace is granted for the essential plans."""
  ESSENTIAL
  """
  A personal workspace. This type of workspace is limited in functionality.
  For more information see `User.personalWorkspace`
  """
  PERSONAL
  """A standard workspace"""
  STANDARD
  """An education workspace. This type of workspace is granted for students and institutions."""
  STUDENT
}

"""This event is dispatched every time project membership changes."""
interface BaseProjectAccessChangedEvent {
  """Identifier of the workspace to which the project belongs"""
  workspaceIdentifier: UUID!
}

"""This event is dispatched every time project state changes."""
interface BaseProjectChangedEvent {
  """Identifier of the affected project"""
  projectIdentifier: UUID! @deprecated(reason: "Use project instead")
  """Identifier of the workspace to which the project belongs"""
  workspaceIdentifier: UUID!
}

"""This event is dispatched every time share state changes."""
interface BaseShareChangedEvent {
  """Share identifier"""
  shareIdentifier: UUID!
  """Explicit field to know the type of event"""
  type: String
  """Workspace"""
  workspace: Workspace!
}

"""
The component interface for Symbol, Color variable, Text style
    and Layer style
"""
interface Component {
  """Component depth, 0 indicates top level component"""
  depth: Int!
  """Component description"""
  description: String
  """Component identifier"""
  identifier: UUID!
  """Component name"""
  name: String!
  """Component path"""
  path: String!
  """Component path groups"""
  pathGroups: [String!]!
  """Structured path representation"""
  pathInfo: [PathComponentInfo!]!
  """Component identifier from the sketch document"""
  uuid: UUID!
}

"""FrameGroup"""
interface FrameGroup {
  """Annotation count"""
  annotationCount: Int!
  """
  Associated component. Only symbol frames are associated with components.
  For other frames the value is always null.
  """
  component: Component
  """Document order number"""
  documentOrder: Int!
  """Version short identifier"""
  documentVersionShortId: ShortId!
  """List of files"""
  files(
    """File type"""
    type: FileType
  ): [File!]!
  """Whether the document was rendered with fonts missing"""
  hasMissingFonts: Boolean
  """Height"""
  height: Float!
  """identifier"""
  identifier: UUID!
  """Flow home?"""
  isFlowHome: Boolean!
  """Name"""
  name: String!
  """Next FrameGroup"""
  next: FrameGroup
  """Order"""
  order: Int!
  """Page"""
  page: Page
  """Previous FrameGroup"""
  previous: FrameGroup
  """Revisions"""
  revisions(after: String, before: String, limit: Int = 20): FrameRevisions!
  """The subscription status for the current user for this frame."""
  subscriptionStatus: NotificationSubscriptionStatus!
  """Unread count of comments"""
  unreadCount: Int!
  """Unique identifier"""
  uuid: UUID!
  """Width"""
  width: Float!
}

"""Workspace that owns the Share."""
interface ShareOwner {
  """(Deprecated) Use identifier instead"""
  id: String @deprecated(reason: "Use identifier instead.")
  """The identifier of the owner"""
  identifier: UUID!
  """The name of the owner"""
  name: String
}

"""Interface for storage item."""
interface StorageItem {
  """Date and time in which the storage item was archived."""
  archivedAt: DateTime
  """The date and time in which the storage item was created."""
  createdAt: DateTime
  """The date and time the storage item was moved to the trash."""
  deletedAt: DateTime
  """The identifier of the storage item."""
  identifier: UUID!
  """The name of the storage item."""
  name: String!
  """The last date and time the storage item was updated."""
  updatedAt: DateTime
  """The public workspace which owns this storage item."""
  workspace: PublicWorkspace!
}

"""
A `UserNotification` is a notification intended to be used to show users notifications in the
designated "notifications" section at the top right of the nav bar (indicated by the little
bell).

Over time other types of notifications have implemented this interface and are in use for
purposes other than showing user notifications, but that should be avoided for all future
cases, and we are considering strategies to remove those other incorrect uses of this type.
"""
interface UserNotification {
  """Created at date"""
  date: DateTime
  """The old name for an identifier - DEPRECATED"""
  id: UUID! @deprecated(reason: "Use identifier instead.")
  """The UUID identifier of the notification"""
  identifier: UUID!
  """Is the notification for an organization?"""
  isOrganizationNotification: Boolean @deprecated(reason: "All notifications originate from a workspace")
  """Is the notification read?"""
  isRead: Boolean
  """Organization the user belongs to"""
  organization: PublicOrganization @deprecated(reason: "Use `workspace`")
  """Relative path to an associated resource"""
  path: String
  """Share to which the notification is relevant"""
  share: Share
  """The read/unread state of the notification"""
  state: NotificationState
  """Subtitle of the notification shown to users"""
  subtitle: String
  """Title of the notification shown to users"""
  title: String
  """Token for the notification"""
  token: String
  """Absolute URL to an associated resource"""
  url: String
  """User to whom the notification is relevant"""
  user: PublicUser
  """Workspace the user belongs to"""
  workspace: PublicWorkspace
}

"""Response from mutation requestAccessToProject"""
type AcceptProjectAccessRequestResponse {
  """The private project"""
  project: Project!
  """The accepted project membership"""
  projectMembership: ProjectMembership!
}

"""Response from mutation acceptProjectMembershipInvitation"""
type AcceptProjectMembershipInvitationResponse {
  """The accepted project membership"""
  projectMembership: ProjectMembership!
}

"""API response for acceptWorkspaceInvite"""
type AcceptWorkspaceInviteResponse {
  """The workspace membership for the accepted invite"""
  membership: WorkspaceMembership!
}

"""Response for checking if an account exists"""
type AccountExistsResponse {
  """Whether the account exists"""
  exists: Boolean!
}

"""The activity status for a workspace member"""
type ActivityStatus {
  """How many days ago was this user online on the app"""
  lastSeenInDays: Int!
  """The user status relative to the last day seen online"""
  status: UserActivityStatus!
}

"""Response from mutation addPermissionGroupMembers"""
type AddPermissionGroupMembersResponse {
  """The created permission group membership"""
  members: [PermissionGroupMembership]!
  """The permission group"""
  permissionGroup: PermissionGroup!
}

"""
Response from mutation addPermissionGroupRelation.

Deprecated
"""
type AddPermissionGroupRelationResponse {
  """The created relation"""
  relation: PermissionGroupRelation!
}

"""Response from mutation addProjectMember"""
type AddProjectMemberResponse {
  """The affected project"""
  project: Project!
  """The created project membership"""
  projectMembership: ProjectMembership!
}

"""Response from mutation addProjectPermissionGroupRelation"""
type AddProjectPermissionGroupRelationResponse {
  """The created relation"""
  relation: PermissionGroupRelationProject!
}

"""API response for addReactionToPublication."""
type AddReactionToPublicationResponse {
  """Publication to which a reaction has been added."""
  publication: Publication!
}

"""A notification that is created when a member is added to a share."""
type AddShareMemberNotification implements UserNotification {
  """Created at date"""
  createdAt: DateTime!
  """Date"""
  date: DateTime @deprecated(reason: "Use `createdAt` instead.")
  """Identifier"""
  id: UUID! @deprecated(reason: "Use identifier instead.")
  """Identifier"""
  identifier: UUID!
  """Is organization notification"""
  isOrganizationNotification: Boolean @deprecated(reason: "All notifications originate from a workspace")
  """Is read"""
  isRead: Boolean @deprecated(reason: "Use `state` instead.")
  """Organization"""
  organization: PublicOrganization @deprecated(reason: "Use `workspace` instead")
  """Notification subject's URL path"""
  path: String
  """Share"""
  share: Share
  """The read/unread state of the notification"""
  state: NotificationState
  """Subtitle"""
  subtitle: String
  """Title"""
  title: String
  """Token"""
  token: String
  """URL"""
  url: String
  """User"""
  user: PublicUser
  """Workspace"""
  workspace: PublicWorkspace
}

"""Response from mutation addShareMembership"""
type AddShareMembershipResponse {
  """The created share membership"""
  shareMembership: ShareMembership!
}

"""Response from mutation addSharePermissionGroupRelation"""
type AddSharePermissionGroupRelationResponse {
  """The created relation"""
  relation: PermissionGroupRelationShare!
}

"""API response for addSharesToCollection"""
type AddSharesToCollectionResponse {
  """The updated collection"""
  collection: Collection!
}

"""Mutation response for agreeToWorkspaceTos mutation"""
type AgreeToWorkspaceTermsOfServiceResponse {
  """The associated workspace customer for whom to ToS have been agreed"""
  customer: WorkspaceCustomer!
}

"""Annotation object"""
type Annotation {
  """Full list of annotation's comments"""
  comments(after: String, before: String, limit: Int = 20): Comments!
  """The position of an annotation, given in (X,Y) coordinates, if any"""
  coordinates: AnnotationCoordinates
  """Created at"""
  createdAt: DateTime
  """Last version of the artboard to which this annotation is linked (if any)"""
  currentArtboard: Artboard @deprecated(reason: "Use `currentSubject` instead")
  """Last version of the page this annotation is directly linked to (if any)"""
  currentPage: Page @deprecated(reason: "Use `currentSubject` instead")
  """
  Instance of concrete object representing current subject with which the annotation is
  associated. It can be either `Page`, `Artboard` or `Component` from latest version
  of the document.
  """
  currentSubject: CurrentSubject! @deprecated(reason: "use `page` and `frameUuid` instead")
  """Annotation's initial comment"""
  firstComment: Comment!
  """UUID of the frame to which this annotation is linked (if any)"""
  frameUuid: String
  """Whether annotation has new comments for current user"""
  hasNewComments: Boolean
  """Identifier"""
  identifier: UUID!
  """Whether annotation is new for current user"""
  isNew: Boolean
  """When last comment was created"""
  latestCommentCreatedAt: DateTime!
  """
  Get the latest version of the Share in which this annotation is visible.
  
  If the "subject" of the annotation (i.e. the Page/Artboard/Component that
  this annotation relates to) has been deleted in the latest version of the
  Share, then the annotation will not be visible there.
  
  WARNING: This field should only be used when resolving a single instance
  of Annotation object in a query (like for instance, in Annotation
  subscriptions). The field is not optimized for resolving in annotations
  in batch (as a part of a paginated list, for example).
  """
  latestVisibleVersion: LatestVisibleVersion! @deprecated(reason: "Annotations are not version-aware anymore")
  """Page to which this annotation is linked, either directly or via the frame"""
  page: AnnotationPage
  """Permanent id of the artboard across all revisions"""
  permanentArtboardId: String @deprecated(reason: "Use `currentSubject.uuid` instead")
  """Discussion ID related to permanent artboard ID"""
  permanentArtboardShortId: ShortId @deprecated(reason: "Use `currentArtboard.permanent_artboard_short_id` instead")
  """Permanent id of the component across all revisions"""
  permanentComponentId: String @deprecated(reason: "Use `currentSubject.uuid` instead")
  """Permanent id of the annotation's page, unique across all page versions"""
  permanentPageId: String @deprecated(reason: "Use `currentSubject.uuid` instead")
  """Information about the annotation resolution (if resolved)"""
  resolution: AnnotationResolution
  """Share to which this annotation belongs"""
  share: Share!
  """Identifier of the share"""
  shareIdentifier: UUID! @deprecated(reason: "Use `share.identifier` instead")
  """The subscription status for the current user for this annotation."""
  subscriptionStatus: NotificationSubscriptionStatus!
  """Updated at"""
  updatedAt: DateTime
  """
  Version identifier which was open for editing when the annotation was created.
  Only populated by real-time clients.
  """
  versionIdentifier: UUID
  """
  Whether the annotation is visible in a particular version of the share. Defaults to latest
  processed version of the share.
  
  WARNING: Should only be used when resolving a single instance of Annotation object
  in a query (like for instance, in Annotation subscriptions). The field is not optimized
  for resolving in annotations in batch (as a part of a paginated list, for example).
  """
  visibleInVersion(
    """Version identifier to check annotation's visibility for"""
    versionIdentifier: String
  ): Boolean! @deprecated(reason: "Annotations are not version-aware anymore")
}

"""
The position of an annotation, given in (X,Y) coordinates. This position can be relative to
a page or an artboard, depending on which field is set for the annotation (`permanent_page_id`
or `permanent_artboard_id`.
"""
type AnnotationCoordinates {
  """The annotation's position along the X axis"""
  x: Float!
  """The annotation's position along the Y axis"""
  y: Float!
}

"""This event is dispatched every time an annotation gets deleted"""
type AnnotationDeletedEvent {
  """Last version of the artboard to which the annotation was linked (if any)"""
  currentArtboard: Artboard @deprecated(reason: "Use `currentSubject` instead")
  """Last version of the page the annotation was directly linked to (if any)"""
  currentPage: Page @deprecated(reason: "Use `currentSubject` instead")
  """
  Instance of concrete object representing current subject with which the annotation is
  associated. It can be either `Page`, `Artboard` or `Component` from latest version
  of the document.
  """
  currentSubject: CurrentSubject!
  """Identifier of the deleted annotation"""
  identifier: UUID!
  """Share to which the deleted annotation belonged"""
  share: Share!
}

"""Information about the annotation resolution"""
type AnnotationResolution {
  """Date in which the annotation was last resolved"""
  resolvedAt: DateTime
  """User that last resolved the annotation"""
  user: PublicUser
}

"""List of annotations with pagination info"""
type Annotations {
  """List of annotations"""
  entries: [Annotation!]!
  """Pagination metadata"""
  meta: PaginationMeta!
}

"""API response for archiveProject"""
type ArchiveProjectResponse {
  """The archived project"""
  project: Project!
}

"""API response for archiveStorageItem mutation"""
type ArchiveStorageItemResponse {
  """The archived storage item"""
  storageItem: StorageItem!
}

"""Artboard"""
type Artboard implements FrameGroup {
  """Annotation count"""
  annotationCount: Int!
  """Artboard base"""
  artboardBase: ArtboardBase!
  """Annotation count"""
  commentCount: Int! @deprecated(reason: "Please use `annotationCount` instead")
  """
  Associated component. Only symbol artboards are associated with components.
  For other artboards the value is always null.
  """
  component: Component
  """Discussion"""
  discussion: Discussion!
  """Document order number"""
  documentOrder: Int!
  """Version short identifier"""
  documentVersionShortId: ShortId!
  """List of files"""
  files(
    """File type"""
    type: FileType
  ): [File!]!
  """Whether the document was rendered with fonts missing"""
  hasMissingFonts: Boolean
  """Height"""
  height: Float!
  """Deprecated identifier"""
  id: UUID! @deprecated(reason: "Use identifier instead.")
  """identifier"""
  identifier: UUID!
  """Flow home?"""
  isFlowHome: Boolean!
  """
  Returns list of mentionable users for a given `artboard`
  
  The list of mentionable users is determined by the current user's
  relationship with the share:
  
  - For a public share, external users (those without a membership) can mention
  anyone who has previously commented on the share and still has comment access
  - For all other shares, members can mention anyone with comment access to the
  share.
  
  The list of mentionable users is sorted alphabetically by name. For
  mentionable SSO users, the name from their external identity is used.
  """
  mentionableUsers: [MentionableUser!]! @deprecated(reason: "Use share.mentionableUsers instead.")
  """Name"""
  name: String!
  """Next artboard"""
  next: Artboard
  """Next artboard"""
  nextArtboard: Artboard @deprecated(reason: "Use `next` instead")
  """Order"""
  order: Int!
  """Page"""
  page: Page
  """Discussion identifier"""
  permanentArtboardShortId: ShortId!
  """Previous artboard"""
  previous: Artboard
  """Previous artboard"""
  previousArtboard: Artboard @deprecated(reason: "Use `previous` instead")
  """Revision identifier"""
  revisionId: ShortId @deprecated(reason: "Use revision_short_id instead")
  """Revision UUID"""
  revisionIdentifier: UUID!
  """Revision short identifier"""
  revisionShortId: ShortId!
  """Revisions"""
  revisions(after: String, before: String, limit: Int = 20): FrameRevisions!
  """Short identifier"""
  shortId: ShortId!
  """The subscription status for the current user for this artboard."""
  subscriptionStatus: NotificationSubscriptionStatus!
  """Unread count of comments"""
  unreadCount: Int!
  """Unique identifier"""
  uuid: UUID!
  """Width"""
  width: Float!
}

"""Artboard base type"""
type ArtboardBase {
  """Annotation count"""
  commentCount: Int! @deprecated(reason: "Please use `Artboard.annotationCount` instead")
  """Discussion"""
  discussion: Discussion!
  """Short identifier"""
  shortId: ShortId!
  """Unread count"""
  unreadCount: Int!
}

"""List of artboard revisions with pagination info"""
type ArtboardRevisions {
  """List of revisions"""
  entries: [ArtboardRevisionItem!]!
  """Pagination metadata"""
  meta: PaginationMeta!
}

"""List of artboards with pagination info"""
type Artboards {
  """List of artboards"""
  entries: [Artboard!]!
  """Info for pagination"""
  meta: PaginationMeta!
}

"""SAML attribute mappings configuration"""
type AttributeMappingEntry {
  """Attribute name for Avatar URL"""
  avatarUrl: SamlAttribute
  """Attribute name for Email"""
  email: SamlAttribute
  """Attribute name for First Name"""
  firstName: SamlAttribute
  """Attribute mapping options for names"""
  fullName: NameMapping
  """Attribute name for Surname"""
  surname: SamlAttribute
}

"""Avatar object"""
type Avatar {
  large: String
  small: String
}

"""Billing information for customers"""
type Billing {
  """
  Returns if the subscription is active. Currently, the subscription is
  considered active if the subscription status is one of the following:
   - active
   - trialing
   - incomplete
   - past_due
  """
  isSubscriptionActive: Boolean
  """Seats information for a subscription"""
  seats: BillingSeatsInfo!
  """Customer's subscription status"""
  status: BillingStatus!
  """Date scheduled for the cancellation"""
  subscriptionEnd: DateTime
  """Indicates whether the customer's payment details are set"""
  subscriptionSetUp: Boolean
  """End date of the trial"""
  trialEnd: DateTime
}

"""[WILL BE REMOVED] Billing history item"""
type BillingHistoryItem {
  """Amount/Quantity"""
  amount: Int!
  """Creation date"""
  createdAt: DateTime!
  """Description"""
  description: String!
  """Unique identifier"""
  id: String!
  """Invoice PDF url"""
  invoicePdf: String
  """Number"""
  number: String!
  """Type"""
  type: BillingHistoryItemType!
}

"""[WILL BE REMOVED] List of billing history items with pagination info"""
type BillingHistoryItems {
  """[WILL BE REMOVED] List of billing history items"""
  entries: [BillingHistoryItem!]!
  """Pagination metadata"""
  meta: PaginationMeta!
}

"""Seats information for a subscription"""
type BillingSeatsInfo {
  """Amount of seats available to assign editors"""
  availableSeats: Int!
  """The total number of seats the customer is paying for (editor seats)"""
  currentSeatsTotal: Int!
  """Total amount of seats scheduled for the next billing cycle (null if no schedule exists)"""
  scheduledSeatsTotal: Int
  """Amount of editors using a seat"""
  usedSeats: Int!
}

"""Response for canceling the scheduled update of seats for a Workspace"""
type CancelScheduledBillingSeatsResponse {
  """Modified workspace"""
  workspace: Workspace!
}

"""API response for checkWorkspaceProfileShortUrl"""
type CheckWorkspaceProfileShortUrlResponse {
  """Indicates whether the name is available or not"""
  available: Boolean!
}

"""A newly created coedit-enabled share, version and document."""
type CollaborativeShareCreatePayload {
  """The document associated with the initial version of the share"""
  document: Document!
  """The newly created share"""
  share: Share!
  """The initial version of the share"""
  version: Version!
}

"""A Collection is a group of Shares within a Project."""
type Collection {
  """The description of this Collection."""
  description: String
  """A unique identifier for this Collection."""
  identifier: UUID!
  """
  The name of this Collection.
  
  Each Collection within a Project must have a unique name.
  """
  name: String!
  """
  Returns a preview of the first 4 Shares in the Collection.
  
  
  Each preview contains some basic information about the Share (e.g. its
  name and identifier) along with the Share's preview thumbnail File.
  
  This field provides an optimized way to lookup the preview files for the
  Shares in the Collection in bulk.
  
  If the Collection is not trashed, then only non-trashed Shares are
  included in the list.
  
  If the Collection is trashed, then all Shares are included.
  """
  previews(
    """
    Parameters for searching the Shares in the Collection.
    
    Only Shares that match the search parameters will be included in the
    list of previews.
    
    If no search parameters are given, then all Shares in the Collection
    are included in the list.
    """
    search: SharesSearchParams
  ): [CollectionSharePreview!]!
  """
  The number of Shares in the Collection.
  
  This field is optimised for bulk look up, so should be used when querying
  for multiple Collections, for example via `project.collections`.
  
  In contrast, `collection.shares.meta.totalCount` is a paginated resource,
  and so should not be used when querying for multiple collections.
  
  This count excludes trashed Shares if the Collection is not in the trash.
  """
  shareCount(
    """
    Parameters for searching the Shares in the Collection.
    
    Only Shares that match the search parameters will be included in the
    count.
    
    If no search parameters are given, then all Shares in the Collection
    are included in the count.
    """
    search: SharesSearchParams
  ): Int!
  """
  The paginated Shares within this Collection.
  
  If the Collection is not trashed, then only non-trashed Shares are
  returned.
  
  If the Collection is trashed, then all Shares are returned.
  
  **NOTE**: this is a paginated resource and so it should not be used when
  querying multiple collections (e.g. `project.collections`). This will
  result in N+1 queries due to how paginated resources are implemented,
  nested paginated resources should be avoided. Custom, optimised fields
  should be used instead (e.g. collection.shareCount or
  collection.previews).
  """
  shares(
    after: String
    before: String
    limit: Int = 20
    """Available params for searching shares of this collection"""
    search: SharesSearchParams
    """
    The order in which Shares should be sorted.
    
    See the ShareSortOrder enum for a list of supported values.
    
    Defaults to LAST_MODIFIED_DESC.
    """
    sortOrder: ShareSortOrder = LAST_MODIFIED_DESC
  ): Shares!
  """
  All of the Shares in the Collection.
  
  In certain circumstances, clients need to be able to fetch all of the
  Shares in a Collection without pagination.
  
  This field provides an optimized way to do so, returning a slimmed down
  type to ensure that it performs well and avoids clients resolving fields
  that cause further database queries.
  """
  sharesUnpaginated: [UnpaginatedCollectionShare!]!
}

"""
An event that is broadcast whenever the metadata of a Collection changes.

e.g. its name.
"""
type CollectionChangedEvent {
  """The updated Collection."""
  collection: Collection!
}

"""An event that is broadcast whenever a new Collection is created."""
type CollectionCreatedEvent {
  """The newly created Collection."""
  collection: Collection!
}

"""An event that is broadcast whenever a Collection is deleted."""
type CollectionDeletedEvent {
  """The identifier of the Collection that was deleted."""
  identifier: UUID!
}

"""
A preview of a Share within a Collection.

This is a slimmed down version of the Share type to make querying
Collections in bulk more efficient.
"""
type CollectionSharePreview {
  """
  The preview thumbnail File for the Share.
  
  Note: this field is nullable as the Share might still be processing, in
  which case a thumbnail File is not ready yet. Clients should show a
  loading placeholder in such circumstances.
  """
  file: File
  """The name of the Share."""
  name: String!
  """The identifier of the Share."""
  shareIdentifier: UUID!
}

"""A paginated list of Collections and pagination metadata."""
type Collections {
  """List of Collections."""
  entries: [Collection!]!
  """Pagination metadata."""
  meta: PaginationMeta!
}

"""Color variable component"""
type ColorVariable implements Component {
  """Color variable depth"""
  depth: Int!
  """Color variable description"""
  description: String
  """Color variable identifier"""
  identifier: UUID!
  """Color variable name"""
  name: String!
  """Does the preview need a dark background?"""
  needsContrastingBackground: Boolean!
  """Color variable path"""
  path: String!
  """Color variable path groups"""
  pathGroups: [String!]!
  """Structured path representation"""
  pathInfo: [PathComponentInfo!]!
  """Color value as RGBA"""
  rgbaValue: RGBAColor!
  """Color variable identifier from the sketch document"""
  uuid: UUID!
}

"""Comment object"""
type Comment {
  """Annotation to which this comment belongs"""
  annotation: Annotation!
  """Commented artboard"""
  artboard: Artboard @deprecated(reason: "Comment is children of Annotation.")
  """Body"""
  body: String!
  """Created at"""
  createdAt: DateTime!
  """Identifier"""
  id: ID @deprecated(reason: "Use identifier instead.")
  """Identifier"""
  identifier: UUID!
  """Is edited"""
  isEdited: Boolean!
  """Is read"""
  isRead: Boolean!
  """The parent comment or nil if there isn't one"""
  parent: ParentComment @deprecated(reason: "Comment does not have parent_comment. Please use Annotation.")
  """The subscription status for the current user for this comment."""
  subscriptionStatus: NotificationSubscriptionStatus! @deprecated(reason: "User subscribes to Annotation.")
  """Updated at"""
  updatedAt: DateTime
  """Comment author"""
  user: PublicUser!
  """Determines if the user can delete the comment"""
  userCanDelete: Boolean!
  """Determines if the user is the author of the comment"""
  userIsCreator: Boolean!
  """(Deprecated) Please migrate to userIsCreator"""
  viewerDidAuthor: Boolean! @deprecated(reason: "Please migrate to userIsCreator")
}

"""
A notification that is created when a new comment is created relating to a new resource
that the user is subscribed to or that mentions the user.
"""
type CommentNotification implements UserNotification {
  """The artboard to which the comment belongs."""
  artboard: Artboard
  """The comment that belongs to the notification."""
  comment: Comment
  """Created at date"""
  createdAt: DateTime!
  """Date"""
  date: DateTime @deprecated(reason: "Use `createdAt` instead.")
  """Identifier"""
  id: UUID! @deprecated(reason: "Use identifier instead.")
  """Identifier"""
  identifier: UUID!
  """Is the user mentioned in the comment?"""
  isMentioned: Boolean!
  """Is organization notification"""
  isOrganizationNotification: Boolean @deprecated(reason: "All notifications originate from a workspace")
  """Is read"""
  isRead: Boolean @deprecated(reason: "Use `state` instead.")
  """Organization"""
  organization: PublicOrganization @deprecated(reason: "Use `workspace` instead")
  """Path"""
  path: String
  """The share to which the artboard belongs."""
  share: Share
  """The read/unread state of the notification"""
  state: NotificationState
  """Subtitle"""
  subtitle: String
  """Title"""
  title: String
  """Token"""
  token: String
  """URL"""
  url: String
  """User"""
  user: PublicUser
  """Workspace"""
  workspace: PublicWorkspace
}

"""List of comments with pagination info"""
type Comments {
  """List of comments"""
  entries: [Comment!]!
  """Pagination metadata"""
  meta: PaginationMeta!
}

"""Component count for each component type"""
type ComponentCount {
  """Color variable count"""
  colorVar: Int!
  """Layer style count"""
  layerStyle: Int!
  """Symbol count"""
  symbol: Int!
  """Text style count"""
  textStyle: Int!
}

"""Component group data (tree structure)"""
type ComponentGroupData {
  """Component tree structure as JSON"""
  data: String
}

"""List of components"""
type Components {
  """Paginated list of components"""
  entries: [Component!]!
  """Pagination information"""
  meta: PaginationMeta!
  """Component processing status"""
  status: DocumentComponentsState!
}

"""[WILL BE REMOVED] Cost of adding a contributor to a license"""
type ContributorCost {
  """Monthly cost"""
  amountPerMonth: Int!
  """Total amount to charge"""
  charge: Int!
  """[WILL BE REMOVED] Amount that would be charged to credits left in the license"""
  creditAmount: Int!
  """Amount that would be charged to the default payment method of the license"""
  creditCardAmount: Int! @deprecated(reason: "use paymentAmount instead")
  """Amount that would be charged to the default payment method of the license"""
  paymentAmount: Int!
  """Form of payment"""
  paymentType: PaymentType!
}

"""Coupon"""
type Coupon {
  amountOff: Int
  duration: String
  durationInMonths: Int
  name: String
  percentOff: Decimal
  redeemBy: DateTime
  valid: Boolean
}

"""API response for createAnnotationReply"""
type CreateAnnotationReplyResponse {
  """The newly created reply"""
  comment: Comment!
}

"""API response for createAnnotation"""
type CreateAnnotationResponse {
  """The newly created annotation"""
  annotation: Annotation!
}

"""API response for createCollection"""
type CreateCollectionResponse {
  """The newly created collection"""
  collection: Collection!
}

"""Response for creating an education application for a workspace"""
type CreateEducationApplicationResponse {
  """Created education application"""
  educationApplication: EducationApplication!
  """The workspace the application was requested for"""
  workspace: Workspace! @deprecated(reason: "Can be fetched through the educationApplication field")
}

"""API response for createPartnerWorkspace"""
type CreatePartnerWorkspaceResponse {
  """The associated workspace"""
  workspace: Workspace!
}

"""Response from mutation createPermissionGroup"""
type CreatePermissionGroupResponse {
  """The created permission group"""
  permissionGroup: PermissionGroup!
}

"""API response for createPreview"""
type CreatePreviewResponse {
  """The newly created preview"""
  preview: Preview!
}

"""API response for createWorkspaceProfile"""
type CreateWorkspaceProfileResponse {
  """The workspace profile which has been created"""
  workspaceProfile: WorkspaceProfile!
}

"""API response for createWorkspaceProject"""
type CreateWorkspaceProjectResponse {
  """The newly created project"""
  project: Project!
}

"""API response for createWorkspace"""
type CreateWorkspaceResponse {
  """Pending SCA token"""
  pendingScaToken: String
  """The associated workspace"""
  workspace: Workspace!
}

"""A newly created share, version, and document"""
type CreateWorkspaceShareResponse {
  """The document associated with the initial version of the share"""
  document: Document!
  """The newly created share"""
  share: Share!
  """The initial version of the share"""
  version: Version!
}

"""[WILL BE REMOVED] Credit"""
type Credit {
  """Credit amount"""
  amount: CreditAmount!
  """Creation date"""
  createdAt: DateTime!
  """Description of the credit"""
  description: String!
  """Expiration date"""
  expiresAt: DateTime
  """Identifier of the credit"""
  id: ID! @deprecated(reason: "Use identifier instead.")
  """Identifier of the credit"""
  identifier: UUID!
  """[WILL BE REMOVED] Associated license"""
  license: License
  """Associated organization"""
  organization: Organization
  """[WILL BE REMOVED] Credit type (team, individual, unknown)"""
  type: CreditType!
  """Update date"""
  updatedAt: DateTime!
}

"""[WILL BE REMOVED] List of credits with pagination info"""
type Credits {
  """Paginated data"""
  entries: [Credit!]!
  """Pagination informations"""
  meta: PaginationMeta!
}

"""API response for deleteAnnotationReply"""
type DeleteAnnotationReplyResponse {
  """The deleted reply comment"""
  comment: Comment!
}

"""API response for deleteAnnotation"""
type DeleteAnnotationResponse {
  """The deleted annotation"""
  annotation: Annotation!
}

"""API response for deleteCollection"""
type DeleteCollectionResponse {
  """The deleted collection"""
  collection: Collection!
}

"""Response from mutation deletePermissionGroup"""
type DeletePermissionGroupResponse {
  """The UUID of the deleted permission group"""
  permissionGroupIdentifier: UUID!
}

"""API response for deleteProjectPermanently"""
type DeleteProjectPermanentlyResponse {
  """The identifier of the deleted project"""
  projectIdentifier: UUID!
  """The workspace to which the deleted project belonged"""
  workspace: Workspace!
}

"""API response for deleteSharePermanently"""
type DeleteSharePermanentlyResponse {
  """The identifier of the deleted share"""
  shareIdentifier: UUID!
  """The workspace to which the deleted share belonged"""
  workspace: Workspace!
}

"""API response for deleteStorageItem mutation"""
type DeleteStorageItemResponse {
  """The deleted storage item"""
  storageItem: StorageItem!
}

"""API response for deleteWorkspaceAvatar"""
type DeleteWorkspaceAvatarResponse {
  """The associated workspace"""
  workspace: Workspace!
}

"""API response for deleteWorkspace"""
type DeleteWorkspaceResponse {
  """The associated workspace"""
  deletedWorkspace: Workspace!
}

"""A deleted SCIM personal access token"""
type DeletedScimPersonalAccessToken {
  """The identifier of the deleted token"""
  identifier: UUID!
}

"""
Event that fires when permanently deleting a trashed share
(Deprecated) Use ShareDeletedPermanentlyEvent instead.
"""
type DeletedSharePermanentlyEvent {
  """Share identifier"""
  shareIdentifier: UUID!
  """Workspace identifier"""
  workspaceIdentifier: UUID!
}

"""Design System"""
type DesignSystem {
  """Main area content (json)"""
  content: Json
  """The date and time the design system was created"""
  createdAt: DateTime!
  """Description"""
  description: String
  """Header image url"""
  header: String
  """identifier"""
  identifier: UUID!
  """Name"""
  name: String!
  """Preview image url"""
  preview: String
  """A non-paginated list of shares. The maximum number of returned shares is 10."""
  previewShares(
    """The number of shares to be returned."""
    limit: Int! = 5
  ): [Share!]!
  """Documentation sections in this design system"""
  sections: [DesignSystemSection!]!
  """Total number of shares belonging to the design system"""
  shareCount: Int!
  """Shares belonging to a design system"""
  shares(
    after: String
    before: String
    limit: Int = 20
    """Share search params"""
    search: DesignSystemSharesSearchParams
  ): DesignSystemShares!
  """The date and time the design system was last updated"""
  updatedAt: DateTime!
}

"""Design system documentation page"""
type DesignSystemPage {
  """Page content (json)"""
  content: Json
  """Page description"""
  description: String
  """Identifier of the page"""
  identifier: UUID!
  """Name of the page"""
  name: String!
  """The order of which to sort the page"""
  order: Int!
  """Page section"""
  section: DesignSystemSection!
  """The page version. Must be used when making updates to a page"""
  version: Int!
}

"""Subset of design system documentation page fields."""
type DesignSystemPageSummary {
  """Identifier of the page"""
  identifier: UUID!
  """Name of the page"""
  name: String!
}

"""Design system documentation section"""
type DesignSystemSection {
  """The design system this section belongs to"""
  designSystem: DesignSystem!
  """Identifier of the section"""
  identifier: UUID!
  """Name of the section"""
  name: String!
  """Pages that belong to this section"""
  pages: [DesignSystemPageSummary!]!
}

"""Shares belonging to a design system"""
type DesignSystemShares {
  """Paginated list of shares"""
  entries: [Share!]!
  """Pagination information"""
  meta: PaginationMeta!
}

"""Paginated list of design systems"""
type DesignSystems {
  """List of design systems"""
  entries: [DesignSystem!]!
  """Pagination information"""
  meta: PaginationMeta!
}

"""API response for disableMfa"""
type DisableMfaResponse {
  """The user attempting to disable MFA"""
  user: User!
}

"""Response for setting SCIM disabled for a Workspace"""
type DisableScimResponse {
  """Modified workspace"""
  workspace: Workspace!
}

"""Response for disabling Support Access in a Workspace"""
type DisableSupportAccessResponse {
  """Modified workspace"""
  workspace: Workspace!
}

"""Discussion"""
type Discussion {
  """Deprecated identifier"""
  id: ID @deprecated(reason: "Use identifier instead")
  """identifier"""
  identifier: UUID!
}

"""Document"""
type Document {
  """Artboard"""
  artboard(
    """Short_id"""
    shortId: ShortId
  ): Artboard @deprecated(reason: "Use frame instead")
  """Artboard count"""
  artboardCount: Int! @deprecated(reason: "Use frame_count instead")
  """List of artboards"""
  artboards(
    after: String
    before: String
    """Filter, default is all"""
    filter: ArtboardFilterType = ALL
    limit: Int = 20
    """Search"""
    search: String
  ): Artboards @deprecated(reason: "Use frames instead")
  """Has assets"""
  assetStatus: StatusEnum!
  """Does the document support editing of component descriptions?"""
  canEditDescriptions: Boolean!
  """
  This version number determines which Sketch releases are able to coedit
  the Document.
  
  This field is set on coedit-enabled Documents, and is null for Documents
  created by pre-coedit clients.
  
  This field is null until the consolidation is complete.
  """
  coeditCompatibilityVersion: Int
  """Color space"""
  colorspace: String
  """Component count for each component type"""
  componentCount: ComponentCount!
  """All component groups structured as a JSON blob"""
  componentGroups(
    """Filter components by type"""
    type: ComponentFilterType! = SYMBOL
  ): ComponentGroupData!
  """List of components that belong to this document"""
  components(
    after: String
    before: String
    limit: Int = 20
    """Filter components by path"""
    path: String
    """Search components by name"""
    search: String
    """Filter components by type"""
    type: ComponentFilterType! = SYMBOL
  ): Components!
  """Created at"""
  createdAt: DateTime
  """
  This version number tracks breaking changes to the Sketch document model.
  
  This field is null until the consolidation is complete.
  """
  documentVersion: Int
  """Download available"""
  downloadAvailable: Boolean!
  """Download unavailable error"""
  downloadUnavailableError: DocumentDownloadUnavailableError
  """
  A list of downloadable assets for this document. These assets may
    be individual files or a zip file of all files in this document.
  """
  downloadableAssets: [DownloadableAsset!]!
  """Frame"""
  frame(
    """Frame identifier"""
    uuid: String
  ): FrameGroup!
  """Frame count"""
  frameCount: Int!
  """List of frames"""
  frames(
    after: String
    before: String
    """Filter, default is all"""
    filter: FrameFilterType = ALL
    limit: Int = 20
    """Search"""
    search: String
  ): Frames!
  """Document was rendered with fonts missing"""
  hasMissingFonts: Boolean
  """Identifier"""
  id: String! @deprecated(reason: "Use identifier instead.")
  """Identifier"""
  identifier: UUID!
  """Is present"""
  isPresent: Boolean
  """Is processing"""
  isProcessing: Boolean
  """Meta image URL"""
  metaImageUrl: String @deprecated(reason: "Use preview files instead")
  """Name"""
  name: String!
  """Page"""
  page(
    """Unique identifier for the Page that is consistent across saves"""
    uuid: String
  ): Page
  """Page count"""
  pageCount: Int!
  """List of pages"""
  pages(after: String, before: String, limit: Int = 20): Pages
  """Path"""
  path: String
  """Thumbnail of the document"""
  previewFile: File
  """Render status"""
  renderStatus: RenderStatusType
  """Size"""
  size: Int
  """Sketch variant"""
  sketchVariant: String
  """Sketch version"""
  sketchVersion: String
  """Slug"""
  slug: String
  """Generate a design token export of components in this document"""
  tokenExport(
    """
    Color format to use. Only applicable to CSS and Amazon
            export formats
    """
    colorFormat: TokenColorFormat
    """Design Token format to use"""
    format: TokenExportFormat! = AMAZON
    """
    The types of Components to include in the export.
    
    Clients can control which Component types are exported using this
    argument.
    
    Defaults to [ColorVariable] which will export only color variables.
    """
    tokenTypes: [ExportableComponentType]! = [COLOR_VARIABLE]
  ): TokenExport!
  """Updated at"""
  updatedAt: DateTime
  """URL"""
  url: String
  """Can the user open the document in the Mac app?"""
  userCanOpenInApp: Boolean!
  """UUID"""
  uuid: UUID
  """Will upload document"""
  willUploadDocument: Boolean
}

"""upload canceled payload"""
type DocumentUploadCancelPayload {
  """message"""
  message: String
  """if the upload is succesful"""
  successful: Boolean!
}

"""A notification that is created when document upload is complete."""
type DocumentUploadCompleteNotification implements UserNotification {
  """Created at date"""
  createdAt: DateTime!
  """Date"""
  date: DateTime @deprecated(reason: "Use `createdAt` instead.")
  """Identifier"""
  id: UUID! @deprecated(reason: "Use identifier instead.")
  """Identifier"""
  identifier: UUID!
  """Is organization notification"""
  isOrganizationNotification: Boolean @deprecated(reason: "All notifications originate from a workspace")
  """Is read"""
  isRead: Boolean @deprecated(reason: "Use `state` instead.")
  """Organization"""
  organization: PublicOrganization @deprecated(reason: "Use `workspace` instead")
  """Path"""
  path: String
  """Share"""
  share: Share
  """The read/unread state of the notification"""
  state: NotificationState
  """Subtitle"""
  subtitle: String
  """Title"""
  title: String
  """Token"""
  token: String
  """URL"""
  url: String
  """User"""
  user: PublicUser
  """Workspace"""
  workspace: PublicWorkspace
}

"""upload complete payload"""
type DocumentUploadCompletePayload {
  """message"""
  message: String
  """if upload is successful"""
  successful: Boolean!
  """version"""
  version: Version!
}

"""A notification that is created when document upload is processed."""
type DocumentUploadProcessedNotification implements UserNotification {
  """Created at date"""
  createdAt: DateTime!
  """Date"""
  date: DateTime @deprecated(reason: "Use `createdAt` instead.")
  """Identifier"""
  id: UUID! @deprecated(reason: "Use identifier instead.")
  """Identifier"""
  identifier: UUID!
  """Is organization notification"""
  isOrganizationNotification: Boolean @deprecated(reason: "All notifications originate from a workspace")
  """Is read"""
  isRead: Boolean @deprecated(reason: "Use `state` instead.")
  """Organization"""
  organization: PublicOrganization @deprecated(reason: "Use `workspace` instead")
  """Path"""
  path: String
  """Share"""
  share: Share
  """The read/unread state of the notification"""
  state: NotificationState
  """Subtitle"""
  subtitle: String
  """Title"""
  title: String
  """Token"""
  token: String
  """URL"""
  url: String
  """User"""
  user: PublicUser
  """Workspace"""
  workspace: PublicWorkspace
}

"""
Information about downloadable assets for a document or layer.

These could be either individual files that can be downloaded or a zip file
that includes all assets for a given document or layer.
"""
type DownloadableAsset {
  """Name of the downloadable asset"""
  fileName: String
  """File size in bytes"""
  fileSizeInBytes: Int
  """
  A list of layer image formats exported.
  
  If the list is empty then the downloadable asset either contains all of the assets
  for the document or all of the exportable formats for the layer.
  """
  formats: [String!]!
  """UUID identifier"""
  identifier: UUID!
  """
  A list of layer UUIDs.
  
  If the list is empty then the downloadable asset contains all of the assets for
  the document.
  
  If there are entries in the list and the format and scale values are null then
  the downloadable asset contains all of the assets for the layers.
  
  If there are entries in the list and the format and scale values are not null
  then the downloadable asset is specific to the layers and the formats and scales.
  """
  layerUuids: [String!]!
  """URL where the asset can be downloaded. Probably an AWS signed URL."""
  path: String
  """
  A list of layer image scales exported.
  
  If the list is empty then the downloadable asset either contains all of the assets
  for the document or all of the exportable formats for the layer.
  """
  scales: [Float!]!
  """Asset status"""
  status: DownloadableAssetStatus!
}

"""User-facing notification for downloadable assets"""
type DownloadableAssetRenderedNotification implements UserNotification {
  """Created at date"""
  createdAt: DateTime!
  """Date"""
  date: DateTime @deprecated(reason: "Use `createdAt` instead.")
  """Identifier"""
  id: UUID! @deprecated(reason: "Use identifier instead.")
  """Identifier"""
  identifier: UUID!
  """Is organization notification"""
  isOrganizationNotification: Boolean @deprecated(reason: "All notifications originate from a workspace")
  """Is read"""
  isRead: Boolean @deprecated(reason: "Use `state` instead.")
  """Document version to which the notification is relevant"""
  notifiedVersion: Version
  """Organization"""
  organization: PublicOrganization @deprecated(reason: "Use `workspace` instead")
  """Path"""
  path: String
  """Share to which the notification is relevant"""
  share: Share
  """The read/unread state of the notification"""
  state: NotificationState
  """Subtitle"""
  subtitle: String
  """Title"""
  title: String
  """Token"""
  token: String
  """URL"""
  url: String
  """User"""
  user: PublicUser
  """Workspace"""
  workspace: PublicWorkspace
}

"""API response for duplicateShareToDraftsParams"""
type DuplicateShareToDraftsResponse {
  """The duplicated share"""
  share: Share!
}

"""API response for duplicateShareTo"""
type DuplicateShareToResponse {
  """The duplicated share"""
  share: Share!
}

"""API response for editCollectionDescription"""
type EditCollectionDescriptionResponse {
  """The edited collection"""
  collection: Collection!
}

"""API response for editCollection"""
type EditCollectionResponse {
  """The edited collection"""
  collection: Collection!
}

"""API response for editComment"""
type EditCommentResponse {
  """The updated comment"""
  comment: Comment!
}

"""A education application"""
type EducationApplication {
  """Comments that may be relevant to the application"""
  comments: String
  """Contact details of applicant"""
  contactDetails: EducationApplicationContactDetails
  """Courses at the institution for which the application is being made"""
  courses: String
  """Time the application was made"""
  createdAt: DateTime!
  """Files uploaded by the applicant"""
  files: EducationApplicationFiles!
  """Education application identifier"""
  identifier: UUID!
  """Name of the institution of applicant"""
  institutionName: String!
  """URL of the institution"""
  institutionUrl: String!
  """Whether the education application has been made on behalf of an institution"""
  isInstitutional: Boolean! @deprecated(reason: "Use type field instead.")
  """Number of seats requested for this education application"""
  requestedNumberOfSeats: Int!
  """State of the education application"""
  state: EducationApplicationState!
  """The type of the education application request"""
  type: EducationApplicationType!
  """Time the application was last updated"""
  updatedAt: DateTime!
  """User who created the application"""
  user: User!
  """Workspace for which the application is made"""
  workspace: Workspace!
}

"""Contact details of an applicant for an education subscription"""
type EducationApplicationContactDetails {
  """Address city"""
  city: String
  """Contact telephone or email"""
  contactInfo: String
  """Country of the applicant"""
  country: String
  """Address line"""
  line: String
  """Address post code"""
  postCode: String
  """Address state"""
  state: String
}

"""Files uploaded as part of the education application by the applicant"""
type EducationApplicationFiles {
  """Course-related files documentation for institution applications"""
  courseDocumentation: [String!]
  """Files supporting education application"""
  proof: [String!]!
}

type EmailResendChangeConfirmationPayload {
  """A list of errors, raised when executing this migrations."""
  errors: [UserError]!
  """Indicates whether the mutation completed successfully or not."""
  successful: Boolean!
}

type EmailUpdatePayload {
  """A list of errors, raised when executing this migrations."""
  errors: [UserError]!
  """Indicates whether the mutation completed successfully or not."""
  successful: Boolean!
  user: User
}

type EmailVerifyPayload {
  email: String
  """A list of errors, raised when executing this migrations."""
  errors: [UserError]!
  """Indicates whether the mutation completed successfully or not."""
  successful: Boolean!
}

"""Event that fires when workspace trash is emptied"""
type EmptiedWorkspaceTrashEvent {
  """Workspace identifier"""
  workspaceIdentifier: UUID!
}

"""API response for emptyWorkspaceTrash"""
type EmptyWorkspaceTrashResponse {
  """The workspace for which the trash was emptied"""
  workspace: Workspace!
}

"""Response for setting SCIM enabled for a Workspace"""
type EnableScimResponse {
  """The token for SCIM authentication"""
  scimToken: String!
  """Modified workspace"""
  workspace: Workspace!
}

"""Response for enabling Support Access in a Workspace"""
type EnableSupportAccessResponse {
  """Modified workspace"""
  workspace: Workspace!
}

"""Context information for the error"""
type ErrorContext {
  """Error key"""
  key: String
  """Error value"""
  value: String
}

"""File"""
type File {
  """Hash for the file content"""
  hash: String
  """Height of the file"""
  height: Int
  """UUID for the file"""
  id: String @deprecated(reason: "Use identifier instead.")
  """UUID for the file"""
  identifier: UUID!
  """Whether the file already exists or not"""
  isPresent: Boolean
  """Path for the file"""
  path: String
  """Scale of the file"""
  scale: Int!
  """Size of the file"""
  size: Int
  """Readable slug for the file"""
  slug: String
  """Thumbnails for the file"""
  thumbnails: [Thumbnail]
  """File type"""
  type: FileType!
  """URL for the file"""
  url: String
  """Width of the file"""
  width: Int
}

"""Frame"""
type Frame implements FrameGroup {
  """Annotation count"""
  annotationCount: Int!
  """
  Associated component. Only symbol frames are associated with components.
  For other frames the value is always null.
  """
  component: Component
  """Document order number"""
  documentOrder: Int!
  """Version short identifier"""
  documentVersionShortId: ShortId!
  """List of files"""
  files(
    """File type"""
    type: FileType
  ): [File!]!
  """Whether the document was rendered with fonts missing"""
  hasMissingFonts: Boolean
  """Height"""
  height: Float!
  """identifier"""
  identifier: UUID!
  """Flow home?"""
  isFlowHome: Boolean!
  """Name"""
  name: String!
  """Next frame"""
  next: Frame
  """Order"""
  order: Int!
  """Page"""
  page: Page!
  """Previous frame"""
  previous: Frame
  """Revisions"""
  revisions(after: String, before: String, limit: Int = 20): FrameRevisions!
  """The subscription status for the current user for this frame."""
  subscriptionStatus: NotificationSubscriptionStatus!
  """Unread count of comments"""
  unreadCount: Int!
  """Unique identifier"""
  uuid: UUID!
  """Width"""
  width: Float!
}

"""List of frame revisions with pagination info"""
type FrameRevisions {
  """List of revisions"""
  entries: [FrameRevisionItem!]!
  """Pagination metadata"""
  meta: PaginationMeta!
}

"""List of frames with pagination info"""
type Frames {
  """List of frames"""
  entries: [FrameGroup!]!
  """Info for pagination"""
  meta: PaginationMeta!
}

"""
A newly generated SCIM personal access token.

This type is distinct from ScimPersonalAccessToken as it contains the
`secret` part of the token, which is only available in the response to
`scimPersonalAccessTokenCreate`. This should be noted and stored securely
as it will not available again.
"""
type GeneratedScimPersonalAccessToken {
  """The newly generated SCIM personal access token."""
  personalAccessToken: ScimPersonalAccessToken!
  """
  The secret portion of the personal token, equivalent to a password.
  
  This value can be used with the token's identifier to authenticate
  requests to the SCIM API using HTTP Basic Auth:
  
  ```
  Authorization: Basic {base64Encode(identifier + ":" + secret)}
  ```
  """
  secret: String!
}

"""Workspace Customer's SSO identity provider configuration"""
type IdentityProviderConfig {
  """Binding type"""
  binding: SsoBindingType!
  """Identity provider's X.509 certificate"""
  certificate: String!
  """SSO Entity ID"""
  entityId: String!
  """Identity provider's sign-in URL"""
  ssoUrl: String!
}

"""The data used by the inspector."""
type InspectorData {
  """The JSON data describing the inspected element."""
  data: String
  """The status of the data."""
  status: InspectorStatus
}

type InspectorDataPayload {
  """A list of errors, raised when executing this migrations."""
  errors: [UserError]!
  inspector: InspectorData
  """Indicates whether the mutation completed successfully or not."""
  successful: Boolean!
}

"""API response for inviteWorkspaceMembers"""
type InviteWorkspaceMembersResponse {
  """List of members that had been already invited to the workspace"""
  alreadyInvited: [String!]
  """List of members invited to the workspace"""
  newlyInvited: [String!]
  """SCA token to authorize the payment for extra seats"""
  pendingScaToken: String
  """The workspace to which members were invited"""
  workspace: Workspace!
}

"""[WILL BE REMOVED] Invoice"""
type Invoice {
  """Credit"""
  credit: Credit
  """Currency"""
  currency: String!
  """Date"""
  date: DateTime!
  """Invoice PDF"""
  invoicePdf: String
  """Number"""
  number: String!
  """Paid"""
  paid: Boolean!
  """Total"""
  total: Int!
}

"""[WILL BE REMOVED] List of invoices with pagination info"""
type Invoices {
  """Entries"""
  entries: [Invoice!]!
  """Meta"""
  meta: PaginationMeta!
}

"""
Metadata about the latest Version of the Share in which a given Annotation
is visible.
"""
type LatestVisibleVersion {
  """The identifier of the latest Version in which the Annotation is visible."""
  identifier: UUID!
  """
  Indicates whether the Version is the latest Version of the Share.
  
  If there are newer Versions, then this will be false. This is useful for
  the front-end to decide which route to use to access the subject of the
  Annotation.
  
  If the Annotation is visible in the latest Version of the Share, then it
  can use the routes with no Version information as these load the latest
  Version. Otherwise, a versioned route must be used.
  """
  isLatest: Boolean!
  """The ShortID of the latest Version in which the Annotation is visible."""
  shortId: ShortId!
}

"""Layer style component"""
type LayerStyle implements Component {
  """Layer style depth"""
  depth: Int!
  """Layer style description"""
  description: String
  """List of preview files"""
  files: [File]!
  """Layer style identifier"""
  identifier: UUID!
  """Layer style name"""
  name: String!
  """Does the preview need a dark background?"""
  needsContrastingBackground: Boolean!
  """Layer style path"""
  path: String!
  """Layer style path groups"""
  pathGroups: [String!]!
  """Structured path representation"""
  pathInfo: [PathComponentInfo!]!
  """Layer style identifier from the sketch document"""
  uuid: UUID!
}

"""Response from leaveProject mutation"""
type LeaveProjectResponse {
  """The project from which the user was removed"""
  project: Project!
}

"""A Sketch teams license"""
type License {
  """[WILL BE REMOVED] Number of seats assigned for the license"""
  assignedSeatsCount: Int!
  """[WILL BE REMOVED] Billing history for the license"""
  billingHistory(after: String, before: String, limit: Int = 20): BillingHistoryItems
  """[WILL BE REMOVED] Tax ID for the customer that owns the license"""
  businessVatId: String @deprecated(reason: "Use tax_id instead.")
  """[WILL BE REMOVED] Cost for a adding a contributor to the license"""
  contributorCost: ContributorCost!
  """[WILL BE REMOVED] Credit balance for the license"""
  credit: Float
  """[WILL BE REMOVED] Credits available for the license"""
  credits(after: String, before: String, limit: Int = 20): Credits
  """[WILL BE REMOVED] Default payment method for the license"""
  defaultSource: Source
  """[WILL BE REMOVED] Email of the customer that owns the license"""
  email: String
  """Unique identifier for a license"""
  id: ID @deprecated(reason: "Use identifier instead.")
  """Unique identifier for a license"""
  identifier: UUID!
  """[WILL BE REMOVED] City of the customer that owns the license"""
  invoiceAddressCity: String
  """[WILL BE REMOVED] Country of the customer that owns the license"""
  invoiceAddressCountry: String
  """[WILL BE REMOVED] First line of the address of the customer that owns the license"""
  invoiceAddressLine1: String
  """[WILL BE REMOVED] Second line of the address of the customer that owns the license"""
  invoiceAddressLine2: String
  """[WILL BE REMOVED] Postal code of the customer that owns the license"""
  invoiceAddressPostalCode: String
  """[WILL BE REMOVED] State of the customer that owns the license"""
  invoiceAddressState: String
  """[WILL BE REMOVED] Name of the customer that owns the license"""
  invoiceName: String
  """[WILL BE REMOVED] Invoices sent to the customer related to the license"""
  invoices(after: String, before: String, limit: Int = 20): Invoices
  """[WILL BE REMOVED] Organization that owns the license"""
  organization: Organization
  """[WILL BE REMOVED] Stripe subscription related to the license"""
  subscription: SketchSubscription
  """[WILL BE REMOVED] Tax ID for the customer that owns the license"""
  taxId: TaxId
  """[WILL BE REMOVED] List of Tax IDs for the customer that owns the license"""
  taxIds: [TaxId!]!
  """[WILL BE REMOVED] The number of trial days the license has left"""
  trialDuration: Int
  """[WILL BE REMOVED] Users of a license"""
  users: [PublicUser]
}

"""API response for linkRegularAccount mutation"""
type LinkRegularAccountResponse {
  """The linked user account"""
  user: User!
}

"""API response for markCommentsAsRead"""
type MarkCommentsAsReadResponse {
  """Identifiers of comments successfully marked as read"""
  commentIdentifiers: [UUID!]! @deprecated(reason: "Use comments instead")
  """Comments successfully marked as read"""
  comments: [Comment!]!
}

"""Member count for project memberships"""
type MembershipCount {
  """Admin count"""
  admin: Int!
  """Group count"""
  group: Int!
  """Guest count"""
  guest: Int!
  """Member count"""
  member: Int!
}

"""A notification that is created when a user is mentioned in a comment."""
type MentionNotification implements UserNotification {
  """Artboard"""
  artboard: Artboard
  """Comment"""
  comment: Comment
  """Created at date"""
  createdAt: DateTime!
  """Date"""
  date: DateTime @deprecated(reason: "Use `createdAt` instead.")
  """Identifier"""
  id: UUID! @deprecated(reason: "Use identifier instead.")
  """Identifier"""
  identifier: UUID!
  """Is organization notification"""
  isOrganizationNotification: Boolean @deprecated(reason: "All notifications originate from a workspace")
  """Is read"""
  isRead: Boolean @deprecated(reason: "Use `state` instead.")
  """Organization"""
  organization: PublicOrganization @deprecated(reason: "Use `workspace` instead")
  """Path"""
  path: String
  """Share"""
  share: Share
  """The read/unread state of the notification"""
  state: NotificationState
  """Subtitle"""
  subtitle: String
  """Title"""
  title: String
  """Token"""
  token: String
  """URL"""
  url: String
  """User"""
  user: PublicUser
  """Workspace"""
  workspace: PublicWorkspace
}

"""A user that is mentionable."""
type MentionableUser {
  """User avatar"""
  avatar: Avatar
  """Deprecated email field"""
  email: String @deprecated(reason: "Do not use")
  """Deprecated name for the identifier"""
  id: String @deprecated(reason: "Use identifier instead.")
  """User identifier"""
  identifier: UUID!
  """User name"""
  name: String
}

"""Result of confirming MFA Setup"""
type MfaConfig {
  """Recovery codes"""
  recoveryCodes: RecoveryCodes!
}

"""API response for moveAllCollectionShares"""
type MoveAllCollectionSharesResponse {
  """Identifier of the project where the collection belongs"""
  projectIdentifier: UUID!
  """
  The collection where all of the shares were moved, or null if the shares
  were moved back to the project root.
  """
  targetCollection: Collection
  """
  Identifier of the collection where all shares were moved to, or null if shares were moved
  out of a collection and back to the project root.
  """
  targetIdentifier: UUID
}

"""API response for moveAnnotation"""
type MoveAnnotationResponse {
  """The moved annotation"""
  annotation: Annotation!
}

"""API response for moveAnnotations"""
type MoveAnnotationsResponse {
  """The moved annotations"""
  annotations: [Annotation!]!
}

"""multipart part"""
type MultipartPart {
  """expiration date"""
  expiresAt: DateTime
  """part number"""
  partNumber: Int
  """url"""
  url: String
}

"""multipart upload"""
type MultipartUpload {
  """multipart session ticket"""
  multipartSessionTicket: String
  """size of the part"""
  partSize: Int
  """list of parts"""
  parts: [MultipartPart]
  """total number of parts"""
  totalParts: Int
}

"""Configuration for user name attributes"""
type NameMapping {
  """First name attribute"""
  firstName: String
  """Surname attribute"""
  surname: String
  """Update value on each login"""
  updateOnLogin: Boolean!
}

type NotificationMarkAllAsReadPayload {
  """A list of errors, raised when executing this migrations."""
  errors: [UserError]!
  """Indicates whether the mutation completed successfully or not."""
  successful: Boolean!
}

type NotificationMarkAllAsSeenPayload {
  """A list of errors, raised when executing this migrations."""
  errors: [UserError]!
  """Indicates whether the mutation completed successfully or not."""
  successful: Boolean!
}

type NotificationMarkAsReadPayload {
  """A list of errors, raised when executing this migrations."""
  errors: [UserError]!
  notification: UserNotification
  """Indicates whether the mutation completed successfully or not."""
  successful: Boolean!
}

type NotificationMarkEveryReadAsDonePayload {
  """A list of errors, raised when executing this migrations."""
  errors: [UserError]!
  """Indicates whether the mutation completed successfully or not."""
  successful: Boolean!
}

type NotificationSubscriptionUpdatedPayload {
  artboard: Artboard
  discussion: Comment
  """A list of errors, raised when executing this migrations."""
  errors: [UserError]!
  share: Share
  """Indicates whether the mutation completed successfully or not."""
  successful: Boolean!
}

type NotificationUpdatedPayload {
  """A list of errors, raised when executing this migrations."""
  errors: [UserError]!
  notification: UserNotification
  """Indicates whether the mutation completed successfully or not."""
  successful: Boolean!
}

"""List of notifications"""
type Notifications {
  """Paginated notifications"""
  entries: [UserNotification!]!
  """Pagination information"""
  meta: PaginationMeta!
}

type NotificationsUpdatedPayload {
  """A list of errors, raised when executing this migrations."""
  errors: [UserError]!
  """Indicates whether the mutation completed successfully or not."""
  successful: Boolean!
}

"""Credentials for OAuth"""
type OAuthCredentials {
  """Auth token"""
  authToken: String!
  """The time at which the credentials expire"""
  expirationDateTime: DateTime!
  """Refresh token"""
  refreshToken: String!
}

"""Organization"""
type Organization {
  """Avatar"""
  avatar: Avatar
  """Billing related information from payments"""
  billing: Billing
  """Can this organization use Restricted Uploads?"""
  canUseRestrictedUploads: Boolean!
  """Can this organization use SSO?"""
  canUseSso: Boolean! @deprecated(reason: "Use workspaces.features.sso instead.")
  """Payments customer ID"""
  customerId: UUID
  """List of feature flags"""
  featureFlags: [String]
  """Identifier"""
  id: String! @deprecated(reason: "Use identifier instead.")
  """Identifier"""
  identifier: UUID!
  """[WILL BE REMOVED] Associated license -not available for teams using payments v2"""
  license: License
  """Memberships"""
  memberships(
    after: String
    before: String
    limit: Int = 20
    """Order type"""
    order: OrganizationMembershipOrderType
    """Order sorting direction (asc, desc)"""
    orderDirection: OrderDirection = ASC
    """Filters results with emails and usernames that match the given search string"""
    search: String
  ): OrganizationMemberships! @deprecated(reason: "Use memberships on the Workspace type instead.")
  """Name"""
  name: String!
  """Organization membership"""
  organizationMembership(
    """Identifier"""
    identifier: UUID
  ): OrganizationMembership @deprecated(reason: "For checking if the viewer is the owner, use viewerIsOwner")
  """List of projects"""
  projects(
    after: String
    before: String
    limit: Int = 20
    """Project type to filter by. Defaults to all types."""
    type: ProjectType
  ): Projects!
  """List of shares"""
  shares(
    after: String
    before: String
    limit: Int = 20
    """Organization shares search params"""
    search: OrganizationSharesSearchInput
  ): Shares!
  """Short_id"""
  shortId: ShortId!
  """Fetch SSO config for a team"""
  ssoConfig: OrganizationSsoConfig
  """Is SSO enabled for this organization?"""
  ssoEnabled: Boolean!
  """Team short name for SSO, if enabled"""
  ssoShortName: String
  """SSO login URL for this team"""
  ssoStartUrl: String
  """ToS accepted"""
  tosAccepted: Boolean
  """ToS accepted at"""
  tosAcceptedAt: DateTime
  """Can the currently authenticated user administer this organization?"""
  userCanAdminister: Boolean!
  """Is the currently authenticated user able to contribute to this Organization?"""
  userCanContribute: Boolean!
  """
  Is the currently authenticated user a member of this Organization?
  
  NOTE: This field resolves to false for `guest` members of the workspace.
  As Organization is a legacy object which is going to eventually
  phased out in favor of Workspace entities, this behavior helps with
  smooth transition when guests are not fully rolled out yet.
  """
  userIsMember: Boolean!
  """Is the currently authenticated user the team owner?"""
  userIsOwner: Boolean!
  """The currently authenticated user's role within this organization"""
  userRole: OrganizationMembershipRole!
  """Viewer can administer"""
  viewerCanAdminister: Boolean! @deprecated(reason: "Please use `userCanAdminister`")
  """Viewer can contribute"""
  viewerCanContribute: Boolean! @deprecated(reason: "Please use `userCanContribute`")
  """
  Is viewer a member?
  
  NOTE: This field resolves to false for `guest` members of the workspace.
  As Organization is a legacy object which is going to eventually
  phased out in favor of Workspace entities, this behavior helps with
  smooth transition when guests are not fully rolled out yet.
  """
  viewerIsMember: Boolean! @deprecated(reason: "Please use `userIsMember`")
  """Is viewer the team owner?"""
  viewerIsOwner: Boolean! @deprecated(reason: "Please use `userIsOwner`")
  """Role of the viewer"""
  viewerRole: OrganizationMembershipRole! @deprecated(reason: "Please use `userRole`")
}

type OrganizationAcceptInvitePayload {
  """A list of errors, raised when executing this migrations."""
  errors: [UserError]!
  membership: OrganizationMembership
  """Indicates whether the mutation completed successfully or not."""
  successful: Boolean!
}

type OrganizationAcceptTosPayload {
  """A list of errors, raised when executing this migrations."""
  errors: [UserError]!
  organization: Organization
  """Indicates whether the mutation completed successfully or not."""
  successful: Boolean!
}

"""Organization Invite"""
type OrganizationInvite {
  """Email"""
  email: String
  """Identifier"""
  id: String @deprecated(reason: "Use identifier instead.")
  """Unique identifier"""
  identifier: UUID!
}

"""Organization membership"""
type OrganizationMembership {
  """Accepted at"""
  acceptedAt: NaiveDateTime
  """The associated organisation"""
  hasLicense: Boolean! @deprecated(reason: "Please use `isContributor`")
  """Identifier"""
  id: String @deprecated(reason: "Use identifier instead.")
  """Identifier"""
  identifier: UUID!
  """Who sent the invitation"""
  inviter: OrganizationUser
  """Indicates whether or not the member is a contributor or not"""
  isContributor: Boolean!
  """Is primary, the owner"""
  isPrimary: Boolean!
  """The associated organisation"""
  organization: Organization
  """
  The associated organization invite.
          This field is null if the user exists, but the `user` field isn't.
  """
  organizationInvite: OrganizationInvite
  """The associated role"""
  role: OrganizationMembershipRole
  """
  The associated user. This field is null if the user doesn't exist,
          but the `organization_invite` field isn't.
  """
  user: OrganizationUser
}

"""Organization memberships"""
type OrganizationMemberships {
  """Paginated organization memberships"""
  entries: [OrganizationMembership!]!
  """Pagination information"""
  meta: PaginationMeta!
}

type OrganizationResendInvitePayload {
  """A list of errors, raised when executing this migrations."""
  errors: [UserError]!
  membership: OrganizationMembership
  """Indicates whether the mutation completed successfully or not."""
  successful: Boolean!
}

"""Result object for SSO config lookup"""
type OrganizationSsoConfig {
  """Organization’s attribute mapping configuration"""
  attributeMapping: AttributeMappingEntry
  """Organization's SSO configuration"""
  config: IdentityProviderConfig
}

type OrganizationUpdateAttributeMappingPayload {
  """A list of errors, raised when executing this migrations."""
  errors: [UserError]!
  organization: Organization
  """Indicates whether the mutation completed successfully or not."""
  successful: Boolean!
}

type OrganizationUpdateIdentityProviderConfigPayload {
  """A list of errors, raised when executing this migrations."""
  errors: [UserError]!
  organization: Organization
  """Indicates whether the mutation completed successfully or not."""
  successful: Boolean!
}

type OrganizationUpdatePayload {
  """A list of errors, raised when executing this migrations."""
  errors: [UserError]!
  organization: Organization
  """Indicates whether the mutation completed successfully or not."""
  successful: Boolean!
}

"""A user that is part of an organization. Allowed to expose a little more than PublicUser."""
type OrganizationUser {
  """User avatar"""
  avatar: Avatar
  """User email"""
  email: String
  """Deprecated name for the identifier"""
  id: String @deprecated(reason: "Use identifier instead.")
  """User identifier"""
  identifier: UUID!
  """User name"""
  name: String
}

"""Page"""
type Page {
  """Annotation count"""
  annotationCount: Int!
  """Artboard"""
  artboard(
    """Slug"""
    slug: String
  ): Artboard @deprecated(reason: "Use frame instead")
  """Artboard count"""
  artboardCount: Int! @deprecated(reason: "Use frame_count instead")
  """Artboards"""
  artboards(
    after: String
    before: String
    """Filter"""
    filter: ArtboardFilterType = ALL
    limit: Int = 20
    """Search term"""
    search: String
  ): Artboards @deprecated(reason: "Use frames instead")
  """Frame"""
  frame(
    """Frame identifier"""
    uuid: UUID
  ): FrameGroup
  """Artboard count"""
  frameCount: Int! @deprecated(reason: "Use frame_count instead")
  """List of frames"""
  frames(
    after: String
    before: String
    """Filter, default is all"""
    filter: FrameFilterType = ALL
    limit: Int = 20
    """Search"""
    search: String
  ): Frames!
  """True if there is at least one unread comment"""
  hasUnreadComments: Boolean!
  """Identifier"""
  id: String @deprecated(reason: "Use identifier instead.")
  """
  Unique Page identifier.  **NOTE** changes with each save
  
  Assigned by SketchQL when ingesting RenderFarm artifacts, and so changes
  with each save/render.
  
  If you are looking for an identifier that is consistent across saves, use
  `:uuid` instead
  """
  identifier: UUID!
  """Name"""
  name: String
  """Order number"""
  order: Int!
  """The presentation file for this page."""
  presentationFile: PresentationFile
  """Slug"""
  slug: String
  """
  Stable Page identifier.
  
  Assigned by Sketch when the page is created and remains consistent across saves.
  """
  uuid: UUID
}

"""List of pages with pagination info"""
type Pages {
  """List of Pages"""
  entries: [Page!]!
  """Pagination info"""
  meta: PaginationMeta!
}

type PaginationMeta {
  after: String
  before: String
  limit: Int!
  totalCount: Int!
}

"""(Deprecated) Parent comment object is deprecated. Please use Annotation."""
type ParentComment {
  """Identifier"""
  identifier: UUID!
  """The subscription status for the current user for this comment."""
  subscriptionStatus: NotificationSubscriptionStatus!
}

"""A Sketch Partner User"""
type Partner {
  """Partner User avatar"""
  avatar: Avatar
  """Partner User email"""
  email: String
  """Partner User identifier"""
  identifier: UUID!
  """Partner User name"""
  name: String
}

"""A component of the component's path"""
type PathComponentInfo {
  """Component identifier"""
  id: String!
  """Component name"""
  name: String!
}

"""PermissionGroup"""
type PermissionGroup {
  """Identifier"""
  identifier: UUID!
  """List of members in that permission group"""
  members(
    after: String
    before: String
    limit: Int = 20
    """Search by term"""
    search: String
  ): PermissionGroupMemberships!
  """Permission group name"""
  name: String!
  """List of projects with which the permission group is shared with"""
  projects(
    after: String
    before: String
    limit: Int = 20
    """Search by project name"""
    search: String
  ): PermissionGroupRelationProjects!
  """List of shares with which the permission group is shared with"""
  shares(
    after: String
    before: String
    limit: Int = 20
    """Search by share name"""
    search: String
  ): PermissionGroupRelationShares!
}

"""PermissionGroupMembership"""
type PermissionGroupMembership {
  """Identifier"""
  identifier: UUID!
  """Permission group"""
  permissionGroup: PermissionGroup!
  """The membership of the user with the workspace"""
  workspaceMember: WorkspaceMembership!
}

"""List of Permission group memberships"""
type PermissionGroupMemberships {
  """Paginated permission group memberships"""
  entries: [PermissionGroupMembership!]!
  """Pagination information"""
  meta: PaginationMeta!
}

"""A relation between a permission group and a project"""
type PermissionGroupRelationProject {
  """The access level of that group on the project. Deprecated."""
  accessLevel: PrivateAccessLevel!
  """When the relation was created"""
  createdAt: NaiveDateTime!
  """Identifier"""
  identifier: UUID!
  """Permission group"""
  permissionGroup: PermissionGroup!
  """The project"""
  project: Project!
}

"""List of Permission group relations for project"""
type PermissionGroupRelationProjects {
  """Paginated permission group relations for projects"""
  entries: [PermissionGroupRelationProject!]!
  """Pagination information"""
  meta: PaginationMeta!
}

"""A relation between a permission group and a share"""
type PermissionGroupRelationShare {
  """The access level of that group on the share"""
  accessLevel: PrivateAccessLevel!
  """When the relation was created"""
  createdAt: NaiveDateTime!
  """Identifier"""
  identifier: UUID!
  """Permission group"""
  permissionGroup: PermissionGroup!
  """The share"""
  share: Share!
}

"""List of Permission group relations for shares"""
type PermissionGroupRelationShares {
  """Paginated permission group relations for shares"""
  entries: [PermissionGroupRelationShare!]!
  """Pagination information"""
  meta: PaginationMeta!
}

"""List of Permission groups"""
type PermissionGroups {
  """Paginated permission groups"""
  entries: [PermissionGroup!]!
  """Pagination information"""
  meta: PaginationMeta!
}

"""Response from mutation pinProject"""
type PinProjectResponse {
  """The pinned project"""
  project: Project!
}

"""Response from mutation pinShare"""
type PinShareResponse {
  """The pinned share"""
  share: Share!
}

"""[WILL BE REMOVED] Plan"""
type Plan {
  """Plan amount"""
  amount: Int!
  """Plan interval"""
  interval: String!
  """Plan name"""
  name: String!
}

"""[WILL BE REMOVED] Plans"""
type Plans {
  """List of plans"""
  entries: [Plan!]!
}

"""
Presentation files are a new file format used by the web-renderer that is
in development.

As the feature is experimental this type may change frequently during
development.
"""
type PresentationFile {
  """A URL that can be used to download the presentation file."""
  downloadUrl: String
  """A signed token that can be used to fetch images associated with this presentation file."""
  imageToken: String!
  """A URL that can be used to download the presentation-manifest.json file."""
  manifestUrl: String
}

"""Preview of a document"""
type Preview {
  """Whether or not comments are enabled for this preview"""
  commentsEnabled: Boolean!
  """The preview's description"""
  description: String
  """The identifier of the Preview"""
  identifier: UUID!
  """Whether or not inspect is enabled for this preview"""
  inspectEnabled: Boolean!
  """The preview's name"""
  name: String!
  """List of pages in this preview"""
  pages(after: String, before: String, limit: Int = 20): Pages!
  """List of prototypes in this preview"""
  prototypes(after: String, before: String, limit: Int = 20): Frames!
}

"""Project"""
type Project implements StorageItem {
  """Date and time in which the project was archived"""
  archivedAt: DateTime
  """
  Look up a Collection within this Project by its identifier.
  
  Returns an error if the Collection does not exist.
  """
  collection(
    """The identifier of the Collection to look up."""
    identifier: UUID!
  ): Collection!
  """The paginated Collections within this Project."""
  collections(
    after: String
    before: String
    limit: Int = 20
    """
    Filter the returned collections based on the share search parameters.
    
    Only collections that contain at least one share that match the given
    parameters will be returned.
    """
    shareSearch: SharesSearchParams
  ): Collections!
  """Unpaginated list of Collections within this Project."""
  collectionsUnpaginated(after: String, before: String, limit: Int = 20): [UnpaginatedCollection!]!
  """The date and time in which the project was created"""
  createdAt: DateTime
  """Date and time in which the project was moved to trash"""
  deletedAt: DateTime
  """The description of this project."""
  description: String
  """Identifier"""
  id: String! @deprecated(reason: "Use identifier instead.")
  """Identifier"""
  identifier: UUID!
  """List of members of this project."""
  members(after: String, before: String, limit: Int = 20): ProjectMembershipPaginationItems!
  """Project member count by role"""
  membershipCount: MembershipCount!
  """Memberships"""
  memberships(after: String, before: String, limit: Int = 20): ProjectMemberships!
  """Project name"""
  name: String!
  """
  The number of first level nested projects in the Project.
  
  This field is optimised for bulk look up, so should be used when querying
  for multiple Projects.
  """
  nestedProjectsCount: Int!
  """Parent project"""
  parentProject: Project
  """Identifier of the parent project"""
  parentProjectIdentifier: UUID
  """Unpaginated list of all parent projects of this project."""
  parentProjects: [Project!]!
  """List permission group assigned to the project"""
  permissionGroupRelations(
    after: String
    before: String
    limit: Int = 20
    """Search term to filter permission group by name"""
    search: String
  ): PermissionGroupRelationProjects!
  """If current user pinned the project, this field will have the date when it was pinned"""
  pinnedByCurrentUserAt: DateTime
  """
  Returns a preview of the first 4 Shares in the Project.
  
  Each preview contains some basic information about the Share (e.g. its
  name and identifier) along with the Share's preview thumbnail File.
  
  This field provides an optimized way to lookup the preview files for the
  Shares in the Project in bulk.
  
  If the Project is not trashed and not archived, then only non-trashed and
  non-archived Shares are included in the list.
  
  If the Project is archived, then only non-trashed Shares are included
  in the list.
  
  If the Project is trashed, then all Shares are included. A trashed Project
  can contain only trashed Shares.
  """
  previews: [ProjectSharePreview!]!
  """(Deprecated) Please migrate to projectPrivacyIcon."""
  privacyIcon: ProjectPrivacyIcon! @deprecated(reason: "Use projectPrivacyIcon instead.")
  """The privacy icon to be displayed"""
  projectPrivacyIcon: ProjectPrivacyIcon!
  """The type of the project."""
  projectType: ProjectType!
  """List of first-level nested projects."""
  projects(after: String, before: String, limit: Int = 20): Projects!
  """Unpaginated list of first-level nested projects."""
  projectsUnpaginated(
    """Filter if a project has been archived or not. Defaults to unarchived projects."""
    archived: ProjectArchivedStatus = UNARCHIVED
  ): [UnpaginatedProject!]!
  """Shares"""
  shares(
    after: String
    before: String
    limit: Int = 20
    """
    Available params for searching shares of this project.
    
    **NOTE**: there was a bug in v96.x releases of Sketch which meant that
    `filter: NO_COLLECTION` was being passed regardless of whether the
    `collections` feature flag is enabled.
    
    Although this has been fixed in a minor release, we also have a
    work-around in SketchQL that will ignore `filter: NO_COLLECTION` if the
    request is coming from v96.x.
    """
    searchParams: SharesSearchParams
    """
    The order in which Shares should be sorted.
    
    See the ShareSortOrder enum for a list of supported values.
    
    Defaults to LAST_MODIFIED_DESC.
    """
    sortOrder: ShareSortOrder = LAST_MODIFIED_DESC
  ): Shares!
  """
  The number of shares in the project.
  
  This field is optimised for bulk look up, so should be used when querying
  for multiple Projects.
  """
  sharesCount: Int!
  """Project short_id"""
  shortId: ShortId!
  """Get the list of all storage items that are part of this project."""
  storageItems(
    after: String
    before: String
    """
    If true, storage items from all nested levels of the project will be included.
    Otherwise, only direct children will be included.
    """
    includeAllNestedLevels: Boolean! = false
    limit: Int = 20
    """Available params for searching storage items of this project."""
    search: StorageItemsSearchParams
    """
    The order in which Shares should be sorted.
    
    See the ShareSortOrder enum for a list of supported values.
    
    Defaults to LAST_MODIFIED_DESC.
    """
    sharesSortOrder: ShareSortOrder! = LAST_MODIFIED_DESC
  ): StorageItems!
  """Top level project from which the nested project inherits permissions"""
  topLevelProject: Project
  """(Deprecated) Please migrate to projectType."""
  type: ProjectType! @deprecated(reason: "Use projectType instead")
  """Date and time in which the project was last updated"""
  updatedAt: DateTime
  """
  Whether or not the current user can leave this `Project`.
  This property will be true for all workspace guests that can access the project,
  and viewers that can access the project if restricted. False otherwise.
  
  NOTE: Property will be false for editors in restricted projects even if they can leave.
  """
  userCanLeave: Boolean!
  """The project membership of the current user if the user belongs to the project"""
  userMembership: ProjectMembership
  """The public workspace which owns this project."""
  workspace: PublicWorkspace!
  """The workspace access level of the project"""
  workspaceAccessLevel: ProjectWorkspaceAccessLevel!
}

"""This event defines when access to a project is granted"""
type ProjectAccessGrantedEvent implements BaseProjectAccessChangedEvent {
  """The affected project"""
  project: Project!
  """Identifier of the workspace to which the project belongs"""
  workspaceIdentifier: UUID!
}

"""This event defines when access to a project is revoked"""
type ProjectAccessRevokedEvent implements BaseProjectAccessChangedEvent {
  """The affected project"""
  project: Project!
  """Identifier of the workspace to which the project belongs"""
  workspaceIdentifier: UUID!
}

"""This event defines when a project is archived"""
type ProjectArchivedEvent implements BaseProjectChangedEvent {
  """Identifier of the parent project of the project before archiving"""
  oldParentProjectIdentifier: UUID
  """The affected project"""
  project: Project!
  """Identifier of the affected project"""
  projectIdentifier: UUID! @deprecated(reason: "Use project instead")
  """Identifier of the workspace to which the project belongs"""
  workspaceIdentifier: UUID!
}

"""This event defines project changes, with the new project value"""
type ProjectChangedEvent implements BaseProjectChangedEvent {
  """Affected project"""
  project: Project!
  """Identifier of the affected project"""
  projectIdentifier: UUID! @deprecated(reason: "Use project instead")
  """Identifier of the workspace to which the project belongs"""
  workspaceIdentifier: UUID!
}

type ProjectCreatePayload {
  """A list of errors, raised when executing this migrations."""
  errors: [UserError]!
  project: Project
  """Indicates whether the mutation completed successfully or not."""
  successful: Boolean!
}

"""This event defines when a project is created"""
type ProjectCreatedEvent implements BaseProjectChangedEvent {
  """Newly created project"""
  project: Project!
  """Identifier of the affected project"""
  projectIdentifier: UUID! @deprecated(reason: "Use project instead")
  """Identifier of the workspace to which the project belongs"""
  workspaceIdentifier: UUID!
}

type ProjectDeletePayload {
  """A list of errors, raised when executing this migrations."""
  errors: [UserError]!
  project: Project
  """Indicates whether the mutation completed successfully or not."""
  successful: Boolean!
}

"""This event defines when a project is soft deleted"""
type ProjectDeletedEvent implements BaseProjectChangedEvent {
  """The affected project"""
  project: Project!
  """Identifier of the affected project"""
  projectIdentifier: UUID! @deprecated(reason: "Use project instead")
  """Identifier of the workspace to which the project belongs"""
  workspaceIdentifier: UUID!
}

"""This event defines when a user is invited to a project, or a user requested access"""
type ProjectMemberAddedEvent implements BaseProjectChangedEvent {
  """Created membership"""
  membership: ProjectMembership!
  """Affected project"""
  project: Project!
  """Identifier of the affected project"""
  projectIdentifier: UUID! @deprecated(reason: "Use project instead")
  """Identifier of the workspace to which the project belongs"""
  workspaceIdentifier: UUID!
}

"""This event defines when a project membership is changed, such as a request is accepted"""
type ProjectMemberChangedEvent implements BaseProjectChangedEvent {
  """Updated membership"""
  membership: ProjectMembership!
  """Affected project"""
  project: Project!
  """Identifier of the affected project"""
  projectIdentifier: UUID! @deprecated(reason: "Use project instead")
  """Identifier of the workspace to which the project belongs"""
  workspaceIdentifier: UUID!
}

"""This event defines when a project membership is removed"""
type ProjectMemberRemovedEvent implements BaseProjectChangedEvent {
  """The UUID of the removed project membership"""
  membershipIdentifier: UUID!
  """Affected project"""
  project: Project!
  """Identifier of the affected project"""
  projectIdentifier: UUID! @deprecated(reason: "Use project instead")
  """Identifier of the workspace to which the project belongs"""
  workspaceIdentifier: UUID!
}

"""ProjectMembership"""
type ProjectMembership {
  """The email of the user"""
  email: String!
  """If the user is a guest, whether or not they can comment"""
  guestCommentsEnabled: Boolean
  """If the user is a guest, whether or not they can inspect"""
  guestInspectEnabled: Boolean
  """Identifier"""
  identifier: UUID!
  """The status of the project membership"""
  inviteStatus: InviteStatus!
  """User who sent the invitation"""
  inviter: PublicUser
  """The access level of the user for this project"""
  privateAccessLevel: PrivateAccessLevel!
  """Project this membership belongs to"""
  project: Project!
  """The membership of the user with the workspace"""
  workspaceMembership: WorkspaceMembership!
}

"""Paginated list of member items"""
type ProjectMembershipPaginationItems {
  """List of membership pagination items"""
  entries: [ProjectMembershipPaginationItem!]!
  """Pagination information"""
  meta: PaginationMeta!
}

"""List of project memberships"""
type ProjectMemberships {
  """Paginated project memberships"""
  entries: [ProjectMembership!]!
  """Pagination information"""
  meta: PaginationMeta!
}

"""This event defines when a project is permanently deleted"""
type ProjectPermanentlyDeletedEvent implements BaseProjectChangedEvent {
  """Identifier of the affected project"""
  projectIdentifier: UUID!
  """Identifier of the workspace to which the project belongs"""
  workspaceIdentifier: UUID!
}

type ProjectRenamePayload {
  """A list of errors, raised when executing this migrations."""
  errors: [UserError]!
  project: Project
  """Indicates whether the mutation completed successfully or not."""
  successful: Boolean!
}

"""This event defines project changes, with the new project value"""
type ProjectRestoredEvent implements BaseProjectChangedEvent {
  """Affected project"""
  project: Project!
  """Identifier of the affected project"""
  projectIdentifier: UUID! @deprecated(reason: "Use project instead")
  """Identifier of the workspace to which the project belongs"""
  workspaceIdentifier: UUID!
}

"""
A preview of a Share within a Project.

This is a slimmed down version of the Share type to make querying
Projects in bulk more efficient.
"""
type ProjectSharePreview {
  """
  The preview thumbnail File for the Share.
  
  Note: this field is nullable as the Share might still be processing, in
  which case a thumbnail File is not ready yet. Clients should show a
  loading placeholder in such circumstances.
  """
  file: File
  """The name of the Share."""
  name: String!
  """The identifier of the Share."""
  shareIdentifier: UUID!
}

"""This event is dispatched when a project is transferred"""
type ProjectTransferredEvent implements BaseProjectChangedEvent {
  """The old parent project identifier."""
  oldParentProjectIdentifier: UUID
  """The old source of the project before the transfer."""
  oldSource: StorageItemSource!
  """Identifier of the workspace to which the project belonged before the transfer."""
  oldWorkspaceIdentifier: UUID!
  """The transferred project."""
  project: Project!
  """Identifier of the transferred project"""
  projectIdentifier: UUID! @deprecated(reason: "Use project instead")
  """Identifier of the workspace to which the project has been transferred."""
  workspaceIdentifier: UUID!
}

"""This event defines when a project is unarchived"""
type ProjectUnarchivedEvent implements BaseProjectChangedEvent {
  """The affected project"""
  project: Project!
  """Identifier of the affected project"""
  projectIdentifier: UUID! @deprecated(reason: "Use project instead")
  """Identifier of the workspace to which the project belongs"""
  workspaceIdentifier: UUID!
}

"""This event defines when a project's workspace access level is changed"""
type ProjectWorkspaceAccessLevelChangedEvent implements BaseProjectChangedEvent {
  """Affected project"""
  project: Project!
  """Identifier of the affected project"""
  projectIdentifier: UUID! @deprecated(reason: "Use project instead")
  """Identifier of the workspace to which the project belongs"""
  workspaceIdentifier: UUID!
}

"""List of projects"""
type Projects {
  """Paginated projects"""
  entries: [Project!]!
  """Pagination information"""
  meta: PaginationMeta!
}

"""Public organization"""
type PublicOrganization implements ShareOwner {
  """Avatar"""
  avatar: Avatar
  """Identifier"""
  id: String @deprecated(reason: "Use identifier instead.")
  """Identifier"""
  identifier: UUID!
  """Name"""
  name: String
  """Short_id"""
  shortId: ShortId!
  """SSO login URL for this team"""
  ssoStartUrl: String
  """
  Is the currently authenticated user a member?
  
  NOTE: This field resolves to false for `guest` members of the workspace.
  As Organization is a legacy object which is going to eventually
  phased out in favor of Workspace entities, this behavior helps with
  smooth transition when guests are not fully rolled out yet.
  """
  userIsMember: Boolean!
  """
  Is viewer a member?
  
  NOTE: This field resolves to false for `guest` members of the workspace.
  As Organization is a legacy object which is going to eventually
  phased out in favor of Workspace entities, this behavior helps with
  smooth transition when guests are not fully rolled out yet.
  """
  viewerIsMember: Boolean! @deprecated(reason: "Please use `userIsMember`")
}

"""Public Project"""
type PublicProject {
  """Identifier"""
  identifier: UUID!
  """Project name"""
  name: String!
  """The Workspace that the project membership"""
  workspace: PublicWorkspace!
  """The workspace access level of the project"""
  workspaceAccessLevel: ProjectWorkspaceAccessLevel!
}

"""Public ProjectMembership"""
type PublicProjectMembership {
  """The email of the user"""
  email: String!
  """If the user is a guest, whether or not they can comment"""
  guestCommentsEnabled: Boolean
  """If the user is a guest, whether or not they can inspect"""
  guestInspectEnabled: Boolean
  """Identifier"""
  identifier: UUID!
  """The status of the project membership"""
  inviteStatus: InviteStatus!
  """User who sent the invitation"""
  inviter: PublicUser
  """The access level of the user for this project"""
  privateAccessLevel: PrivateAccessLevel!
  """Project this membership belongs to"""
  project: PublicProject!
}

"""Public User"""
type PublicUser implements ShareOwner {
  """User avatar"""
  avatar: Avatar
  """Deprecated name for the identifier"""
  id: String @deprecated(reason: "Use identifier instead.")
  """User identifier"""
  identifier: UUID!
  """User name"""
  name: String
}

"""Public Workspace"""
type PublicWorkspace {
  """The avatar for the workspace"""
  avatar: Avatar
  """
  The Public WorkspaceCustomer associated with the workspace.
  This type contains a subset of the information available on a Workspace Customer
  """
  customer: PublicWorkspaceCustomer
  """
  Features enabled and configured for this workspace.
  
  NOTE: This is a subset of all existing features.
  """
  features: PublicWorkspaceFeatures
  """The public workspace's unique identifier"""
  identifier: UUID!
  """The name of the workspace"""
  name: String!
  """
  The community profile of the workspace.
  
  The profile is nullable as it will resolve to `null` in the following
  circumstances:
  
  - A super admin has disabled the profile for the workspace
  - The workspace does not have a profile
  - The profile is private and the user is not a workspace admin. Only
    workspace admins can view their workspace's profile if it is private.
  """
  profile: PublicWorkspaceProfile
  """The type of workspace. This can be either `standard` or `personal`"""
  type: WorkspaceType!
  """Is the currently authenticated user a member?"""
  userIsMember: Boolean!
  """Is the currently authenticated user the owner of the workspace?"""
  userIsOwner: Boolean!
  """The currently authenticated user's role within this Workspace"""
  userRole: WorkspaceMembershipRole
}

"""Data related to the paying Customer"""
type PublicWorkspaceCustomer {
  """Whether this Customer's Workspaces can use SSO"""
  canUseSso: Boolean! @deprecated(reason: "Use workspace.features.sso instead.")
  """Customer's unique identifier, corresponds to the id in paymentsql"""
  identifier: UUID!
  """Fetch SSO config for a Customer"""
  ssoConfig: WorkspaceSsoConfig
  """Whether SSO is enabled for this Customer's Workspaces"""
  ssoEnabled: Boolean!
  """Customer short name for SSO, if enabled"""
  ssoShortName: String
  """SSO login URL for this Customer"""
  ssoStartUrl: String
  """Workspaces that belong to this Customer"""
  workspaces(after: String, before: String, limit: Int = 20): PublicWorkspaces
}

"""A subset of all features available to a Workspace"""
type PublicWorkspaceFeatures {
  """Is the encryption feature enabled for this workspace?"""
  encryptionEnabled: Boolean!
}

"""Public info for the relation between a user and a workspace to which they belong"""
type PublicWorkspaceMembership {
  """Workspace membership identifier"""
  identifier: UUID!
  """
  The associated invite to the workspace.
    This field is null if the invited user already exists (`user` field is null until acceptance).
  """
  invite: WorkspaceInvite
  """User who sent the invitation"""
  inviter: WorkspaceUser
  """Indicates whether the membership has an editor seat or not"""
  isEditor: Boolean!
  """The role of the associated user in this membership"""
  role: WorkspaceMembershipRole!
  """
  The associated user.
    This field is null if the user doesn't exist yet but was invited (`invite` field isn't null).
  """
  user: WorkspaceUser
  """The public info for the associated workspace"""
  workspace: PublicWorkspace!
}

"""Community profile information for a Public Workspace"""
type PublicWorkspaceProfile {
  """Profile's description"""
  description: String
  """Donate URL"""
  donateUrl: String
  """Workspace profile's unique identifier"""
  identifier: UUID!
  """Is this profile available to the public?"""
  isPublic: Boolean!
  """Short URL Name"""
  shortUrlName: String!
  """Website URL"""
  websiteUrl: String
}

"""List of public workspaces"""
type PublicWorkspaces {
  """Paginated workspaces"""
  entries: [PublicWorkspace!]!
  """Pagination information"""
  meta: PaginationMeta!
}

"""Community publication information for a Share"""
type Publication {
  """Created at"""
  createdAt: DateTime!
  """Publication's unique identifier"""
  identifier: UUID!
  """Thumbnail of the publication"""
  previewFile: File
  """Published share information"""
  share: Share!
  """The count of heart reactions the publication has received."""
  totalHearts: Int!
  """Updated at"""
  updatedAt: DateTime!
  """The reaction of the current user on the publication."""
  userReaction: PublicationReactionType!
  """Workspace profile information (null when profile isn't public)"""
  workspaceProfile: WorkspaceProfile
}

"""An event that is broadcast whenever publication reactions are updated."""
type PublicationReactionsUpdatedEvent {
  """The updated Publication."""
  publication: Publication!
}

"""List of publications with pagination info"""
type Publications {
  """List of publications"""
  entries: [Publication!]!
  """Pagination metadata"""
  meta: PaginationMeta!
}

"""API response for publishShare"""
type PublishShareResponse {
  """Publication info about share"""
  publication: Publication!
}

"""Color RGBA"""
type RGBAColor {
  """alpha"""
  alpha: Float
  """blue"""
  blue: Float
  """green"""
  green: Float
  """red"""
  red: Float
}

"""List of one time recovery codes"""
type RecoveryCodes {
  """Recovery codes"""
  entries: [String!]!
}

"""Response from mutation removePermissionGroupMembers"""
type RemovePermissionGroupMemberResponse {
  """The permission group"""
  permissionGroup: PermissionGroup!
}

"""Response from mutation addPermissionGroupRelation"""
type RemovePermissionGroupRelationResponse {
  """The permission group of deleted relation"""
  permissionGroup: PermissionGroup!
  """project of the relation, null if concerns share"""
  project: Project
  """share of the relation, null if concerns project"""
  share: Share
}

"""Response from mutation removeProjectMember"""
type RemoveProjectMemberResponse {
  """The affected project"""
  project: Project!
}

"""API response for removeSharesFromCollection"""
type RemoveSharesFromCollectionResponse {
  """The updated collection"""
  collection: Collection!
}

"""API response for removeWorkspaceMember"""
type RemoveWorkspaceMemberResponse {
  """Workspace to which the removed member belonged"""
  workspace: Workspace!
}

"""API response for renameCollection"""
type RenameCollectionResponse {
  """The renamed collection"""
  collection: Collection!
}

type RenderDownloadableAssetsPayload {
  downloadableAsset: DownloadableAsset
  """A list of errors, raised when executing this migrations."""
  errors: [UserError]!
  """Indicates whether the mutation completed successfully or not."""
  successful: Boolean!
}

"""Response for the render_presentation mutation"""
type RenderPresentationResponse {
  """The status of the versions's presentation files."""
  presentationStatus: PresentationFileStatus!
}

"""API response for reportShare"""
type ReportShareResponse {
  """Whether the reported got submitted"""
  reported: Boolean!
}

"""Response from mutation requestAccessToProject"""
type RequestAccessToProjectResponse {
  """The UUID of the project"""
  projectIdentifier: UUID!
}

type ResendVerificationEmailPayload {
  """A list of errors, raised when executing this migrations."""
  errors: [UserError]!
  """Indicates whether the mutation completed successfully or not."""
  successful: Boolean!
}

"""API response for resendWorkspaceInvite"""
type ResendWorkspaceInviteResponse {
  """The workspace membership for the invite"""
  membership: WorkspaceMembership!
}

"""Response for resetting the Workspace's SCIM token"""
type ResetScimTokenResponse {
  """The token for SCIM authentication"""
  scimToken: String!
  """Modified workspace"""
  workspace: Workspace!
}

"""API response for resolveAnnotation"""
type ResolveAnnotationResponse {
  """The resolved annotation"""
  annotation: Annotation!
}

"""API response for restoreProject"""
type RestoreProjectResponse {
  """The restored project"""
  project: Project!
}

"""API response for restoreShare"""
type RestoreShareResponse {
  """The restored share"""
  share: Share!
}

"""Revision object"""
type Revision {
  """Associated artboard"""
  artboard: Artboard @deprecated(reason: "Use frame instead")
  """Artboard id"""
  artboardId: ShortId @deprecated(reason: "Use artboard_short_id instead.")
  """Artboard id"""
  artboardShortId: ShortId @deprecated(reason: "use frame instead")
  """Is versioning enabled? Or is created after versioning date?"""
  createdAfterVersioning: Boolean
  """Created at"""
  createdAt: DateTime!
  """Revision creator"""
  creator: PublicUser!
  """Associated frame"""
  frame: FrameGroup
  """Identifier"""
  id: ID @deprecated(reason: "Use identifier instead.")
  """Identifier"""
  identifier: UUID!
  """Revision kind based on document's version"""
  kind: Kind!
  """
  Revision order.
  
  Non-empty only when revision is returned in artboard revisions list.
  """
  order: Int
  """Updated at"""
  updatedAt: DateTime
  """Determines if the user is the creator of the revision"""
  userIsCreator: Boolean!
  """Document version for given revision"""
  version: Version
  """(Deprecated) Please migrate to userIsCreator"""
  viewerIsCreator: Boolean! @deprecated(reason: "Please migrate to userIsCreator")
}

"""Revision Deleted object"""
type RevisionDeleted {
  """Artboard identifier"""
  artboardIdentifier: UUID! @deprecated(reason: "Use frame_identifier instead.")
  """Created at"""
  createdAt: DateTime!
  """Revision creator"""
  creator: PublicUser!
  """Deleted at"""
  deletedAt: DateTime!
  """Frame identifier"""
  frameIdentifier: UUID!
  """Identifier"""
  identifier: UUID!
  """
  Revision order.
  
  Non-empty only when revision is returned in artboard revisions list.
  """
  order: Int
  """Updated at"""
  updatedAt: DateTime!
  """Is the user on behalf which the request was made the creator of the revision"""
  userIsCreator: Boolean!
}

"""Event that fires when revision is moved due to version deletion"""
type RevisionMovedEvent {
  """Previous artboard identifier"""
  previousArtboardIdentifier: UUID! @deprecated(reason: "Use previous_frame_identifier instead.")
  """Previous frame identifier"""
  previousFrameIdentifier: UUID!
  """Revision"""
  revision: Revision!
}

"""Unavailable Revision"""
type RevisionUnavailable {
  """Created at"""
  createdAt: DateTime!
  """Revision creator"""
  creator: PublicUser!
  """Identifier"""
  identifier: UUID!
  """
  Revision order.
  
  Non-empty only when revision is returned in artboard revisions list.
  """
  order: Int
  """Is the user on behalf which the request was made the creator of the revision"""
  userIsCreator: Boolean!
}

type RevokeActiveSessionsPayload {
  """A list of errors, raised when executing this migrations."""
  errors: [UserError]!
  """Indicates whether the mutation completed successfully or not."""
  successful: Boolean!
}

type RevokeSessionPayload {
  """A list of errors, raised when executing this migrations."""
  errors: [UserError]!
  """Indicates whether the mutation completed successfully or not."""
  successful: Boolean!
}

type RootMutationType {
  """Mutation for accepting a partnership membership into a workspace"""
  acceptPartnershipInvite(
    """The single-use token for accepting this membership invite"""
    membershipToken: String!
    """Number of seats the subscription will have in the next billing cycle"""
    seats: Int!
    """Shipping details for the customer"""
    shipping: ShippingDetailsInput
    """
    Whether or not the user has agreed to the ToS.
    
    This must be `true` or the mutation will fail
    """
    tosAgreed: Boolean!
  ): AcceptWorkspaceInviteResponse!
  """Accept a request access to a private project"""
  acceptProjectAccessRequest(
    """ProjectMembership identifier"""
    membershipIdentifier: UUID!
  ): AcceptProjectAccessRequestResponse!
  """Accept a project invitation"""
  acceptProjectMembershipInvitation(
    """The input param to accept a project membership invitation"""
    input: AcceptProjectMembershipInvitationParams!
  ): AcceptProjectMembershipInvitationResponse!
  """
  Accept a pending share membership.
  
  Users who have been invited to a share can accept the invitation using
  this mutation, either by specifying the share directly or by using a
  membership token.
  
  If users other than the invited user attempt to accept the invitation, an
  error is returned.
  """
  acceptShareMembershipInvitation(
    """The identifier of the share that the current user has been invited to."""
    shareIdentifier: UUID
    """
    A unique JWT generated for the membership invitation. The token is
    included in invite links, and can be used to accept the membership using
    the invited email address.
    """
    token: String
  ): ShareMembership!
  """Mutation for accepting a membership to a workspace"""
  acceptWorkspaceInvite(
    """The single-use token for accepting this membership invite"""
    membershipToken: String!
  ): AcceptWorkspaceInviteResponse!
  """Add a member to a permission group"""
  addPermissionGroupMembers(
    """The input param to add a member to a permission group"""
    input: AddPermissionGroupMembersParams!
  ): AddPermissionGroupMembersResponse!
  """
  Add a permission group to a share or a project.
  
  Deprecated, please use addSharePermissionGroupRelation or
  addProjectPermissionGroupRelation instead.
  """
  addPermissionGroupRelation(
    """The input param to add a permission group to a share or a project"""
    input: AddPermissionGroupRelationParams!
  ): AddPermissionGroupRelationResponse!
  """Add a member to a private project"""
  addProjectMember(
    """
    Email of the user to add to the project. A non workspace member is not added directly, but
    invited: an email is sent and project & workspace membership remain pending until accepted
    """
    email: String
    """If the user is a guest, whether or not they can comment"""
    guestCommentsEnabled: Boolean
    """If the user is a guest, whether or not they can inspect"""
    guestInspectEnabled: Boolean
    """Identifer of the project to add a member to"""
    projectIdentifier: UUID!
    """Workspace Membership identifier of the user to add to the project"""
    workspaceMembershipIdentifier: UUID
  ): AddProjectMemberResponse!
  """Add a permission group to a project"""
  addProjectPermissionGroupRelation(
    """Identifier of permission group"""
    permissionGroupIdentifier: UUID!
    """Identifier of project"""
    projectIdentifier: UUID!
  ): AddProjectPermissionGroupRelationResponse!
  """
  Add reaction to publication. Possible reactions are `HEART` and `NO_REACTION`.
  
  Each user can react with `HEART` only once per publication. Each subsequent request
  to add `HEART` reaction won't change anything.
  
  Sending `NO_REACTION` will remove current `HEART` reaction of the user.
  Sending `NO_REACTION` when `HEART` reaction is not avalable, won't change anything.
  """
  addReactionToPublication(
    """The identifier of the publication."""
    publicationIdentifier: UUID!
    """The reaction to the publication."""
    reaction: PublicationReactionType!
  ): AddReactionToPublicationResponse
  """
  Add member to a share using either an email address, or a user identifier.
  If the email address is not known in the system, they will be added to the share as a
  guest.
  
  In case of a guest, guestCommentsEnabled and guestInspectEnabled params can be used
  to allow or prevent guest to inspect of comment the share.
  """
  addShareMembership(
    """mutation input"""
    input: AddShareMembershipParams!
  ): AddShareMembershipResponse!
  """Add a permission group to a share"""
  addSharePermissionGroupRelation(
    """Access level"""
    accessLevel: PrivateAccessLevel!
    """Identifier of permission group"""
    permissionGroupIdentifier: UUID!
    """Identifier of share"""
    shareIdentifier: UUID!
  ): AddSharePermissionGroupRelationResponse!
  """Add the list of shares to the collection."""
  addSharesToCollection(
    """Collection identifier"""
    identifier: UUID!
    """
    The identifiers of Shares that should be added to the collection.
    
    The Shares must already belong to the Collection's Project in order to
    be added to the Collection.
    """
    shareIdentifiers: [UUID!]!
  ): AddSharesToCollectionResponse!
  """Agree to the Terms of Service for a given customer."""
  agreeToWorkspaceCustomerTermsOfService(
    """
    Whether or not the use agrees to the terms of service. The muation will retun
    an error if this value is `false`.
    """
    agreed: Boolean!
    """The identifier of the customer you want to update the SSO identity provider of"""
    customerIdentifier: UUID!
  ): AgreeToWorkspaceTermsOfServiceResponse!
  """Archive a project and all its shares"""
  archiveProject(
    """Project identifier"""
    identifier: UUID!
  ): ArchiveProjectResponse!
  """Mutation to archive a storage item."""
  archiveStorageItem(
    """The identifier of the storage item that will be archived."""
    identifier: UUID!
    """The type of the storage item that will be archived."""
    type: StorageItemType!
  ): ArchiveStorageItemResponse!
  """Cancel scheduled seats update"""
  cancelScheduledBillingSeats(
    """Cancel scheduled seats update parameters"""
    input: CancelScheduledBillingSeatsParams!
  ): CancelScheduledBillingSeatsResponse!
  """Mutation for checking availability of a workspace profile short URL name"""
  checkWorkspaceProfileShortUrl(
    """Short URL name to check for"""
    shortUrlName: String!
  ): CheckWorkspaceProfileShortUrlResponse!
  """
  Create a new collab-enabled share
  
  This creates a share, in the same manner as `createShare`, and sets the
  coedit compatility version of the initial document.
  """
  collaborativeShareCreate(
    """
    The coedit compatibilty version of the share
    
    This value determines which Sketch releases can edit the Share.
    """
    coeditCompatibilityVersion: Int!
    """The name of the share and initial document."""
    name: String!
    """
    The identifier of the organization that should own the share.
    
    As users can create shares in their personal workspace, this argument
    is optional.
    """
    organizationIdentifier: UUID
    """The identifier of the project theshare should be added to."""
    projectIdentifier: UUID
  ): CollaborativeShareCreatePayload! @deprecated(reason: "For creating shares in a workspace, use `createWorkspaceShare` instead")
  """
  Create a new version of the share after a migration.
  
  When a new version of Sketch is released that contains a breaking change
  in the document model, users need to migrate their documents to edit them
  with the new Sketch release.
  
  In coedit, this migration needs to be coordinated to ensure that all
  users end up in the correct state. The first step is for one user to
  migrate the document and upload it to Cloud.
  
  This mutation provides a mechanism to create a new document version, and
  set the coedit_compatibility_version of that document to that of the new
  Sketch release.
  
  Clients can then use `collaborative_share_migrated_document*` mutations
  to complete the document upload process.
  """
  collaborativeShareCreateMigratedVersion(
    """
    The coedit_compatibility_version of the new document version.
    
    This value must be greater than the current
    coedit_compatibility_version of the Share
    (`share.current_version.document.coedit_compatibility_version`).
    
    If this constraint is not met, an error will be returned.
    """
    coeditCompatibilityVersion: Int!
    """The title of the new document version"""
    documentName: String!
    """The identifier of the share to create a migrated version for"""
    shareIdentifier: UUID!
  ): CollaborativeShareCreatePayload!
  """
  Create a new version of the share for a full upload.
  
  This mutation provides a mechanism to reset the share by
  uploading a full document. For an example, this could be used to
  revert the share to a previous version.
  
  This mutation checks that there are no other collaborators
  editing the document. An error is returned if this constraint is
  not met.
  
  Clients can then use `collaborative_share_reset_document*` mutations
  to complete the document upload process.
  """
  collaborativeShareCreateResetVersion(
    """The coedit_compatibility_version of the new document version."""
    coeditCompatibilityVersion: Int!
    """The title of the new document version"""
    documentName: String!
    """The identifier of the share to create a new version for"""
    shareIdentifier: UUID!
  ): CollaborativeShareCreatePayload!
  """
  Complete a multipart upload for the first Document of a coedit-enabled Share.
  
  Once a client has uploaded all of the parts of the Document, this
  mutation can be used to complete the upload and send the document to the
  Renderfarm for processing.
  """
  collaborativeShareInitialDocumentUploadComplete(
    """The identifier of the document that is being uploaded"""
    documentIdentifier: UUID!
    """uploaded part etags"""
    etags: [MultipartEtag!]
    """
    The upload session ticket
    
    The client obtains this ticket from
    `collaborative_share_initial_document_upload_start` and uses it when
    uploading the document to S3.
    """
    multipartSessionTicket: String!
  ): Version!
  """
  Start a multipart upload for the first Document of a coedit-enabled Share.
  
  Once a client has created a new coedit-enabled Share using
  `collaborative_share_create`, they can prepare to upload the document
  for processing in the Renderfarm using this mutation.
  
  This mutation will return a MultipartUpload that they can use to upload
  the document to S3, and then complete the upload using
  `collaborative_share_create_migrated_document_upload_complete`.
  """
  collaborativeShareInitialDocumentUploadStart(
    """The identifier of the document created via `collaborative_share_create`"""
    documentIdentifier: UUID!
    """The size of the document in bytes"""
    filesize: Int!
  ): MultipartUpload!
  """
  Complete a multipart upload for a coediting document after migration
  
  Once a client has uploaded all of the parts of a migrated document, this
  mutation can be used to complete the upload and send the document to the
  Renderfarm for processing.
  """
  collaborativeShareMigratedDocumentUploadComplete(
    """The identifier of the document that is being uploaded"""
    documentIdentifier: UUID!
    """uploaded part etags"""
    etags: [MultipartEtag!]
    """
    The upload session ticket
    
    The client obtains this ticket from
    `collaborative_share_migrated_document_upload_start` and uses it when
    uploading the document to S3.
    """
    multipartSessionTicket: String!
  ): Version!
  """
  Start a multipart upload for a coediting document after migration.
  
  Once a client has created a new Version and Document for a migration
  using `collaborative_share_create_migrated_version`, they can prepare to
  upload the document for processing in the Renderfarm using this mutation.
  
  This mutation will return a MultipartUpload that they can use to upload
  the document to S3, and then complete the upload using
  `collaborative_share_create_migrated_document_upload_complete`.
  """
  collaborativeShareMigratedDocumentUploadStart(
    """The identifier of the document created via `collaborative_share_create_migrated_version`"""
    documentIdentifier: UUID!
    """The size of the document in bytes"""
    filesize: Int!
  ): MultipartUpload!
  """
  Complete a multipart upload for a coediting document full upload.
  
  Once a client has uploaded all of the parts of a document, this
  mutation can be used to complete the upload and send the
  document to the Renderfarm for processing.
  """
  collaborativeShareResetDocumentUploadComplete(
    """The identifier of the document."""
    documentIdentifier: UUID!
    """uploaded part etags"""
    etags: [MultipartEtag!]
    """
    The upload session ticket received from
    `collaborative_share_reset_document_upload_start`.
    """
    multipartSessionTicket: String!
  ): Version!
  """
  Start a multipart upload for a coediting document full upload.
  
  This mutation will return a MultipartUpload that they can use to upload
  the document to S3, and then complete the upload using
  `collaborative_share_create_reset_document_upload_complete`.
  """
  collaborativeShareResetDocumentUploadStart(
    """The identifier of the document created via `collaborative_share_create_reset_version`"""
    documentIdentifier: UUID!
    """The size of the document in bytes"""
    filesize: Int!
  ): MultipartUpload!
  """Confirm Multi-Factor Authentication Setup in user's account"""
  confirmMfaSetup(
    """Time-based One Time Password for MFA"""
    totp: String!
  ): MfaConfig!
  """
  Create a new annotation with its first comment.
  
  Annotations must be linked to either an artboard, or a page (so one of the
  three permanent ids must be passed, and only one).
  
  Also, for floating annotations coordinates must be passed.
  """
  createAnnotation(
    """Text of the first annotation comment"""
    body: String!
    """
    (For floating annotations only)
    Position of the annotation, given in (X,Y) coordinates
    """
    coordinates: AnnotationCoordinatesInput
    """UUID of the frame to which the annotation should be linked"""
    frameUuid: String
    """UUID of the page to which the annotation should be linked"""
    pageUuid: String
    """Share identifier"""
    shareIdentifier: UUID!
    """
    Version identifier which was open for editing when the annotation was created.
    Should be only populated by real-time clients when wanting to hide the annotation
    from clients without access to this version.
    """
    versionIdentifier: UUID
  ): CreateAnnotationResponse!
  """Create a new reply in the given annotation"""
  createAnnotationReply(
    """Annotation identifier"""
    annotationIdentifier: UUID!
    """Text of the reply"""
    body: String!
  ): CreateAnnotationReplyResponse!
  """Create a new collection within the given project"""
  createCollection(
    """
    Add all "top-level" Shares from the Project to the Collection.
    
    "top-level" Shares are Shares that are not already in another
    Collection.
    
    The existing Shares in the Collection will remain in the Collection.
    
    **NOTE** if this argument is `true` then `share_identifiers` is ignored
    as they are mutually exclusive.
    """
    addAllProjectShares: Boolean
    """
    Description of the new collection.
    
    Description cannot be longer than 255 characters.
    """
    description: String
    """
    Name of the new collection.
    
    The name must be unique within the context of the Project.
    
    The mutation will return an error if the name is not unique.
    """
    name: String!
    """Project identifier"""
    projectIdentifier: UUID!
    """
    The identifiers of Shares that should be added to the collection when
    it is created.
    
    The Shares must already belong to the Collection's Project in order to
    be added to the Collection.
    
    An error will be returned if one or more of the Shares do not belong to
    the Project.
    
    **NOTE** if `add_all_project_shares` is provided and has the value
    `true` then `share_identifiers` is ignored as they are mutually
    exclusive.
    """
    shareIdentifiers: [UUID!]! = []
  ): CreateCollectionResponse!
  """Create a workspace design system"""
  createDesignSystem(
    """Attributes of Design System to be created"""
    input: CreateDesignSystemInput!
    """The workspace the design system will belong to"""
    workspaceIdentifier: UUID!
  ): DesignSystem!
  """Create design system documentation"""
  createDesignSystemDocs(
    """Identifier of the design system to create docs for"""
    identifier: UUID!
  ): DesignSystem!
  """Create a institution application"""
  createInstitutionApplication(
    """Input for creating a institution application"""
    input: CreateInstitutionApplicationParams!
  ): CreateEducationApplicationResponse!
  """Create a new project in an organization"""
  createOrganizationProject(
    """Project name"""
    name: String!
    """Organization short id"""
    organizationShortId: ShortId
  ): ProjectCreatePayload! @deprecated(reason: "Use createWorkspaceProject instead")
  """Create a partner workspace"""
  createPartnerWorkspace(
    """Create workspace parameters"""
    input: CreatePartnerWorkspaceParams!
  ): CreatePartnerWorkspaceResponse!
  """Create a permission group"""
  createPermissionGroup(
    """The input param to create a permission group"""
    input: CreatePermissionGroupParams!
  ): CreatePermissionGroupResponse!
  """Create a new preview for a given share"""
  createPreview(
    """Whether comments functionality should be enabled for this preview."""
    commentsEnabled: Boolean = false
    """List of preview content items representing the pages configuration for this preview."""
    content: [PreviewContentItem!]
    """Description of the new preview."""
    description: String
    """Whether inspect functionality should be enabled for this preview."""
    inspectEnabled: Boolean = false
    """Name of the new preview."""
    name: String!
    """Share identifier"""
    shareIdentifier: UUID!
  ): CreatePreviewResponse!
  """Create a student application"""
  createStudentApplication(
    """Input for creating a student application"""
    input: CreateStudentApplicationParams!
  ): CreateEducationApplicationResponse!
  """Create a teacher application"""
  createTeacherApplication(
    """Input for creating a teacher application"""
    input: CreateTeacherApplicationParams!
  ): CreateEducationApplicationResponse!
  """Create a new project in the user namespace"""
  createUserProject(
    """Project name"""
    name: String!
  ): ProjectCreatePayload! @deprecated(reason: "Use createWorkspaceProject with the user's personal workspace")
  """Create a workspace"""
  createWorkspace(
    """Create workspace parameters"""
    input: CreateWorkspaceParams!
  ): CreateWorkspaceResponse!
  """Mutation for creating a workspace profile"""
  createWorkspaceProfile(
    """Workspace Profile details"""
    input: CreateWorkspaceProfileParams
    """Workspace identifier"""
    workspaceIdentifier: UUID!
  ): CreateWorkspaceProfileResponse!
  """Create a new project in a workspace"""
  createWorkspaceProject(
    """
    Description of the new project.
    
    Description cannot be longer than 255 characters.
    """
    description: String
    """
    A list of email addresses of users that will be added to the project.
    
    If the email address belongs to a user who is not a workspace member,
    then they will be invited to join the workspace via email.
    
    Their workspace and project membership will remain pending until they
    accept it.
    """
    guestsToInvite: [CreateWorkspaceProjectGuestToInvite!]
    """Project name"""
    name: String!
    """Parent project identifier"""
    parentProjectIdentifier: UUID
    """
    A list of identifiers/access level of permission groups that will be added to
    the project.
    """
    permissionGroups: [PermissionGroupParam!]
    """
    The identifiers of storage items that should be added to the project when
    it is created.
    """
    storageItems: [MinimalStorageItem!]! = []
    """Workspace access level of the project"""
    workspaceAccessLevel: ProjectWorkspaceAccessLevel = DEFAULT
    """Workspace identifier"""
    workspaceIdentifier: UUID!
    """
    A list of identifiers for workspace memberships that will be added to
    the project.
    """
    workspaceMembershipIdentifiers: [UUID!]
  ): CreateWorkspaceProjectResponse!
  """Create share"""
  createWorkspaceShare(
    """The input params for the share you're creating"""
    input: CreateWorkspaceShareParams!
  ): CreateWorkspaceShareResponse
  """Delete annotation along with replies"""
  deleteAnnotation(
    """Annotation identifier"""
    annotationIdentifier: UUID!
  ): DeleteAnnotationResponse!
  """Delete annotation reply"""
  deleteAnnotationReply(
    """Reply comment identifier"""
    commentIdentifier: UUID!
  ): DeleteAnnotationReplyResponse!
  """Delete a collection permanently. Its shares will stay directly under the project."""
  deleteCollection(
    """Collection identifier"""
    identifier: UUID!
  ): DeleteCollectionResponse!
  """Delete a design system"""
  deleteDesignSystem(
    """Identifier of the design system to be deleted"""
    identifier: UUID!
  ): DesignSystem!
  """Delete all design system documentation permanently"""
  deleteDesignSystemDocs(
    """Identifier of the design system to delete documentation for"""
    identifier: UUID!
  ): DesignSystem!
  """Deletes a design system documentation page permanently"""
  deleteDesignSystemPage(
    """Identifier of the design system page to delete"""
    identifier: UUID!
  ): DesignSystemPage!
  """Delete a permission group"""
  deletePermissionGroup(
    """The input param to delete a permission group"""
    input: DeletePermissionGroupParams!
  ): DeletePermissionGroupResponse!
  """Delete a project"""
  deleteProject(
    """Project short id"""
    projectShortId: ShortId
  ): ProjectDeletePayload!
  """Deletes permanently a project and its shares from the trash"""
  deleteProjectPermanently(
    """Project identifier"""
    identifier: UUID!
  ): DeleteProjectPermanentlyResponse!
  """Permanently delete a trashed workspace's share"""
  deleteSharePermanently(
    """The identifier of the trashed share you want to delete"""
    shareIdentifier: UUID!
    """The identifier of the workspace the trashed share belongs to"""
    workspaceIdentifier: UUID!
  ): DeleteSharePermanentlyResponse!
  """Mutation to delete a storage item."""
  deleteStorageItem(
    """The identifier of the storage item that will be deleted."""
    identifier: UUID!
    """The type of the storage item that will be deleted."""
    type: StorageItemType!
  ): DeleteStorageItemResponse!
  """Delete a workspace"""
  deleteWorkspace(
    """The identifier of the workspace to delete."""
    identifier: UUID!
    """The current password of the user."""
    password: String
  ): DeleteWorkspaceResponse!
  """Mutation for deleting an avatar"""
  deleteWorkspaceAvatar(
    """Workspace identifier"""
    identifier: UUID!
  ): DeleteWorkspaceAvatarResponse!
  """Disable Multi-Factor Authentication in user's account"""
  disableMfa(
    """User password"""
    password: String!
  ): DisableMfaResponse!
  """Mutation for disabling scim"""
  disableScim(
    """Workspace identifier"""
    identifier: UUID!
  ): DisableScimResponse!
  """Mutation for disabling Support Access"""
  disableSupportAccess(
    """Workspace identifier"""
    identifier: UUID!
  ): DisableSupportAccessResponse!
  """Cancel a multipart upload session"""
  documentUploadCancel(
    """identifier of the document"""
    documentIdentifier: UUID!
  ): DocumentUploadCancelPayload
  """Mark the multipart upload for the document as completed"""
  documentUploadComplete(
    """identifier of the document"""
    documentIdentifier: UUID
    """session ticket"""
    multipartSessionTicket: String!
  ): DocumentUploadCompletePayload
  """document upload start arguments"""
  documentUploadStart(
    """identifier of the document"""
    documentIdentifier: UUID
    """filesize in bytes"""
    filesize: Int!
  ): MultipartUpload
  """Duplicate a share to a given project of the given workspace"""
  duplicateShareTo(
    """Identifier of the share to duplicate"""
    sourceShareIdentifier: UUID!
    """Identifier of the version to duplicate"""
    sourceVersionIdentifier: UUID!
    """Identifier of the collection to duplicate to"""
    targetCollectionIdentifier: UUID
    """Identifier of the project to duplicate to"""
    targetProjectIdentifier: UUID
    """Identifier of the workspace to duplicate to"""
    targetWorkspaceIdentifier: UUID!
  ): DuplicateShareToResponse
  """Duplicate a share to draft folder of the given workspace"""
  duplicateShareToDrafts(
    """Input"""
    input: DuplicateShareToDraftsParams
  ): DuplicateShareToDraftsResponse
  """Edit the details of a collection and update its content."""
  editCollection(
    """
    Add all "top-level" Shares from the Project to the Collection.
    
    "top-level" Shares are Shares that are not already in another
    Collection.
    
    The existing Shares in the Collection will remain in the Collection.
    
    **NOTE** if this argument is `true` then `share_identifiers` is ignored
    as they are mutually exclusive.
    """
    addAllProjectShares: Boolean
    """
    New description of the new collection.
    
    Description cannot be longer than 255 characters.
    """
    description: String
    """Collection identifier"""
    identifier: UUID!
    """New name of the collection, which must be unique within the context of the Project."""
    name: String!
    """
    The identifiers of Shares that should make up the collection.
    
    Any Shares that are already in the collection and are not
    present in this list of identifiers will be removed from the collection.
    
    The Shares must already belong to the Collection's Project in order to
    be added to the Collection.
    
    **NOTE** if `add_all_project_shares` is provided and has the value
    `true` then `share_identifiers` is ignored as they are mutually
    exclusive.
    """
    shareIdentifiers: [UUID!]!
  ): EditCollectionResponse!
  """Edit the description of a collection."""
  editCollectionDescription(
    """
    New description of the new collection.
    
    Description cannot be longer than 255 characters.
    """
    description: String
    """Collection identifier"""
    identifier: UUID!
  ): EditCollectionDescriptionResponse!
  """Edit the body of a comment"""
  editComment(
    """Updated text of the comment"""
    body: String!
    """Comment identifier"""
    commentIdentifier: UUID!
  ): EditCommentResponse!
  """Requests a resend of the email change confirmation"""
  emailResendChangeConfirmation: EmailResendChangeConfirmationPayload
  """Update the user's email address"""
  emailUpdate(
    """User Email"""
    email: String!
    """Password"""
    password: String!
  ): EmailUpdatePayload
  """Verify a user's email address"""
  emailVerify(
    """Verify token"""
    token: String!
  ): EmailVerifyPayload
  """Permanently delete workspace's trashed shares"""
  emptyWorkspaceTrash(
    """The identifier of the workspace you want to empty the trash for"""
    identifier: UUID!
  ): EmptyWorkspaceTrashResponse!
  """Mutation for enabling scim"""
  enableScim(
    """Workspace identifier"""
    identifier: UUID!
  ): EnableScimResponse!
  """Mutation for enabling Support Access"""
  enableSupportAccess(
    """Permission duration (in days)"""
    duration: Int
    """Workspace identifier"""
    identifier: UUID!
  ): EnableSupportAccessResponse!
  """Generate a new set of recovery codes"""
  generateMfaRecoveryCodes(
    """User password"""
    password: String!
  ): MfaConfig!
  """Mutation for inviting members to a workspace"""
  inviteWorkspaceMembers(
    """Invitation details"""
    input: InviteWorkspaceMembersParams!
  ): InviteWorkspaceMembersResponse!
  """Mutation for inviting a partner to a workspace"""
  inviteWorkspacePartner(
    """Invitation details"""
    input: InviteWorkspacePartnerParams!
  ): Workspace!
  """Let user leave a project and remove all associated share memberships"""
  leaveProject(
    """Project UUID"""
    projectIdentifier: UUID
  ): LeaveProjectResponse!
  """Link SSO-only account to an existing regular account"""
  linkRegularAccount(
    """Email of an existing regular account"""
    email: Email!
    """Password of an existing regular account"""
    password: String!
  ): LinkRegularAccountResponse!
  """Link SSO-only account to an existing regular account by providing MFA token"""
  linkRegularAccountWithMfa(
    """MFA token with encoded user identifier."""
    mfaToken: String!
    """MFA recovery code"""
    recoveryCode: String
    """MFA verification code"""
    totp: String
  ): LinkRegularAccountResponse!
  """Mark multiple comments as read"""
  markCommentsAsRead(
    """Comment identifiers"""
    commentIdentifiers: [UUID!]!
  ): MarkCommentsAsReadResponse!
  """
  Move all the shares from a collection to another, if a target collection is passed, or
  back to the project root otherwise.
  
  Optionally, delete the origin collection if requested.
  """
  moveAllCollectionShares(
    """Origin collection identifier"""
    originIdentifier: UUID!
    """If true, remove the origin collection after moving all its shares"""
    removeCollection: Boolean
    """If passed, identifier of the collection the shares should be moved to"""
    targetIdentifier: UUID
  ): MoveAllCollectionSharesResponse!
  """
  Move an annotation to a new location.
  
  When annotation gets moved it could mean it now gets linked to a different source
  (a particular artboard if it gets moved on top of one or a page if it gets moved out of an
  artboard and into the general canvas).
  
  For this reason, one of the two permanent ids must be always passed (and only one).
  """
  moveAnnotation(
    """Annotation identifier"""
    annotationIdentifier: UUID!
    """New position of the annotation, given in (X,Y) coordinates"""
    coordinates: AnnotationCoordinatesInput!
    """UUID of the frame to which the annotation should be linked"""
    frameUuid: String
    """UUID of the page to which the annotation should be linked"""
    pageUuid: String
    """Information about the subject of the annotation, which can be artboard or page"""
    subject: AnnotationSubjectInput
    """
    Version identifier which was open for editing when the annotation was moved.
    Should be only populated by real-time clients when wanting to hide the annotation
    from clients without access to this version.
    """
    versionIdentifier: UUID
  ): MoveAnnotationResponse!
  """
  Move annotations in batch.
  
  Accepts a list of inputs reflecting the one from moveAnnotation. The behavior is atomic - if
  one move operation fails, the whole mutation does too and none of the annotations get moved.
  
  The number of annotations that can be moved at once is limited to 40.
  
  The `versionIdentifier` applies to all annotations from the batch input.
  """
  moveAnnotations(
    """List of input parameters for moving annotations."""
    input: [MoveAnnotationsInput!]!
    """
    Version identifier which was open for editing when the annotations were moved.
    Should be only populated by real-time clients when wanting to hide the annotations
    from clients without access to this version.
    """
    versionIdentifier: UUID
  ): MoveAnnotationsResponse!
  """Move a share into a project"""
  moveShareToProject(
    """Project identifier"""
    projectIdentifier: UUID
    """Share identifier"""
    shareIdentifier: UUID
  ): ShareMoveResult!
  """Notification mark all as read payload"""
  notificationMarkAllAsRead: NotificationMarkAllAsReadPayload
  """Marks all notifications of this user as seen"""
  notificationMarkAllAsSeen: NotificationMarkAllAsSeenPayload @deprecated(reason: "no longer necessary. function is a noop now.")
  """Notification as read payload"""
  notificationMarkAsRead(
    """Identifier"""
    identifier: UUID
  ): NotificationMarkAsReadPayload
  """Marks all 'read' notifications as done"""
  notificationMarkEveryReadAsDone: NotificationMarkEveryReadAsDonePayload
  """Accept team membership"""
  organizationAcceptInvite(
    """The single-use token for accepting this memebership invite"""
    membershipToken: String!
  ): OrganizationAcceptInvitePayload @deprecated(reason: "Use `acceptWorkspaceInvite` instead")
  """Mutation to accept ToS"""
  organizationAcceptTos(
    """Organization identifier"""
    id: String!
    """Whether the Terms of Service have been accepted"""
    tosAccepted: Boolean
  ): OrganizationAcceptTosPayload! @deprecated(reason: "Use agreeToWorkspaceTermsOfService instead.")
  """Resend team membership invitation"""
  organizationResendInvite(
    """The identifier of the membership you wish to resend the invitation for"""
    identifier: UUID
  ): OrganizationResendInvitePayload @deprecated(reason: "Use `resendWorkspaceInvite` instead")
  """Update the team’s short name for SSO"""
  organizationShortNameUpdate(
    """Organization identifier"""
    identifier: UUID!
    """New team short name"""
    shortName: String
  ): OrganizationUpdatePayload @deprecated(reason: "Please use `updateWorkspaceCustomerSsoShortName`")
  """Configure an SSO identity provider’s attribute mapping for an organization"""
  organizationUpdateAttributeMapping(
    """Organization identifier"""
    identifier: UUID!
    """Attribute mappings list"""
    mappings: UpdateAttributeMappingParams!
  ): OrganizationUpdateAttributeMappingPayload @deprecated(reason: "Please use `updateWorkspaceCustomerSsoAttributeMapping`")
  """Configure an SSO identity provider for an organization"""
  organizationUpdateIdentityProviderConfig(
    """Identity provider config"""
    config: UpdateIdentityProviderConfigParams
    """Organization identifier"""
    identifier: UUID
    """Uploaded XML metadata file"""
    metadata: Upload
  ): OrganizationUpdateIdentityProviderConfigPayload @deprecated(reason: "Please use `updateWorkspaceCustomerSsoIdentityProviderConfig`")
  """Pin a project"""
  pinProject(
    """The input param to pin a project"""
    input: PinProjectParams!
  ): PinProjectResponse!
  """Pin a share"""
  pinShare(
    """The input param to pin a share"""
    input: PinShareParams!
  ): PinShareResponse!
  """Publish share to Community"""
  publishShare(
    """Enables commenting for external users"""
    publicCommentsEnabled: Boolean!
    """Enables inspector for external users"""
    publicInspectEnabled: Boolean!
    """The identifier of the share you want to publish"""
    shareIdentifier: UUID!
  ): PublishShareResponse
  """Revove a member from a permission group"""
  removePermissionGroupMember(
    """The input param to remove a member from a permission group"""
    input: RemovePermissionGroupMemberParams!
  ): RemovePermissionGroupMemberResponse!
  """Remove a permission group relation"""
  removePermissionGroupRelation(
    """The input param to remove a permission group to a share or a project"""
    input: RemovePermissionGroupRelationParams!
  ): RemovePermissionGroupRelationResponse!
  """Remove a member from private project"""
  removeProjectMember(
    """Indication if user has confirmed the operation"""
    confirmed: Boolean!
    """ProjectMembership identifier"""
    membershipIdentifier: UUID!
    """Indicates if individual share memberships should be deleted as well"""
    removeShareMemberships: Boolean
  ): RemoveProjectMemberResponse!
  """Remove a share from a project"""
  removeShareFromProject(
    """Project short id"""
    projectShortId: ShortId
    """Share short id"""
    shareShortId: ShortId
  ): ShareRemoveFromProjectResult!
  """Remove the list of shares from the collection."""
  removeSharesFromCollection(
    """Collection identifier"""
    identifier: UUID!
    """
    The identifiers of Shares that should be removed from the collection.
    
    The Shares must all belong to the Collection's project in order to
    be removed.
    """
    shareIdentifiers: [UUID!]!
  ): RemoveSharesFromCollectionResponse!
  """Remove a workspace member"""
  removeWorkspaceMember(
    """Identifier of the workspace membership to remove"""
    membershipIdentifier: UUID!
  ): RemoveWorkspaceMemberResponse!
  """Edit the name of a collection."""
  renameCollection(
    """Collection identifier"""
    identifier: UUID!
    """New name of the collection, which must be unique within the context of the Project."""
    name: String!
  ): RenameCollectionResponse!
  """Rename a project"""
  renameProject(
    """New project name"""
    name: String!
    """Project short id"""
    projectShortId: ShortId
  ): ProjectRenamePayload! @deprecated(reason: "Use updateProject instead")
  """Creates a RenderFarm job to render downloadable assets for the given document"""
  renderDownloadableAssets(
    """The input for our mutation, which is just the document identifier"""
    input: RenderDownloadableAssetsInput!
  ): RenderDownloadableAssetsPayload
  """Triggers a presentation render for the given version"""
  renderPresentation(
    """identifier of the version to render a presentation file for"""
    versionIdentifier: UUID
  ): RenderPresentationResponse!
  """Reorders a design system page"""
  reorderDesignSystemPage(
    """If you want to move the source page above or below the target page"""
    position: ReorderPosition!
    """The identifier of the page you wish to move"""
    srcIdentifier: UUID!
    """The identifier of the page where you want to move the page to"""
    targetIdentifier: UUID!
  ): DesignSystemPage!
  """Report a share"""
  reportShare(
    """Identifier of the share you want to report"""
    identifier: UUID!
    """Reason the share is reported for"""
    reason: ShareReportReason!
  ): ReportShareResponse
  """Request access to a private project"""
  requestAccessToProject(
    """Identifier of the project to request access to"""
    projectIdentifier: UUID
    """ShortId of the project the user wants to request access to"""
    projectShortId: ShortId
  ): RequestAccessToProjectResponse!
  """Resend a verification email for the logged-in user"""
  resendVerificationEmail: ResendVerificationEmailPayload
  """Mutation for resending a workspace invite"""
  resendWorkspaceInvite(
    """Membership identifier"""
    identifier: UUID!
  ): ResendWorkspaceInviteResponse!
  """Mutation for resetting the SCIM Auth token"""
  resetScimToken(
    """Workspace identifier"""
    identifier: UUID!
  ): ResetScimTokenResponse!
  """Resolve an annotation"""
  resolveAnnotation(
    """Annotation identifier"""
    annotationIdentifier: UUID!
  ): ResolveAnnotationResponse!
  """Restore a project from the trash with all its trashed shares"""
  restoreProject(
    """Project identifier"""
    identifier: UUID!
  ): RestoreProjectResponse!
  """Restore a share from the trash"""
  restoreShare(
    """The identifier of the soft-deleted share to restore"""
    identifier: UUID!
  ): RestoreShareResponse!
  """Revoke every active session, possibly even current one"""
  revokeActiveSessions(
    """If set, it does not revoke the current session"""
    exceptCurrentOne: Boolean
  ): RevokeActiveSessionsPayload!
  """Revoke specified session"""
  revokeSession(
    """Session's identifier"""
    id: UUID!
  ): RevokeSessionPayload!
  """Create a SCIM personal access token for the current user."""
  scimPersonalAccessTokenCreate(
    """
    The access scopes that this token should have.
    
    A token must have one or more access scope
    """
    accessScopes: [ScimApiAccessScope!]!
    """A description given to this token so that it can be identified."""
    description: String!
    """
    An optional expiration timestamp for the token.
    
    If set, the token is no longer valid when expires_at is in the past.
    """
    expiresAt: DateTime
  ): GeneratedScimPersonalAccessToken!
  """Delete a SCIM personal access token belonging to the current user."""
  scimPersonalAccessTokenDelete(
    """The identifier of the token to delete"""
    identifier: UUID!
  ): DeletedScimPersonalAccessToken!
  """Sends a email to the user with the sketch download link"""
  sendDownloadSketchEmail: SendDownloadSketchEmailResponse!
  """
  Set current user's subscription state for a given share, permanent
  artboard or annoation.
  
  Only limited combinations of arguments are accepted as valid:
  
  * `shareIdentifier` + `state`
  * `shareIdentifier` + `permanentArtboardId` + `state`
  * `annotationIdentifier` + `state`
  """
  setNotificationSubscription(
    """Annotation identifier"""
    annotationIdentifier: UUID
    """Frame UUID"""
    frameUuid: String
    """Permanent artboard identifier"""
    permanentArtboardId: String
    """Share identifier"""
    shareIdentifier: UUID
    """Subscription state"""
    state: NotificationSubscriptionState!
  ): SetNotificationSubscriptionResponse!
  """Set up Multi-Factor Authentication in user's account"""
  setupMfa: SetupMfaResponse!
  """Accept access-request to a share"""
  shareAcceptRequest(
    """The identifier for the request you want to accept"""
    identifier: UUID
  ): ShareAcceptRequestPayload
  """Create share"""
  shareCreate(
    """The input params for the share you're creating"""
    share: ShareCreateParams!
  ): ShareCreatePayload @deprecated(reason: "For creating shares in a workspace, use `createWorkspaceShare` instead")
  """Create share version"""
  shareCreateVersion(
    """The share you want to create a version of"""
    identifier: UUID
    """The parameters of for the new version"""
    share: ShareCreateVersionParams!
  ): ShareCreateVersionPayload
  """Move share to trash"""
  shareDelete(
    """The identifier of the share you want to trash"""
    identifier: UUID
    """The shortId of the share you want to trash"""
    shortId: ShortId
  ): ShareDeletePayload
  """Delete membership from a share"""
  shareDeleteMembership(
    """Indication if user has confirmed the operation"""
    confirmed: Boolean = false
    """The identifier for the membership you want to delete"""
    membershipIdentifier: UUID
  ): ShareDeleteMembershipPayload
  """Leave share"""
  shareLeave(
    """The share you wish to leave"""
    identifier: UUID
  ): ShareLeavePayload
  """Accept a pending membership"""
  shareMembershipAccept(
    """Parameters identifying the invitation."""
    input: AcceptMembershipParams
  ): ShareMembershipAcceptPayload @deprecated(reason: "This mutation is deprecated as it uses custom types to return errors\nrather than the \"errors\" field from the GraphQL spec.\n\nUse \"shareMembershipInvitationAccept\" instead.\n")
  """Request access to a share"""
  shareRequestAccess(
    """The shortId of the share you want to request access to"""
    shortId: ShortId!
  ): ShareRequestAccessPayload
  """Undelete a share"""
  shareRestore(
    """The identifier of the share you want to restore"""
    identifier: UUID
  ): ShareRestorePayload @deprecated(reason: "Use `restoreShare` instead")
  """Unwatch a share"""
  shareUnwatch(
    """The identifier of the share you want to unwatch"""
    identifier: UUID
  ): ShareUnwatchPayload
  """Update share"""
  shareUpdate(
    """The identifier of the share you're updating"""
    identifier: UUID
    """The fields you want to update"""
    share: ShareParams!
  ): ShareUpdatePayload
  """Watch a share"""
  shareWatch(
    """The identifier of the share you want to watch"""
    identifier: UUID
  ): ShareWatchPayload
  """
  Move multiple shares to the trash.
  
  You must be an admin in the shares' workspace in order to use this
  mutation.
  """
  sharesDelete(
    """The identifiers of the shares you want to trash"""
    identifiers: [UUID!]!
  ): SharesDeletePayload
  """Sign up for a new account"""
  signUp(
    """Input"""
    input: SignUpInput!
  ): SignUpPayload
  """Transfer share to a different workspace"""
  transferShare(
    """The operation to perform on memberships when transferring the share"""
    membershipsOperation: MembershipsTransferOperation!
    """(Optional) The workspace project you want to transfer the share to"""
    projectIdentifier: UUID
    """The share's identifier"""
    shareIdentifier: UUID!
    """The workspace you want to transfer the share to"""
    workspaceIdentifier: UUID!
  ): TransferShareResponse!
  """Mutation to transfer a storage item."""
  transferStorageItem(
    """The identifier of the storage item that will be transferred."""
    identifier: UUID!
    """
    The identifier of the new parent project.
    If not provided, the storage item will be transferred to the root.
    """
    parentProjectIdentifier: UUID
    """The type of the storage item that will be transferred."""
    type: StorageItemType!
    """
    The identifier of the workspace in which the item to be transferred.
    Not needed if parent_project_identifier is provided. If neither are provided,
    the item will be transferred to the root of its current workspace.
    """
    workspaceIdentifier: UUID
  ): TransferStorageItemResponse!
  """Mutation to transfer multiple storage items."""
  transferStorageItems(
    """
    The identifier of the new parent project.
    If not provided, the storage item will be transferred to the root.
    """
    parentProjectIdentifier: UUID
    """The storage items that will be transferred."""
    storageItems: [MinimalStorageItem!]!
    """
    The identifier of the workspace in which the items to be transferred.
    Not needed if parentProjectIdentifier is provided. If neither are provided,
    the items will be transferred to the root of their current workspace.
    """
    workspaceIdentifier: UUID
  ): TransferStorageItemsResponse!
  """Unarchive a project and all its shares"""
  unarchiveProject(
    """Project identifier"""
    identifier: UUID!
  ): UnarchiveProjectResponse!
  """Unpin a project"""
  unpinProject(
    """The input param to unpin a project"""
    input: UnpinProjectParams!
  ): UnpinProjectResponse!
  """Unpin a share"""
  unpinShare(
    """The input param to unpin a share"""
    input: UnpinShareParams!
  ): UnpinShareResponse!
  """Unpublish share from Community"""
  unpublishShare(
    """Sets access level for external users"""
    publicAccessLevel: PublicAccessLevel!
    """Enables commenting for external users"""
    publicCommentsEnabled: Boolean!
    """Enables inspector for external users"""
    publicInspectEnabled: Boolean!
    """The identifier of the share you want to unpublish"""
    shareIdentifier: UUID!
  ): UnpublishShareResponse
  """Unresolve an annotation"""
  unresolveAnnotation(
    """Annotation identifier"""
    annotationIdentifier: UUID!
  ): UnresolveAnnotationResponse!
  """Update seats"""
  updateBillingSeats(
    """Update seats parameters"""
    input: UpdateBillingSeatsParams!
  ): UpdateBillingSeatsResponse!
  """Update a design system"""
  updateDesignSystem(
    """Identifier of the design system to be updated"""
    identifier: UUID!
    """New attributes of Design System to be updated"""
    input: UpdateDesignSystemInput!
  ): DesignSystem!
  """Update a design system documentation page"""
  updateDesignSystemPage(
    """Save regardless of any changes by other users"""
    forceUpdate: Boolean
    """Identifier of the design system page to be updated"""
    identifier: UUID!
    """New attributes of the page"""
    input: UpdateDesignSystemPageInput!
  ): DesignSystemPage!
  """Update a single notification"""
  updateNotification(
    """Identifier"""
    identifier: UUID!
    """Input object for notifications"""
    input: NotificationInput!
  ): NotificationUpdatedPayload
  """
  Update the subscription settings for a given artboard, share or discussion.
  
  Only one of either share, artboard or discussion identifiers must be provided.
  """
  updateNotificationSubscription(
    """Artboard identifier"""
    artboardIdentifier: UUID
    """Discussion identifier"""
    discussionIdentifier: UUID
    """Input object for subscriptions"""
    input: SubscriptionInput!
    """Share identifier"""
    shareIdentifier: UUID
  ): NotificationSubscriptionUpdatedPayload @deprecated(reason: "Use `setNotificationSubscription` instead.")
  """
  Update multiple notifications at once.
  
  If the user does not have access to any notification, or if any update to any notification
  fails, then all updates will be rolled back and none will be made.
  """
  updateNotifications(
    """Identifiers of notifications to update"""
    identifiers: [UUID!]!
    """Input object for notifications"""
    input: NotificationInput!
  ): NotificationsUpdatedPayload
  """Update a permission group"""
  updatePermissionGroup(
    """The input param to update a permission group"""
    input: UpdatePermissionGroupParams!
  ): UpdatePermissionGroupResponse!
  """
  Update a permission group relation.
  
  Deprecated, please use updatePermissionGroupRelation instead
  """
  updatePermissionGroupRelation(
    """The input param to update a permission group relation"""
    input: UpdatePermissionGroupRelationParams!
  ): UpdatePermissionGroupRelationResponse!
  """Update project's properties"""
  updateProject(
    """
    Description of the project.
    
    Description cannot be longer than 255 characters.
    """
    description: String
    """Project identifier"""
    identifier: UUID!
    """New project name"""
    name: String
  ): UpdateProjectResponse!
  """Update a project membership"""
  updateProjectMembership(
    """Indicate if the guest can comment shares"""
    guestCommentsEnabled: Boolean
    """Indicate if the guest can inspect or download shares"""
    guestInspectEnabled: Boolean
    """Project membership identifier to update"""
    identifier: UUID!
  ): UpdateProjectMembershipResponse!
  """Update a project workspace access level"""
  updateProjectPermission(
    """Project identifier"""
    projectIdentifier: UUID!
    """Workspace access level of the project"""
    workspaceAccessLevel: ProjectWorkspaceAccessLevel!
  ): UpdateProjectPermissionResponse!
  """Set the value of restricted public links on the workspace"""
  updateRestrictedPublicLinks(
    """updateRestrictedPublicLink parameters"""
    input: UpdateRestrictedPublicLinksParams!
  ): UpdateRestrictedPublicLinksResponse!
  """Update restricted uploads state"""
  updateRestrictedUploadsState(
    """Update restricted uploads state"""
    input: UpdateRestrictedUploadsStateParams!
  ): UpdateRestrictedUploadsStateResponse!
  """
  Updates a share membership
  
  In case of a guest, guestCommentsEnabled and guestInspectEnabled params can be used
  to allow or prevent guest to inspect of comment the share.
  """
  updateShareMembership(
    """mutation input"""
    input: UpdateShareMembershipParams!
  ): UpdateShareMembershipResponse!
  """Update share's parent (workspace or project) permissions"""
  updateShareParentPermissions(
    """Mutation parameters input permissions you want to update"""
    input: UpdateShareParentPermissionsParams!
  ): Share
  """Update a share permission group relation"""
  updateSharePermissionGroupRelation(
    """Update access level"""
    accessLevel: PrivateAccessLevel!
    """Identifier of relation to update"""
    relationIdentifier: UUID!
  ): UpdateSharePermissionGroupRelationResponse!
  """Update share public permissions"""
  updateSharePublicPermissions(
    """updateSharePublicPermission input parameters"""
    input: UpdateSharePublicPermissionsParams!
  ): Share
  """Update preferences of the user"""
  updateUserPreferences(
    """Show onboarding first steps to user"""
    showOnboardingFirstSteps: Boolean
    """Show modal with info about new 50Gb storage limit"""
    showStorageLimitChanges: Boolean
  ): UpdateUserPreferencesResponse!
  """Update the description of share's version"""
  updateVersionDescription(
    """New description for version"""
    description: String!
    """Share identifier"""
    shareIdentifier: UUID!
    """Version identifier"""
    versionIdentifier: UUID!
  ): Version
  """Update a workspace"""
  updateWorkspace(
    """Update workspace parameters"""
    input: UpdateWorkspaceParams!
  ): UpdateWorkspaceResponse!
  """Update the SSO attribute mappings for a given workspace customer"""
  updateWorkspaceCustomerSsoAttributeMapping(
    """The identifier of the customer you want to update the SSO attribute mappings for"""
    customerIdentifier: UUID!
    """
    The identifier of the customer that you want to update, and the
    new attribute mapping values
    """
    mappings: UpdateWorkspaceCustomerSsoAttributeMappingParams!
  ): UpdateWorkspaceCustomerSsoAttributeMappingResponse!
  """Update the SSO identity provider config for a given workspace customer"""
  updateWorkspaceCustomerSsoIdentityProviderConfig(
    """Attribute mappings list"""
    config: UpdateWorkspaceCustomerSsoIdentityProviderConfigParams
    """The identifier of the customer you want to update the SSO identity provider of"""
    customerIdentifier: UUID!
    """Uploaded XML metadata file"""
    metadata: Upload
  ): UpdateWorkspaceCustomerSsoIdentityProviderConfigResponse!
  """Update the SSO short name for a given workspace customer"""
  updateWorkspaceCustomerSsoShortName(
    """The identifier of the customer that you want to change the SSO short name for"""
    customerIdentifier: UUID!
    """The short name you want to use when signing in via SSO for this customer's workspaces"""
    shortName: String!
  ): UpdateWorksapceCustomerSsoShortNameResponse!
  """Mutation for updating a workspace member"""
  updateWorkspaceMember(
    """Attributes to update"""
    input: UpdateWorkspaceMemberParams!
  ): UpdateWorkspaceMemberResponse!
  """Mutation for updating a workspace profile"""
  updateWorkspaceProfile(
    """Workspace Profile details"""
    input: UpdateWorkspaceProfileParams!
  ): UpdateWorkspaceProfileResponse!
  """Mutation for updating a workspace profile short URL"""
  updateWorkspaceProfileShortUrl(
    """Workspace Profile URL details"""
    input: UpdateWorkspaceProfileShortUrlParams!
  ): UpdateWorkspaceProfileShortUrlResponse!
  """Update a workspace security email"""
  updateWorkspaceSecurityEmail(
    """Update workspace security email parameters"""
    input: UpdateWorkspaceSecurityEmailParams!
  ): UpdateWorkspaceSecurityEmailResponse!
  """Upgrade a personal workspace to a standard one"""
  upgradePersonalWorkspace(
    """UpgradePersonalWorkspace parameters"""
    input: UpgradePersonalWorkspaceParams!
  ): UpgradePersonalWorkspaceResponse!
  """Accepts the TOS agreement and Privacy Policy"""
  userAcceptTosAgreement: UserAcceptTosAgreementPayload
  """Upload an avatar file"""
  userAvatarCreate(
    """Uploaded image file"""
    file: Upload!
  ): UserAvatarCreate
  """Delete avatar"""
  userAvatarDelete: UserAvatarDeletePayload
  """Delete user profile"""
  userDelete(
    """Password"""
    password: String!
  ): UserDeletePayload
  """Reset user's password"""
  userPasswordReset(
    """Input arguments"""
    input: UserPasswordResetParams!
  ): UserPasswordResetPayload
  """Update user password"""
  userPasswordUpdate(
    """Input arguments"""
    input: UserPasswordUpdateParams!
  ): UserPasswordUpdatePayload
  """Request password change"""
  userRequestPasswordReset(
    """User email"""
    email: String!
  ): UserRequestPasswordResetPayload
  """Update user profile"""
  userUpdate(
    """Input arguments"""
    input: UserParams
  ): UserUpdatePayload
  """Delete version"""
  versionDelete(
    """Version identifier"""
    versionIdentifier: UUID
  ): VersionDeletePayload
  """Update the kind of share's version"""
  versionUpdateKind(
    """New kind for share"""
    kind: Kind!
    """Version identifier"""
    versionIdentifier: UUID!
  ): Version
  """Returns an URL to download the CSV file"""
  workspaceMembersReport(
    """The workspace identifier"""
    workspaceIdentifier: UUID!
  ): WorkspaceMembersReportResponse!
}

type RootQueryType {
  """Check if an account exists"""
  accountExists(
    """Email address"""
    email: String!
  ): AccountExistsResponse!
  annotation(
    """Identifier of the annotation"""
    identifier: UUID
  ): Annotation
  annotations(
    after: String
    before: String
    """
    Flag determining whether to include unprocessed annotations in the list.
    Can be only set when querying for annotations for the whole document,
    without subject.
    """
    includeUnprocessed: Boolean = false
    limit: Int = 20
    shareIdentifier: UUID!
    sortOrder: AnnotationSortOrder = LATEST_FIRST
    """Only show annotations having particular resolution status, or all."""
    status: AnnotationStatusFilter = ACTIVE_ONLY
    subject: AnnotationSubjectInput
    subjects: [AnnotationSubjectInput]
  ): Annotations!
  artboard(
    documentVersionShortId: ShortId
    fetchLatestVersion: Boolean = true
    permanentArtboardId: String
    permanentArtboardShortId: ShortId
    revisionId: ShortId
    """The UUID of the Share under which this artboard belongs."""
    shareIdentifier: UUID!
    shortId: ShortId
  ): Artboard
  """Get the latest version of an artboard via its UUID"""
  artboardInDocumentWithUuid(
    """The ID of the document whose scope we want to limit the artboard lookup to"""
    documentId: String!
    """The UUID (do_objectID) of this artboard within the Sketch document model data"""
    uuid: String!
  ): Artboard
  artboardRevisions(after: String, before: String, limit: Int = 20, permanentArtboardId: ID!, shareIdentifier: UUID!): ArtboardRevisions! @deprecated(reason: "Use `Frame.revisions` query instead")
  """Get the latest version of a component via its UUID"""
  componentInDocumentWithUuid(
    """The ID of the document whose scope we want to limit the component lookup to"""
    documentId: UUID!
    """The UUID (do_objectID) of this component within the Sketch document model data"""
    uuid: String!
  ): Component!
  curatedSketchLibraries(
    after: String
    before: String
    limit: Int = 20
    """Curated libraries search input."""
    search: CuratedSketchLibrarySearchInput
  ): Shares!
  curatedSketchTemplates(
    after: String
    before: String
    limit: Int = 20
    """Curated templates search input."""
    search: CuratedSketchTemplateSearchInput
  ): Shares!
  curatedThirdPartyLibraries(
    after: String
    before: String
    limit: Int = 20
    """Curated libraries search input."""
    search: CuratedThirdPartyLibrarySearchInput
  ): Shares!
  """Get a design system by its identifier"""
  designSystem(
    """Identifier of the design system"""
    identifier: UUID!
  ): DesignSystem!
  """List of shares that can be added to design systems"""
  designSystemEligibleShares(
    after: String
    before: String
    limit: Int = 20
    """Available params for searching shares of this workspace"""
    search: SharesSearchParams
    """Workspace from which shares will be returned"""
    workspaceIdentifier: UUID!
  ): Shares!
  """Get a design system page by its identifier"""
  designSystemPage(
    """Identifier of the design system page"""
    identifier: UUID!
  ): DesignSystemPage!
  documentUploadParts(documentId: UUID!, multipartSessionTicket: String!, parts: [Int]!): MultipartUpload
  frame(
    documentVersionShortId: ShortId
    """The UUID of the Share under which this frame belongs."""
    shareIdentifier: UUID!
    uuid: String
  ): FrameGroup
  """Get the public workspace info corresponding to the membership in the invite token"""
  getPublicWorkspaceFromToken(membershipToken: String!): PublicWorkspace!
  """Fetch the inspector JSON data. Pass in either a page_id or an artboard_id."""
  inspectorData(
    """The UUID of the artboard. If this is used then the page_id can be left out."""
    artboardId: UUID
    """
    The UUID of a component. If this is used then the artboard_id and
              page_id must be left out.
    """
    componentId: UUID
    """The UUID of the page. If this is used then the artboard_id can be left out."""
    pageId: UUID
  ): InspectorDataPayload
  invitableUsers(
    after: String
    before: String
    limit: Int = 20
    """Project members will be filtered out from the list if provided"""
    projectIdentifier: UUID
    """Search users by name or email"""
    search: String
    """Share members will be filtered out from the list if provided"""
    shareIdentifier: UUID
    """The identifier of the workspace"""
    workspaceIdentifier: UUID!
  ): WorkspaceMemberships! @deprecated(reason: "Use `invitableUsersAndGroups` query instead")
  invitableUsersAndGroups(
    """Number of results per entity"""
    limit: Int = 3
    """Project members will be filtered out from the list if provided"""
    projectIdentifier: UUID
    """Search users by name or email"""
    search: String
    """Share members will be filtered out from the list if provided"""
    shareIdentifier: UUID
    """The identifier of the workspace"""
    workspaceIdentifier: UUID!
  ): [InvitableUserOrPermissionGroup!]!
  invitableUsersForPermissionGroup(
    after: String
    before: String
    limit: Int = 20
    """If provided, the members of the permission group will be excluded from the result"""
    permissionGroupIdentifier: UUID
    """Search users by name or email"""
    search: String
    """The identifier of the workspace"""
    workspaceIdentifier: UUID!
  ): WorkspaceMemberships!
  invitableUsersForProject(
    after: String
    before: String
    limit: Int = 20
    """If provided, the members of the project will be excluded from the result"""
    projectIdentifier: UUID
    """Search users by name or email"""
    search: String
    """The identifier of the workspace"""
    workspaceIdentifier: UUID!
  ): WorkspaceMemberships! @deprecated(reason: "Use `invitableUsersAndGroups` query instead")
  me: User!
  organization(customerId: ID, id: ID, shortId: ShortId): Organization! @deprecated(reason: "Use workspace instead")
  """Partner"""
  partner(
    """Partner email"""
    email: String!
  ): Partner
  """Get a pending workspace membership by the invite token"""
  pendingWorkspaceMembership(membershipToken: String!): PublicWorkspaceMembership!
  """Fetch one permission group from the identifier"""
  permissionGroup(
    """The identifier of the permission group"""
    identifier: UUID!
  ): PermissionGroup!
  """[WILL BE REMOVED] Legacy plans"""
  plans: Plans!
  """Get a preview by its identifier"""
  preview(
    """Identifier of the preview"""
    identifier: UUID!
  ): Preview!
  project(
    """The identifier of the project you want to retrieve"""
    identifier: UUID
  ): Project!
  projectMembership(
    """Token belonging to a project invite."""
    token: String!
  ): PublicProjectMembership
  publicOrganization(id: UUID): PublicOrganization @deprecated(reason: "Use `publicWorkspace` query instead")
  publicWorkspace(identifier: UUID): PublicWorkspace!
  publication(identifier: UUID!): Publication!
  """List of all publications from public workspace profiles with pagination info."""
  publications(
    after: String
    before: String
    """List of publication identifiers to exclude from the results."""
    exclude: [UUID!]! = []
    """Include only those publications whose identifiers are present in the list."""
    include: [UUID!]
    limit: Int = 20
    """Available params for searching all public workspace profiles' publications."""
    search: PublicationsSearchParams
    """Publications sort order"""
    sortOrder: PublicationSortOrder! = MOST_REACTED_DESC
  ): Publications!
  share(id: UUID, shortId: ShortId): Share
  """Get a Share via a document's UUID"""
  shareForDocumentWithUuid(
    """
    The name of this document. This is required as UUIDs are not unique within
      the sketch model JSON. (Eg a doc was duplicated on a users file system)
    """
    name: String!
    """The UUID (do_objectID) of this document within the Sketch document model data"""
    uuid: String!
  ): Share
  shareMembership(
    """
    The short id of the share of which the currently signed in user has a
      pending membership invite.
    """
    shareShortId: ShortId
    token: String
  ): ShareMembership
  """Request a URL to authentication against a known provider"""
  socialSigninStartUrl(
    """The authentication provider"""
    provider: SocialSigninProvider!
  ): SocialSigninStartUrlPayload!
  """Request SSO redirect URL for a given team"""
  ssoStartUrl(
    """Team name"""
    teamName: String!
  ): SsoStartPayload!
  """Get a workspace by its identifier"""
  workspace(identifier: UUID!): Workspace!
  workspaceCustomer(identifier: UUID!): WorkspaceCustomer!
  """Get the heaviest shares in the workspace"""
  workspaceHeaviestShares(
    """The workspace identifier"""
    identifier: UUID!
  ): [ShareWithSize!]
  workspaceProfile(shortUrlName: String, workspaceIdentifier: UUID): WorkspaceProfile!
  """Get the storage information for the workspace"""
  workspaceStorage(
    """The workspace identifier"""
    identifier: UUID!
  ): WorkspaceStorage
  """Get the list of transfer destinations for a workspace"""
  workspaceTransferDestinations(
    after: String
    before: String
    limit: Int = 20
    """Available params for searching transfer destinations."""
    search: TransferDestinationSearchParams
    """Workspace identifier"""
    workspaceIdentifier: UUID!
  ): TransferDestinations!
  """Get the list of trashed items for a workspace"""
  workspaceTrash(
    after: String
    before: String
    """Workspace identifier"""
    identifier: UUID!
    """
    If true, trashed storage items from all nested levels of the project will be included.
    Otherwise, only direct children will be included.
    """
    includeAllNestedLevels: Boolean! = false
    limit: Int = 20
    """Available params for searching trash items in this workspace"""
    search: TrashSearchParams
  ): TrashedItems!
}

type RootSubscriptionType {
  """Subscription that fires whenever a new annotation is created."""
  annotationCreated(
    """
    Flag determining whether to include unprocessed annotation events.
    Has effect only when subscribing to `shareIdentifier` alone, without
    `subject`. Defaults to `false`.
    """
    includeUnprocessed: Boolean = false
    """Share identifier"""
    shareIdentifier: UUID!
    """Information about the subject of the annotation, which can be component, artboard, or page"""
    subject: AnnotationSubjectInput
  ): Annotation!
  """Subscription that fires whenever an annotation is deleted."""
  annotationDeleted(
    """Annotation identifier"""
    annotationIdentifier: UUID
    """
    Flag determining whether to include unprocessed annotation events.
    Has effect only when subscribing to `shareIdentifier` alone, without
    `subject`. Defaults to `false`.
    """
    includeUnprocessed: Boolean = false
    """Share identifier"""
    shareIdentifier: UUID
    """Information about the subject of the annotation, which can be component, artboard, or page"""
    subject: AnnotationSubjectInput
  ): AnnotationDeletedEvent!
  """Subscription that fires whenever an annotation is moved."""
  annotationMoved(
    """
    Flag determining whether to include unprocessed annotation events.
    Has effect only when subscribing to `shareIdentifier` alone, without
    `subject`. Defaults to `false`.
    """
    includeUnprocessed: Boolean = false
    """Share identifier"""
    shareIdentifier: UUID!
    """Information about the subject of the annotation, which can be component, artboard, or page"""
    subject: AnnotationSubjectInput
  ): Annotation!
  """Subscription that fires whenever a reply to an annotation is created."""
  annotationReplyCreated(
    """Annotation identifier"""
    annotationIdentifier: UUID
    """
    Flag determining whether to include unprocessed annotation events.
    Has effect only when subscribing to `shareIdentifier` alone, without
    `subject`. Defaults to `false`.
    """
    includeUnprocessed: Boolean = false
    """Share identifier"""
    shareIdentifier: UUID
    """Information about the subject of the annotation, which can be component, artboard, or page"""
    subject: AnnotationSubjectInput
  ): Comment!
  """Subscription that fires whenever an annotation reply is deleted."""
  annotationReplyDeleted(
    """Annotation identifier"""
    annotationIdentifier: UUID
    """
    Flag determining whether to include unprocessed annotation events.
    Has effect only when subscribing to `shareIdentifier` alone, without
    `subject`. Defaults to `false`.
    """
    includeUnprocessed: Boolean = false
    """Share identifier"""
    shareIdentifier: UUID
    """Information about the subject of the annotation, which can be component, artboard, or page"""
    subject: AnnotationSubjectInput
  ): Comment!
  """Subscription that fires whenever an annotation is resolved."""
  annotationResolved(
    """Annotation identifier"""
    annotationIdentifier: UUID
    """
    Flag determining whether to include unprocessed annotation events.
    Has effect only when subscribing to `shareIdentifier` alone, without
    `subject`. Defaults to `false`.
    """
    includeUnprocessed: Boolean = false
    """Share identifier"""
    shareIdentifier: UUID
    """Information about the subject of the annotation, which can be component, artboard, or page"""
    subject: AnnotationSubjectInput
  ): Annotation!
  """Subscription that fires whenever an annotation is unresolved."""
  annotationUnresolved(
    """Annotation identifier"""
    annotationIdentifier: UUID
    """
    Flag determining whether to include unprocessed annotation events.
    Has effect only when subscribing to `shareIdentifier` alone, without
    `subject`. Defaults to `false`.
    """
    includeUnprocessed: Boolean = false
    """Share identifier"""
    shareIdentifier: UUID
    """Information about the subject of the annotation, which can be component, artboard, or page"""
    subject: AnnotationSubjectInput
  ): Annotation!
  """
  A subscription for changes to Collections in a Project.
  
  Clients can use this to subscribe to `CollectionChangedEvents` for a
  given Project.
  """
  collectionChanged(
    """The identifier of the Project that you are subscribing to."""
    projectIdentifier: UUID!
  ): CollectionChangedEvent!
  """
  A subscription for newly created Collections within a Project.
  
  Clients can use this to subscribe to `CollectionCreatedEvents` for a
  given Project.
  """
  collectionCreated(
    """The identifier of the Project that you are subscribing to."""
    projectIdentifier: UUID!
  ): CollectionCreatedEvent!
  """
  A subscription to keep track of Collections being deleted within a
  Project.
  """
  collectionDeleted(
    """The identifier of the Project that you are subscribing to."""
    projectIdentifier: UUID!
  ): CollectionDeletedEvent!
  """Subscription that fires whenever a comment is edited."""
  commentEdited(
    """Annotation identifier"""
    annotationIdentifier: UUID
    """
    Flag determining whether to include unprocessed annotation events.
    Has effect only when subscribing to `shareIdentifier` alone, without
    `subject`. Defaults to `false`.
    """
    includeUnprocessed: Boolean = false
    """Share identifier"""
    shareIdentifier: UUID
    """Information about the subject of the annotation, which can be component, artboard, or page"""
    subject: AnnotationSubjectInput
  ): Comment!
  """Subscription that fires whenever a comments are marked as read."""
  commentsMarkedAsRead(
    """Annotation identifier"""
    annotationIdentifier: UUID
    """
    Flag determining whether to include unprocessed annotation events.
    Has effect only when subscribing to `shareIdentifier` alone, without
    `subject`. Defaults to `false`.
    """
    includeUnprocessed: Boolean = false
    """Share identifier"""
    shareIdentifier: UUID
    """Information about the subject of the annotation, which can be component, artboard, or page"""
    subject: AnnotationSubjectInput
  ): [Comment]!
  """
  A subscription for events of permanently deleting a trashed share
    (Deprecated) Use the shareUpdated subscription
  """
  deletedSharePermanently: DeletedSharePermanentlyEvent!
  """A subscription for events of workspace trash emptying"""
  emptiedWorkspaceTrash: EmptiedWorkspaceTrashEvent!
  """Notification created"""
  notificationCreated: UserNotification
  """
  Triggered when access to a project (project membership)
  changes for the current user.
  """
  projectAccessChanged: BaseProjectAccessChangedEvent!
  """
  Triggered whenever anything changes about a project
  belonging to a workspace current user is member of.
  """
  projectChanged: BaseProjectChangedEvent!
  """
  A subscription for changes to reactions of a Publication.
  
  Clients can use this to subscribe to `PublicationReactionsUpdatedEvents` for a
  given Publication.
  """
  publicationReactionsUpdated(
    """The identifier of the Publication that you are subscribing to."""
    publicationIdentifier: UUID!
  ): PublicationReactionsUpdatedEvent!
  """A subscription that fires when a document is processed and revisions are created"""
  revisionCreated(
    """Permanent Artboard Short ID"""
    permanentArtboardShortId: String!
  ): Revision!
  """A subscription that fires when a version deletion results with revision deletion"""
  revisionDeleted(
    """Permanent Artboard Short ID"""
    permanentArtboardShortId: String!
  ): RevisionDeleted!
  """A subscription that fires when a version deletion results with revision update"""
  revisionMoved(
    """Permanent Artboard Short ID"""
    permanentArtboardShortId: String!
  ): RevisionMovedEvent!
  """
  Triggered whenever anything changes about a share
  belonging to a workspace current user is member of.
  """
  shareChanged: BaseShareChangedEvent!
  """
  A subscription to keep track of Shares being added to and removed from
  Collections within a Project.
  
  Events are published in the following scenarios:
  
  - When a new Collection is created that contains Shares.
  - When a Share is added to a Collection.
  - When a Share is removed from a Collection.
  - When a Collection that contains Shares is deleted.
  - When a Share is moved to a different Project, which has the side effect
    of removing it from its current Collection in its original Project
  
  An event is published for each affected Share.
  """
  shareCollectionChanged(
    """The identifier of the Project that you are subscribing to."""
    projectIdentifier: UUID!
  ): ShareCollectionChangedEvent!
  """
  A subscription for events of moving share to trash
    (Deprecated) Use the shareUpdated subscription
  """
  shareDeleted: ShareDeletedEvent!
  """Triggered whenever anything changes about a share membership."""
  shareMembershipChanged: ShareMembershipChangedEvent!
  """
  A subscription for events of restoring shares from trash
    (Deprecated) Use the shareUpdated subscription
  """
  shareRestored: ShareRestoredEvent!
  """A subscription that fires when a version of a share is deleted"""
  versionDeleted(
    """(Optional) share identifier"""
    shareIdentifier: UUID
  ): VersionDeletedEvent!
  """
  A subscription that fires when a share version has been updated.
  
    If a shareIdentifier is given then the client is subscribed to a topic just for that
    given share. If no shareIdentifier is given then the client is subscribed to a topic
    that publishes messages for every share that the current logged-in user has access to
    at the time the subscription is fired and not at the time the subscription is created.
  """
  versionUpdated(
    """(Optional) share identifier"""
    shareIdentifier: UUID
  ): Version!
  """
  A subscription that fires when a new share version has been uploaded successfully.
  
    If a shareIdentifier is given then the client is subscribed to a topic just for that
    given share. If no shareIdentifier is given then the client is subscribed to a topic
    that publishes messages for every share that the current logged-in user has access to
    at the time the subscription is fired and not at the time the subscription is created.
  """
  versionUploadComplete(
    """(Optional)  Filter versions user is subscribed to"""
    preferredState: VersionSubscriptionStateFilter
    """(Optional) share identifier"""
    shareIdentifier: UUID
  ): Share!
  """
  A subscription that fires when a share version has been processed successfully.
  
  If a shareIdentifier is given then the client is subscribed to a topic just for that
  given share. If no shareIdentifier is given then the client is subscribed to a topic
  that publishes messages for every share that the current logged-in user has access to
  at the time the subscription is fired and not at the time the subscription is created.
  """
  versionUploadProcessed(
    """(Optional)  Filter versions user is subscribed to"""
    preferredState: VersionSubscriptionStateFilter
    """(Optional) share identifier"""
    shareIdentifier: UUID
  ): Share!
  """
  Triggered whenever anything about workspace changes
  current user is a member of one of the workspaces belonging to said customer
  """
  workspaceChanged: WorkspaceChangedEvent!
  """
  Triggered whenever a customer's subscription is updated/changes and the
  current user is a member of one of the workspaces belonging to said customer
  """
  workspaceCustomerSubscriptionUpdated: WorkspaceCustomerSubscriptionUpdatedEvent! @deprecated(reason: "Use workspaceChanged instead if you need to track any change affecting workspace")
  """Triggered whenever a workspace membership is updated or deleted"""
  workspaceMembershipUpdated: WorkspaceMembershipUpdatedEvent!
}

"""Configuration for a single SAML attribute"""
type SamlAttribute {
  """Attribute name"""
  mapping: String
  """Update value on each login"""
  updateOnLogin: Boolean!
}

"""
SCIM personal access tokens are used to authenticate requests to the SCIM
API.

Personal tokens are used in place of `username:password`, offering the same
level of access. As such they should be treated like passwords and kept
securely.
"""
type ScimPersonalAccessToken {
  """The access scopes that this token is permitted to use."""
  accessScopes: [ScimApiAccessScope!]!
  """The time at which the token was created."""
  createdAt: DateTime!
  """
  A description of the token's purpose.
  
  This can be useful for identifying the token later.
  """
  description: String!
  """
  Optional expiration date for the token. This field can be set when
  creating the token. If set, the token is no longer valid when
  `expires_at` is in the past.
  """
  expiresAt: DateTime
  """
  An identifier for this token. The identifier is supplied along with the
  raw token value when authenticating requests.
  """
  identifier: String!
  """
  The time at which the token was last used to interact with the Public API.
  
  This field is nullable as the token may not have been used yet.
  """
  lastUsedAt: DateTime
}

"""API response for sendDownloadSketchEMail"""
type SendDownloadSketchEmailResponse {
  """Whether or not the email was sent"""
  sent: Boolean!
}

"""OAuth session"""
type Session {
  """Country Code"""
  countryCode: String
  """Device Name"""
  deviceName: String
  """Unique identifier"""
  id: String!
  """IP Address"""
  ipAddress: String
  """Whether it's the session used to make the query or not"""
  isCurrentOne: Boolean
  """The date and time the session had last activity"""
  lastUpdateAt: DateTime
  """Session type (WEB, MAC-APP)"""
  type: SessionType
  """User Agent"""
  userAgent: String
}

"""List of OAuth sessions"""
type Sessions {
  """Paginated OAuth sessions"""
  entries: [Session]
  """Pagination information"""
  meta: PaginationMeta!
}

"""
API response for setNotificationSubscription mutation.

Only resource fields respective for the resource the subscription is set for
and its parents are populated. That means:

* for share, only `share` is non-empty
* for artboard, `artboard` and `share` are non-empty
* for annotation, all three are non-empty
"""
type SetNotificationSubscriptionResponse {
  """Annotation resource"""
  annotation: Annotation
  """Artboard resource"""
  artboard: Artboard @deprecated(reason: "use `frame` instead")
  """FrameGroup resource"""
  frame: FrameGroup
  """Share resource"""
  share: Share
}

"""API response for setupMfa"""
type SetupMfaResponse {
  """URI for a TOTP generator app"""
  otpAuthUri: String!
}

"""A Share/Cloud Document"""
type Share implements StorageItem {
  """Allowed Parent Access Levels"""
  allowedParentAccessLevels: [ParentAccessLevel!]!
  """Allowed Private Access Levels"""
  allowedPrivateAccessLevels: [PrivateAccessLevel!]! @deprecated(reason: "This field will always return all 3 levels: VIEW, INSPECT, EDIT")
  """(Deprecated) Allowed Workspace Access Levels"""
  allowedWorkspaceAccessLevels: [WorkspaceAccessLevel!]! @deprecated(reason: "use allowedParentAccessLevels instead")
  """Date and time in which the share was archived"""
  archivedAt: DateTime
  """Artboard UUID from its short ID"""
  artboard(
    """The permanent shortId of the artboard you want to look up"""
    permanentId: ShortId
    """If set, returns `nil`"""
    shareQuery: Boolean
    """The shortId of the artboard you want to look up"""
    shortId: ShortId
  ): Artboard
  """Whether or not the share belongs to a Workspace"""
  belongsToTeam: Boolean @deprecated(reason: "All shares belong to a workspace so this field will always be true")
  """
  The Collection that this Share belongs to.
  
  Null if the Share does not belong to any collection
  """
  collection: Collection
  """Whether or not the current user can comment on the share"""
  commentsEnabled: Boolean!
  """The date and time the Share was created"""
  createdAt: DateTime
  """The curated category (project name) for curated templates and libraries, null otherwise"""
  curatedCategory: String
  """The current version of this Share"""
  currentVersion: Version @deprecated(reason: "Replaced by Share.version")
  """The data and time the Share was added to the trash"""
  deletedAt: DateTime
  """The share's description"""
  description: String
  """Design systems the share is part of"""
  designSystems(
    """Maximum number of design system to be returned."""
    limit: Int! = 10
  ): [DesignSystem!]!
  """Whether or not downloading the document is enabled"""
  downloadEnabled: Boolean! @deprecated(reason: "(Deprecated) Please migrate to userCanInspect")
  """(Deprecated) User identifier instead"""
  id: String @deprecated(reason: "Use identifier instead.")
  """The identifier of the Share"""
  identifier: UUID!
  """
  Lists invitable users for given share. Invitable users are all team members -
  permanent or guest users.
  """
  invitableUsers(
    after: String
    before: String
    limit: Int = 20
    """Search term to filter invitable users against"""
    search: String
  ): WorkspaceMembers
  """Determines whether the share belongs in a draft folder or not"""
  isDraft: Boolean!
  """(Deprecated) Please migrate to publicAccessLevel"""
  isPrivate: Boolean @deprecated(reason: "Please migrate to publicAccessLevel")
  """Whether or not this Share has been shared with other people"""
  isShared: Boolean!
  """Determines whether or not is accessible by someone external to the workspace"""
  isSharedWithGuests: Boolean!
  """Identifier of share's latest processed version."""
  latestVersionIdentifier: UUID
  """(Deprecated) Please migrate to shareType."""
  libraryEnabled: Boolean! @deprecated(reason: "Please migrate to type")
  """If set, this field contains the license agreement for this document"""
  licenseAgreement: ShareLicenseAgreement
  """List of members of this share."""
  members(after: String, before: String, limit: Int = 20): ShareMembershipPaginationItems!
  """
  Lists share memberships, this is only visible for people who
  can administer this share or are members.
  """
  memberships(
    after: String
    before: String
    """The filter to apply. This defines the meaning of the search value"""
    filter: ShareMembershipFilterType
    limit: Int = 20
    """Search term to filter memberships against"""
    search: String
  ): ShareMemberships
  """
  Returns list of mentionable users for a given `share`
  
  The list of mentionable users is determined by the current user's
  relationship with the share:
  
  - For a public share, external users (those without a membership) can mention
  anyone who has previously commented on the share and still has comment access
  - For all other shares, members can mention anyone with comment access to the
  share.
  
  The list of mentionable users is sorted alphabetically by name. For
  mentionable SSO users, the name from their external identity is used.
  """
  mentionableUsers: [MentionableUser!]!
  """The membership of the current logged user or nil if there isn't one."""
  myMembership: ShareMembership
  """The share's name"""
  name: String!
  """
  The owner of the Share.
  A Share is always owned by a Workspace (`PublicOrganization`),
  but we return a User (`PublicUser`) if workspace is personal for retrocompatibility issues.
  """
  owner: ShareOwner @deprecated(reason: "Use Share.workspace instead.")
  """Find a page within a share"""
  page(
    """
    The identifier of the page you want to find.
    
    Page.identifier uniquely identifies a version of a page, so searching
    by identifier is not restricted to the latest version of a share as
    slug is.
    """
    identifier: UUID
    """If set, returns `nil`"""
    shareQuery: Boolean
    """
    The slug of the page you want to find.
    
    Searching by slug is scoped to the latest version of the share
    """
    slug: String
  ): Page
  """
  Parent Access Level.
    It indicates the access level that workspace members (without a share membership)
    have for this share.
  """
  parentAccessLevel: ParentAccessLevel!
  """Whether or not comments are enabled for workspace members"""
  parentCommentsEnabled: Boolean! @deprecated(reason: "(Deprecated) Use shareMembership.guestCommentsEnabled instead")
  """
  Lists share memberships, this is only visible for people who
  can administer this share or are members.
  """
  permissionGroupRelations(
    after: String
    before: String
    limit: Int = 20
    """Search term to filter memberships against"""
    search: String
  ): PermissionGroupRelationShares!
  """If current user pinned the share, this field will have the date when it was pinned"""
  pinnedByCurrentUserAt: DateTime
  """(Deprecated) The preview images for this Share"""
  previewFiles(
    """The scale of the image (Retina or not)"""
    scale: Int
    """The file type of the preview image"""
    type: FileType
  ): [File] @deprecated(reason: "Use Version.previewFiles instead")
  """(Deprecated) Thumbnails of the `previewFiles`"""
  previewThumbnails: [Thumbnail] @deprecated(reason: "Use Version.previewThumbnails instead")
  """List of previews for this share"""
  previews: [Preview]!
  """(Deprecated) Please migrate to sharePrivacyIcon."""
  privacyIcon: SharePrivacyIconType! @deprecated(reason: "Use sharePrivacyIcon instead.")
  """The project this Share belongs to"""
  project: Project
  """Public Access Level"""
  publicAccessLevel: PublicAccessLevel!
  """Whether or not comments are enabled"""
  publicCommentsEnabled: Boolean!
  """Whether or not inspect is enabled for public users"""
  publicInspectEnabled: Boolean!
  """Whether or not the public (via a url) export of tokens is enabled"""
  publicTokenExport: PublicTokenExport
  """Public available URL for retriving design tokens"""
  publicTokenExportUrl(
    """
    Color format to use. Only applicable to CSS and Amazon
            export formats.
    """
    colorFormat: TokenColorFormat
    """Design Token format to use"""
    format: TokenExportFormat! = AMAZON
    """
    The types of Components to include in the export.
    
    Clients can control which Component types are exported using this
    argument.
    
    Defaults to [ColorVariable] which will export only color variables.
    """
    tokenTypes: [ExportableComponentType]! = [COLOR_VARIABLE]
  ): String
  """The Share's URL on Sketch Cloud"""
  publicUrl: String!
  """If NOT null, then share is published to the Community."""
  publication: Publication
  """Privacy icon type to show in the document card badge"""
  sharePrivacyIcon: SharePrivacyIconType!
  """The type of the share."""
  shareType: ShareType!
  """The shortId of the Share"""
  shortId: ShortId!
  """The subscription status for the current user for this artboard."""
  subscriptionStatus: NotificationSubscriptionStatus!
  """The template category (project name) for curated templates, null otherwise"""
  templateCategory: String @deprecated(reason: "User `curatedCategory` instead")
  """(Deprecated) Please migrate to shareType."""
  type: ShareType! @deprecated(reason: "Use shareType instead")
  """Count of unread discussion items pertaining to this Share"""
  unreadCount: Int
  """The date and time the Share was last updated"""
  updatedAt: DateTime
  """User access level"""
  userAccessLevel: UserAccessLevel!
  """Whether or not the current user can access older versions of this `Share`"""
  userCanAccessVersions: Boolean! @deprecated(reason: "Do not use. Use `versionTypeAvailableToUser` if you want to determine what\ntypes of versions a user can see.\n")
  """(Deprecated) Please migrate to userCanUpdateSettings"""
  userCanAdminister: Boolean! @deprecated(reason: "Please migrate to userCanUpdateSettings")
  """Whether or not the current user can contribute new versions of this `Share`"""
  userCanContribute: Boolean!
  """Determines whether the user has edit permission"""
  userCanEdit: Boolean!
  """Determines whether the user has permissions to inspect"""
  userCanInspect: Boolean!
  """
  Whether or not the current user can leave this `Share`.
  This property will be true for all workspace guests that can access the share,
  and drafts belonging to another user.
  """
  userCanLeaveShare: Boolean!
  """
  Whether or not the current user is authorised to publish this `Share`.
  Only system admins and workspace admins are allowed to manage publication of shares
  (with the exception of the ones put in private/draft projects,
  as even admins can't access them).
  """
  userCanPublish: Boolean!
  """
  Whether or not the current user is allowed to update publicCommentsEnabled
  of this `Share`.
  """
  userCanUpdateCommentsEnabled: Boolean!
  """
  Whether or not the current user is allowed to update parentAccessLevel and
  parentCommentsEnabled of this `Share`
  This will be always `false` for shares in personal workspaces.
  """
  userCanUpdateParentPermissions: Boolean!
  """
  Whether or not the current user is authorised to update this `Share`s settings.
  A user can update settings when the user owns it, or is an editor
  within the organization that owns the share.
  For example: Enabling Comments, Download, Inspector, etc.
  """
  userCanUpdateSettings: Boolean!
  """
  Whether or not the current user is allowed to update workspaceAccessLevel and
  parentCommentsEnabled of this `Share`
  This will be always `false` for shares in personal workspaces.
  """
  userCanUpdateWorkspacePermissions: Boolean! @deprecated(reason: "use userCanUpdateParentPermissions instead")
  """Whether or not the current user has accepted an invitiation to view this `Share`"""
  userHasAcceptedInvitationToView: Boolean! @deprecated(reason: "Do not use")
  """
  Whether or not the current user has a pending invitation to view this `Share`.
  Note that this will be `false` if the user was never invitied to view this `Share`.
  """
  userHasUnacceptedInvitationToView: Boolean!
  """Whether or not the current user has active share membership"""
  userIsMember: Boolean!
  """
  Whether or not the current user is the owner of this `Share`.
  If the `Share` is owned by a team this will always be `false`
  """
  userIsOwner: Boolean! @deprecated(reason: "Share can no longer be owned by users, only by workspaces")
  """Whether or not the current user is subscribed to updates for this `Share`"""
  userIsWatching: Boolean!
  """
  A version of this Share.
  If no `shortId` is provided, it falls back to the latest version of the Share
  with the given `preferred_state`.
  """
  version(
    """The identifier of the version you want to retrieve (Optional)"""
    id: UUID
    """
    The preferrerd status of the default value when no shortId has been provided.
    If not specified, the default will be `any`
    
    If a version with this render status is not found, the most recently created
    will be returned.
    """
    preferredState: PreferredVersionState = ANY
    """The shortId of the version you want to retreive. (Optional)"""
    shortId: ShortId
  ): Version
  """A list of all versions of this Share, including deleted versions"""
  versionHistory(
    after: String
    before: String
    """Types of entries to include in history listing"""
    include: [VersionHistoryItemType!]! = []
    limit: Int = 20
  ): VersionHistory!
  """Which versions (existing or future) can the current user access"""
  versionTypeAvailableToUser: ShareAvailableVersionType!
  """A list of all versions of this Share"""
  versions(after: String, before: String, limit: Int = 20): Versions
  """(Deprecated) Please migrate to userCanAccessVersions"""
  viewerCanAccessVersions: Boolean! @deprecated(reason: "Please migrate to userCanAccessVersions")
  """(Deprecated) Please migrate to userCanAdminister"""
  viewerCanAdminister: Boolean! @deprecated(reason: "Please migrate to userCanAdminister")
  """(Deprecated) Please migrate to userCanContribute"""
  viewerCanContribute: Boolean! @deprecated(reason: "Please migrate to userCanContribute")
  """(Deprecated) Please migrate to userCanUpdateSettings"""
  viewerCanUpdate: Boolean! @deprecated(reason: "Please migrate to userCanUpdateSettings")
  """(Deprecated) Please migrate to userHasUnacceptedInvitationToView"""
  viewerHasUnacceptedMembershipInvite: Boolean! @deprecated(reason: "Please migrate to userHasUnacceptedInvitationToView")
  """(Deprecated) Please migrate to userHasAcceptedInvitationToView"""
  viewerIsMember: Boolean! @deprecated(reason: "Please migrate to userHasAcceptedInvitationToView")
  """(Deprecated) Please migrate to userIsOwner"""
  viewerIsOwner: Boolean! @deprecated(reason: "Share can no longer be owned by users, only by workspaces")
  """(Deprecated) Please migrate to userIsWatching"""
  viewerIsWatching: Boolean! @deprecated(reason: "Please migrate to userIsWatching")
  """The public workspace which owns the Share"""
  workspace: PublicWorkspace!
  """
  Workspace Access Level.
    It indicates the access level that workspace members (without a share membership)
    have for this share.
  """
  workspaceAccessLevel: WorkspaceAccessLevel! @deprecated(reason: "use parentAccessLevel instead")
  """Whether or not workspace comments are enabled"""
  workspaceCommentsEnabled: Boolean! @deprecated(reason: "use parentCommentsEnabled instead")
}

"""Response when accepting a request to access a private share"""
type ShareAcceptRequestPayload {
  """A list of errors, raised when executing this migrations."""
  errors: [UserError]!
  membership: ShareMembership
  """Indicates whether the mutation completed successfully or not."""
  successful: Boolean!
}

"""Event that fires when the current user lost access to the share"""
type ShareAccessRevokedEvent implements BaseShareChangedEvent {
  """Share identifier"""
  shareIdentifier: UUID!
  """Explicit field to know the type of event"""
  type: String
  """Workspace"""
  workspace: Workspace!
}

"""An event that is broadcast whenever a Share is added to a Collection"""
type ShareAddedToCollectionEvent {
  """The Collection to which the Share has been added."""
  collection: Collection!
  """The identifier of the Project that the Collection belongs to."""
  projectIdentifier: UUID!
  """The Share that has been added to the Collection."""
  share: Share!
}

"""Event that fires when share is archived"""
type ShareArchivedEvent implements BaseShareChangedEvent {
  """Identifier of the project the share was before archiving"""
  oldProjectIdentifier: UUID
  """Archived share"""
  share: Share!
  """Share identifier"""
  shareIdentifier: UUID!
  """Explicit field to know the type of event"""
  type: String
  """Workspace"""
  workspace: Workspace!
}

"""Response when creating a new share"""
type ShareCreatePayload {
  document: Document
  """A list of errors, raised when executing this migrations."""
  errors: [UserError]!
  share: Share
  """Indicates whether the mutation completed successfully or not."""
  successful: Boolean!
  version: Version
}

"""Response when creating a new share version"""
type ShareCreateVersionPayload {
  document: Document
  """A list of errors, raised when executing this migrations."""
  errors: [UserError]!
  share: Share
  """Indicates whether the mutation completed successfully or not."""
  successful: Boolean!
  version: Version
}

"""Response when removing a member from a share"""
type ShareDeleteMembershipPayload {
  """A list of errors, raised when executing this migrations."""
  errors: [UserError]!
  membership: ShareMembership
  """Indicates whether the mutation completed successfully or not."""
  successful: Boolean!
}

"""Response when trashing a share"""
type ShareDeletePayload {
  """A list of errors, raised when executing this migrations."""
  errors: [UserError]!
  share: Share
  """Indicates whether the mutation completed successfully or not."""
  successful: Boolean!
}

"""Event that fires when share is added to trash"""
type ShareDeletedEvent implements BaseShareChangedEvent {
  """Deleted share"""
  share: Share!
  """Share identifier"""
  shareIdentifier: UUID!
  """Explicit field to know the type of event"""
  type: String
  """Workspace"""
  workspace: Workspace!
}

"""Event that fires when permanently deleting a trashed share"""
type ShareDeletedPermanentlyEvent implements BaseShareChangedEvent {
  """Share identifier"""
  shareIdentifier: UUID!
  """Explicit field to know the type of event"""
  type: String
  """Workspace"""
  workspace: Workspace!
}

"""Share Invite"""
type ShareInvite {
  """Email"""
  email: String
  """Identifier"""
  id: String @deprecated(reason: "Use identifier instead.")
  """Unique identifier"""
  identifier: UUID!
}

"""Response when leaving a share (membersh)"""
type ShareLeavePayload {
  """A list of errors, raised when executing this migrations."""
  errors: [UserError]!
  membership: ShareMembership
  share: Share
  """Indicates whether the mutation completed successfully or not."""
  successful: Boolean!
}

"""License agreement details"""
type ShareLicenseAgreement {
  """Content of the license agreement"""
  body: String!
  """The date and time that the license agreement was last updated"""
  updatedAt: DateTime!
}

"""Share Membership"""
type ShareMembership {
  """Accepted at timestamp"""
  acceptedAt: NaiveDateTime
  """The invited email, can be the user of the email or an email without an account yet"""
  email: String
  """
  Whether or not guest users are able to comment on the `Share`
  The value is irrelevant for workspace member as they will always have comment permission
  """
  guestCommentsEnabled: Boolean!
  """
  Whether or not guest users are able to comment on the `Share`
  The value is irrelevant for workspace member as they will always have inspect permission
  """
  guestInspectEnabled: Boolean!
  """Identifier"""
  id: String @deprecated(reason: "Use identifier instead.")
  """Unique identifier"""
  identifier: UUID!
  """Invite"""
  invite: ShareInvite
  """Invite status"""
  inviteStatus: InviteStatus
  """Inviter"""
  inviter: PublicUser
  """Private access level"""
  privateAccessLevel: PrivateAccessLevel!
  """Share"""
  share: Share
  """Whether or not the current user is allowed to update commentsEnabled for `Membership`."""
  userCanUpdateCommentsEnabled: Boolean!
  """WorkspaceMembership"""
  workspaceMembership: WorkspaceMembership
}

type ShareMembershipAcceptPayload {
  """A list of errors, raised when executing this migrations."""
  errors: [UserError]!
  membership: ShareMembership
  """Indicates whether the mutation completed successfully or not."""
  successful: Boolean!
}

"""This event is dispatched every time share membership changes."""
type ShareMembershipChangedEvent {
  """Share membership"""
  shareMembership: ShareMembership!
}

"""Paginated list of share membership pagination items"""
type ShareMembershipPaginationItems {
  """List of membership pagination items"""
  entries: [ShareMembershipPaginationItem!]!
  """Pagination information"""
  meta: PaginationMeta!
}

"""List of public members with pagination info"""
type ShareMemberships {
  """List of memberships"""
  entries: [ShareMembership!]!
  """Pagination metadata"""
  meta: PaginationMeta!
}

type ShareMoveResult {
  """A list of errors, raised when executing this migrations."""
  errors: [UserError]!
  project: Project
  share: Share
  """Indicates whether the mutation completed successfully or not."""
  successful: Boolean!
}

"""Event that fires when the share is moved to a project or removed from a project"""
type ShareProjectChangedEvent implements BaseShareChangedEvent {
  """Share"""
  share: Share!
  """Identifier of the affected share"""
  shareIdentifier: UUID!
  """Explicit field to know the type of event"""
  type: String
  """Workspace"""
  workspace: Workspace!
}

type ShareRemoveFromProjectResult {
  """A list of errors, raised when executing this migrations."""
  errors: [UserError]!
  project: Project
  share: Share
  """Indicates whether the mutation completed successfully or not."""
  successful: Boolean!
}

"""An event that is broadcast whenever a Share is removed from a Collection"""
type ShareRemovedFromCollectionEvent {
  """The Collection from which the Share has been removed."""
  collection: Collection!
  """
  The identifier of the Project that the Share has been moved to.
  
  The Share could be removed from a Collection, in which case it will
  automatically be moved tot he root of the Project that contains the
  Collection.
  
  It could also be moved to a different Project, which has the side effect
  of removing it from its current Collection.
  
  This field is nullable as the Share could be moved to no Project,
  returning it to the "All Documents" section of the Workspace.
  """
  destinationProjectIdentifier: UUID
  """The Share that has been removed from the Collection."""
  share: Share!
}

"""Response when requesting access to a private share"""
type ShareRequestAccessPayload {
  """A list of errors, raised when executing this migrations."""
  errors: [UserError]!
  membership: ShareMembership
  share: Share
  """Indicates whether the mutation completed successfully or not."""
  successful: Boolean!
}

"""Response when restoring a deleted share"""
type ShareRestorePayload {
  """A list of errors, raised when executing this migrations."""
  errors: [UserError]!
  share: Share
  """Indicates whether the mutation completed successfully or not."""
  successful: Boolean!
}

"""Event that fires when share is restored from trash"""
type ShareRestoredEvent implements BaseShareChangedEvent {
  """Restored share"""
  share: Share!
  """Share identifier"""
  shareIdentifier: UUID!
  """Explicit field to know the type of event"""
  type: String
  """Workspace"""
  workspace: Workspace!
}

"""Event that fires when share is transferred"""
type ShareTransferredEvent implements BaseShareChangedEvent {
  """Identifier of the project of the share before transferring"""
  oldProjectIdentifier: UUID
  """The source of the share before transferring."""
  oldSource: StorageItemSource
  """Identifier of the workspace of the share before transferring"""
  oldWorkspaceIdentifier: UUID!
  """Transferred share"""
  share: Share!
  """Share identifier"""
  shareIdentifier: UUID!
  """Explicit field to know the type of event"""
  type: String
  """Workspace of the share"""
  workspace: Workspace!
}

"""Response when unwatching a share"""
type ShareUnwatchPayload {
  """A list of errors, raised when executing this migrations."""
  errors: [UserError]!
  share: Share
  """Indicates whether the mutation completed successfully or not."""
  successful: Boolean!
}

"""Response when updating a share"""
type ShareUpdatePayload {
  """A list of errors, raised when executing this migrations."""
  errors: [UserError]!
  share: Share
  """Indicates whether the mutation completed successfully or not."""
  successful: Boolean!
}

"""Event fired when share is updated"""
type ShareUpdatedEvent implements BaseShareChangedEvent {
  """Updated share"""
  share: Share!
  """Identifier of the affected share"""
  shareIdentifier: UUID!
  """Explicit field to know the type of event"""
  type: String
  """Workspace"""
  workspace: Workspace!
}

"""Response when watching a share"""
type ShareWatchPayload {
  """A list of errors, raised when executing this migrations."""
  errors: [UserError]!
  share: Share
  """Indicates whether the mutation completed successfully or not."""
  successful: Boolean!
}

"""A share and its size"""
type ShareWithSize {
  """A share"""
  share: Share!
  """Share's total size (in Gb)"""
  size: Float!
}

"""List of shares with pagination info"""
type Shares {
  """List of Shares"""
  entries: [Share!]!
  """Pagination metadata"""
  meta: PaginationMeta!
}

"""Response when trashing multiple shares"""
type SharesDeletePayload {
  """The trashed shares"""
  shares: [Share!]!
}

type SignUpPayload {
  credentials: OAuthCredentials
  """A list of errors, raised when executing this migrations."""
  errors: [UserError]!
  """Indicates whether the mutation completed successfully or not."""
  successful: Boolean!
  user: User
}

"""[WILL BE REMOVED] Subscription"""
type SketchSubscription {
  """Billing cycle anchor"""
  billingCycleAnchor: DateTime!
  """Cancel at period end"""
  cancelAtPeriodEnd: Boolean!
  """Canceled at"""
  canceledAt: DateTime
  """Collection method"""
  collectionMethod: CollectionMethod!
  """Coupon"""
  coupon: Coupon
  """Current period end"""
  currentPeriodEnd: DateTime!
  """Current period start"""
  currentPeriodStart: DateTime!
  """Plan"""
  plan: Plan
  """Quantity"""
  quantity: Int!
  """Status"""
  status: SubscriptionStatus!
  """Trial end"""
  trialEnd: DateTime
}

"""The response to start a social authentication"""
type SocialSigninStartUrlPayload {
  """An opaque string that must be stored in the device and presented at the end of the authentication process"""
  state: String
  """The authentication URL"""
  url: String!
}

"""[WILL BE REMOVED] Payment source"""
type Source {
  """Payment source type"""
  type: String
}

type SsoStartPayload {
  """A list of errors, raised when executing this migrations."""
  errors: [UserError]!
  """Indicates whether the mutation completed successfully or not."""
  successful: Boolean!
  url: String
}

"""
A notification that is created when a resource that the user is subscribed
to is starred.
"""
type StarNotification implements UserNotification {
  """Created at date"""
  createdAt: DateTime!
  """Date"""
  date: DateTime @deprecated(reason: "Use `createdAt` instead.")
  """Identifier"""
  id: UUID! @deprecated(reason: "Use identifier instead.")
  """Identifier"""
  identifier: UUID!
  """Is organization notification"""
  isOrganizationNotification: Boolean @deprecated(reason: "All notifications originate from a workspace")
  """Is read"""
  isRead: Boolean @deprecated(reason: "Use `state` instead.")
  """Organization"""
  organization: PublicOrganization @deprecated(reason: "Use `workspace` instead")
  """Path"""
  path: String
  """The share to which the version belongs."""
  share: Share
  """The read/unread state of the notification"""
  state: NotificationState
  """Subtitle"""
  subtitle: String
  """Title"""
  title: String
  """Token"""
  token: String
  """URL"""
  url: String
  """User"""
  user: PublicUser
  """The version which has been starred."""
  version: Version
  """Workspace"""
  workspace: PublicWorkspace
}

"""Paginated list of storage items."""
type StorageItems {
  """List of storage items."""
  entries: [StorageItem!]!
  """Pagination information"""
  meta: StorageItemsPaginationMeta!
}

"""Metadata for paginated storage items."""
type StorageItemsPaginationMeta {
  """Cursor for the next page."""
  after: String
  """Cursor for the previous page."""
  before: String
  """Limit of storage items per page."""
  limit: Int!
  """Total count of nested projects."""
  nestedProjectsCount: Int!
  """Total count of shares."""
  sharesCount: Int!
  """Total count of storage items."""
  totalCount: Int!
}

"""Symbol component"""
type Symbol implements Component {
  """Symbol's artboard"""
  artboard: Artboard @deprecated(reason: "Use `frame` instead")
  """Symbol depth"""
  depth: Int!
  """Symbol description"""
  description: String
  """Symbol's artboard"""
  frame: FrameGroup
  """Symbol identifier"""
  identifier: UUID!
  """Symbol name"""
  name: String!
  """Symbol path"""
  path: String!
  """Symbol path groups"""
  pathGroups: [String!]!
  """Structured path representation"""
  pathInfo: [PathComponentInfo!]!
  """Symbol identifier from the sketch document"""
  uuid: UUID!
}

"""[WILL BE REMOVED] Tax identifier details"""
type TaxId {
  """The country name"""
  country: String!
  """The type of tax (often a code such as ev_vat)"""
  type: TaxIdType!
  """The tax identifier (for example the VAT number)"""
  value: String!
  """The verified name"""
  verifiedName: String!
  """The state of the tax ID verification process"""
  verifiedStatus: TaxIdStatus!
}

"""Text style component"""
type TextStyle implements Component {
  """Text style depth"""
  depth: Int!
  """Text style description"""
  description: String
  """List of preview files"""
  files: [File]!
  """Font properties"""
  font: TextStyleFont!
  """Horizontal alignment of text"""
  horizontalAlignment: TextStyleAlignment!
  """Text style identifier"""
  identifier: UUID!
  """Text style name"""
  name: String!
  """Does the preview need a dark background?"""
  needsContrastingBackground: Boolean!
  """Text style path"""
  path: String!
  """Text style path groups"""
  pathGroups: [String!]!
  """Structured path representation"""
  pathInfo: [PathComponentInfo!]!
  """Text style identifier from the sketch document"""
  uuid: UUID!
}

"""Font properties of a text style component"""
type TextStyleFont {
  """Font name"""
  name: String!
  """Font size"""
  size: Float!
  """Font weight"""
  weight: String!
}

"""Thumbnail"""
type Thumbnail {
  """Height"""
  height: Int @deprecated(reason: "Do not use")
  """Thumbnail identifier"""
  id: String @deprecated(reason: "Use identifier instead.")
  """Thumbnail identifier"""
  identifier: UUID
  """Thumbnail path"""
  path: String @deprecated(reason: "Do not use")
  """Size"""
  size: Int @deprecated(reason: "Do not use")
  """Thumbnail size type"""
  type: ThumbnailSizeType
  """Thumbnail URL"""
  url: String
  """Thumbnail 2x URL"""
  url2x: String
  """Width"""
  width: Int @deprecated(reason: "Do not use")
}

"""Design Token export result"""
type TokenExport {
  """Contents of the token export as a string"""
  data: String!
  """URL for user to download the export as a file"""
  downloadUrl: String!
}

"""Paginated list of possible transfer destinations."""
type TransferDestinations {
  """List of transfer destinations."""
  entries: [TransferDestination!]!
  """Pagination information"""
  meta: PaginationMeta!
}

"""API response for transferShare"""
type TransferShareResponse {
  """The transferred share"""
  share: Share!
  """The target workspace to which the share was transferred"""
  workspace: Workspace!
}

"""API response for transferStorageItem mutation"""
type TransferStorageItemResponse {
  """The transferred storage item"""
  storageItem: StorageItem!
}

"""API response for transferStorageItems mutation"""
type TransferStorageItemsResponse {
  """The transferred storage items."""
  storageItems: [StorageItem!]!
}

"""Paginated list of items currently in the trash"""
type TrashedItems {
  """List of items in the trash"""
  entries: [TrashedItem!]!
  """Pagination information"""
  meta: PaginationMeta!
}

"""A project that is currently in the trash"""
type TrashedProject {
  """The data and time the project was moved to the trash"""
  deletedAt: DateTime
  """Identifier of the trashed project"""
  identifier: UUID!
  """The name of the trashed project"""
  name: String!
  """Privacy icon type for this trashed project."""
  projectPrivacyIcon: ProjectPrivacyIcon!
  """The type of the project"""
  projectType: ProjectType!
  """Trashed shares that belong to this project"""
  shares(after: String, before: String, limit: Int = 20): TrashedShares!
  """Project short_id"""
  shortId: ShortId!
}

"""A share that is currently in the trash"""
type TrashedShare {
  """The data and time the share was moved to the trash"""
  deletedAt: DateTime
  """Identifier of the trashed share"""
  identifier: UUID!
  """(Deprecated) Please migrate to shareType."""
  libraryEnabled: Boolean @deprecated(reason: "Please migrate to shareType.")
  """The name of the trashed share"""
  name: String!
  """(Deprecated) Please migrate to sharePrivacyIcon."""
  privacyIcon: SharePrivacyIconType! @deprecated(reason: "Use sharePrivacyIcon instead.")
  """The project this share belongs to"""
  project: Project
  """Privacy icon type for this trashed share"""
  sharePrivacyIcon: SharePrivacyIconType!
  """The type of the share"""
  shareType: ShareType!
  """(Deprecated) Please migrate to shareType."""
  type: ShareType! @deprecated(reason: "Use shareType instead")
  """The date and time the share was last updated"""
  updatedAt: DateTime
  """User access level"""
  userAccessLevel: UserAccessLevel!
  """Determines whether the user has edit permission"""
  userCanEdit: Boolean!
  """The latest version of this trashed share"""
  version: Version
  """The public workspace which owns the trashed share"""
  workspace: PublicWorkspace!
}

"""Paginated list of shares currently in the trash"""
type TrashedShares {
  """List of trashed shares"""
  entries: [TrashedShare!]!
  """Pagination information"""
  meta: PaginationMeta!
}

"""API response for unarchiveProject"""
type UnarchiveProjectResponse {
  """The unarchived project"""
  project: Project!
}

"""A minimalist version of Collection aimed at being used for unpaginated queries."""
type UnpaginatedCollection {
  """A unique identifier for this Collection."""
  identifier: UUID!
  """The name of this Collection, unique within the project."""
  name: String!
}

"""A slimmed down Share that can be fetched via unpaginated resources."""
type UnpaginatedCollectionShare {
  """
  The preview thumbnail File for the Share.
  
  Note this is nullable as the Share as the Share might not be fully
  processed yet.
  """
  file: File
  """The identifier of the Share."""
  identifier: UUID!
  """The name of the Share."""
  name: String!
  """The date and time that the Share was last updated"""
  updatedAt: DateTime!
}

"""A minimalist version of a project aimed at being used for unpaginated queries."""
type UnpaginatedProject {
  """The identifier of the project."""
  identifier: UUID!
  """The name of the project."""
  name: String!
}

"""Response from mutation unpinProject"""
type UnpinProjectResponse {
  """The unpinned project"""
  project: Project!
}

"""Response from mutation unpinShare"""
type UnpinShareResponse {
  """The unpinned share"""
  share: Share!
}

"""Page that has not yet been processed and can only be seen in the Mac app"""
type UnprocessedPage {
  """The uuid (permanentId) of the subject"""
  uuid: String!
}

"""Subject that has not yet been processed and can only be seen in the Mac app"""
type UnprocessedSubject {
  """The type of the component annotation, if any"""
  componentType: AnnotationComponentType @deprecated(reason: "Not in use")
  """The type of the subject"""
  type: AnnotationSubjectType!
  """The uuid (permanentId) of the subject"""
  uuid: String!
}

"""API response for unpublishShare"""
type UnpublishShareResponse {
  """Share that got unpublished"""
  share: Share!
}

"""API response for unresolveAnnotation"""
type UnresolveAnnotationResponse {
  """The unresolved annotation"""
  annotation: Annotation!
}

"""Response for updating the total seats for a Workspace"""
type UpdateBillingSeatsResponse {
  """The token for the pending SCA authorization (if any)"""
  pendingScaToken: String
  """Modified workspace"""
  workspace: Workspace!
}

"""
Response from mutation updatePermissionGroupRelation.

Deprecated
"""
type UpdatePermissionGroupRelationResponse {
  """The updated relation"""
  relation: PermissionGroupRelation!
}

"""Response from mutation updatePermissionGroup"""
type UpdatePermissionGroupResponse {
  """The updated permission group"""
  permissionGroup: PermissionGroup!
}

"""Response from mutation updateProjectMembership"""
type UpdateProjectMembershipResponse {
  """The updated project membership"""
  projectMembership: ProjectMembership!
}

"""API response for updateProjectPermission"""
type UpdateProjectPermissionResponse {
  """The updated project"""
  project: Project!
}

"""API response for updateProject"""
type UpdateProjectResponse {
  """The edited project"""
  project: Project!
}

"""API response for updateRestrictedPublicLink"""
type UpdateRestrictedPublicLinksResponse {
  """The associated workspace"""
  workspace: Workspace!
}

"""API response for updateRestrictedUploadsState"""
type UpdateRestrictedUploadsStateResponse {
  """The associated workspace"""
  workspace: Workspace!
}

"""Response from mutation updateShareMembership"""
type UpdateShareMembershipResponse {
  """The updated share membership"""
  shareMembership: ShareMembership!
}

"""Response from mutation updatePermissionGroupRelation"""
type UpdateSharePermissionGroupRelationResponse {
  """The updated relation"""
  relation: PermissionGroupRelationShare!
}

"""Response for updating user preferences"""
type UpdateUserPreferencesResponse {
  """User with updated preferences"""
  user: User!
}

"""Mutation response for updateWorkspaceCustomerSsoShortName"""
type UpdateWorksapceCustomerSsoShortNameResponse {
  """The associated workspace customer"""
  customer: WorkspaceCustomer!
}

"""Mutation response for updateWorkspaceCustomerSssoAttributeMapping"""
type UpdateWorkspaceCustomerSsoAttributeMappingResponse {
  """The associated workspace customer"""
  customer: WorkspaceCustomer!
}

"""Mutation response for updateWorkspaceCustomerSsoIdentityProviderConfig"""
type UpdateWorkspaceCustomerSsoIdentityProviderConfigResponse {
  """The associated workspace customer"""
  customer: WorkspaceCustomer!
}

"""API response for updateWorkspaceMember"""
type UpdateWorkspaceMemberResponse {
  """Membership updated"""
  membership: WorkspaceMembership!
  """
  SCA token to authorize the adjustment the monthly subscription cost
          (only set when the bank requires additional authorization)
  """
  pendingScaToken: String
}

"""API response for updateWorkspaceProfile"""
type UpdateWorkspaceProfileResponse {
  """The workspace profile which has been updated"""
  workspaceProfile: WorkspaceProfile!
}

"""API response for updateWorkspaceProfileShortUrl"""
type UpdateWorkspaceProfileShortUrlResponse {
  """The workspace profile which has been updated"""
  workspaceProfile: WorkspaceProfile!
}

"""API response for updateWorkspace"""
type UpdateWorkspaceResponse {
  """The associated workspace"""
  workspace: Workspace!
}

"""API response for updateWorkspaceSecurityEmail"""
type UpdateWorkspaceSecurityEmailResponse {
  """The associated workspace"""
  workspace: Workspace!
}

"""API response for upgradePersonalWorkspace"""
type UpgradePersonalWorkspaceResponse {
  """Pending SCA token"""
  pendingScaToken: String
  """The associated workspace"""
  workspace: Workspace!
}

"""Contains user's own data"""
type User {
  """Currently active sessions of the user"""
  activeSessions(after: String, before: String, limit: Int = 20): Sessions
  """User avatar"""
  avatar: Avatar
  """created_at"""
  createdAt: NaiveDateTime!
  """Whether the user is eligible to create a workspace with a trial period or not"""
  eligibleForWorkspaceTrial: Boolean
  """User email"""
  email: String
  """Lists feature flags"""
  featureFlags: [String]
  """How the user prefers to be called"""
  friendlyName: String
  """Has this user accepted the TOS and Privacy Policy?"""
  hasAcceptedAgreement: Boolean!
  """Has custom avatar?"""
  hasAvatar: Boolean!
  """Does the user have personal account?"""
  hasPersonalIdentity: Boolean!
  """Has unread notifications?"""
  hasUnreadNotifications: Boolean
  """Has unseen notifications?"""
  hasUnseenNotifications: Boolean @deprecated(reason: "use 'has unread' instead")
  """Deprecated name for the identifier"""
  id: String @deprecated(reason: "Use identifier instead.")
  """User identifier"""
  identifier: UUID!
  """Indicates if the user is a Sketch Partner"""
  isPartner: Boolean!
  """Whether the user has super admin privileges"""
  isSuperadmin: Boolean
  """Has verified the account?"""
  isVerified: Boolean!
  """Was the user created via web signup?"""
  isWebSignup: Boolean
  """[WILL BE REMOVED] Licenses for the user"""
  licenses: [License]
  """The user's MFA configuration state"""
  mfaState: MfaStateType
  """User name"""
  name: String
  """New user email"""
  newEmail: String
  """All notifications for the user"""
  notifications(
    after: String
    before: String
    """Notification filters"""
    filter: UserNotificationFilterType
    limit: Int = 20
  ): Notifications
  """Organization memberships for the user"""
  organizationMemberships(after: String, before: String, limit: Int = 20): OrganizationMemberships @deprecated(reason: "Use `workspacesMemberships` instead")
  """Organizations for the user"""
  organizations: [Organization] @deprecated(reason: "Use `workspaces` instead")
  """
  Email address of the user's personal account if the account is merged.
  
  No personal identity email means that the account only exists in the context
  of a single SSO team
  """
  personalIdentityEmail: String
  """
  The personal workspace for the user. A personal workspace is a special type of workspace
  that doesn't provide mac app licensing, and it has no subscription. Only guests may be
  invited to this workspace.
  
  Note: Not all users will have a personal workspace. The personal workspace is provided to
  users who have previously used their free "cloud space" that we used to provide to all users
  For users that do not meet this requirement, this field will be `null`.
  """
  personalWorkspace: Workspace
  """Preferences of this user"""
  preferences: UserPreferences!
  """The general skill set of the user"""
  professionalRole: UserProfessionalRole
  """User projects"""
  projects(after: String, before: String, limit: Int = 20): Projects! @deprecated(reason: "Projects can only belong to workspaces. Use the user's personal workspace\nto query the user's projects instead.\n")
  """Does the user receive email notifications?"""
  receiveEmailNotifications: Boolean
  """
  Personal access tokens for the SCIM API.
  
  These tokens are genereated via `scimPersonalAccessTokenCreate` and can
  be used to interact with the SCIM API.
  """
  scimPersonalAccessTokens: [ScimPersonalAccessToken!]!
  """
  Shares this user can access (optionally you can filter them, without filter it returns
  the shares the user owns)
  """
  shares(
    after: String
    before: String
    """Share filters"""
    filter: ShareFilterType = OWN
    limit: Int = 20
    """Share search inputs"""
    search: ShareSearchInput
    """Share search order"""
    sortOrder: ShareSortOrder = LAST_MODIFIED_DESC
  ): Shares @deprecated(reason: "Shares can only belong to workspaces. Use the workspace query instead.\n")
  """List of trashed shares"""
  sharesTrashed(
    after: String
    before: String
    """Share filters"""
    filter: ShareFilterType = OWN
    limit: Int = 20
    """Share search input"""
    search: ShareSearchInput
  ): Shares
  """Temporary opaque token for confirming SSO account linking"""
  ssoLinkToken(
    """Identifier for the workspace the user will be joining"""
    workspaceIdentifier: UUID! = ""
  ): String!
  """updated_at"""
  updatedAt: NaiveDateTime!
  """Customers that own the workspace of which the user is a member"""
  workspaceCustomers: [WorkspaceCustomer]
  """Workspace memberships for the user"""
  workspaceMemberships(after: String, before: String, limit: Int = 20): WorkspaceMemberships!
  """Workspaces for the user"""
  workspaces: [Workspace!]!
}

type UserAcceptTosAgreementPayload {
  """A list of errors, raised when executing this migrations."""
  errors: [UserError]!
  """Indicates whether the mutation completed successfully or not."""
  successful: Boolean!
}

type UserAvatarCreate {
  """A list of errors, raised when executing this migrations."""
  errors: [UserError]!
  """Indicates whether the mutation completed successfully or not."""
  successful: Boolean!
  user: User
}

type UserAvatarDeletePayload {
  """A list of errors, raised when executing this migrations."""
  errors: [UserError]!
  """Indicates whether the mutation completed successfully or not."""
  successful: Boolean!
  user: User
}

type UserDeletePayload {
  """A list of errors, raised when executing this migrations."""
  errors: [UserError]!
  """Indicates whether the mutation completed successfully or not."""
  successful: Boolean!
}

"""User friendly error"""
type UserError {
  """
  A pre-defined error code representing what class of error took place in the evaluation of
  the parent object. These are used by clients to help them recover from errors.
  
  Currently the possible error codes include:
  
  - UNKNOWN: We don't know what happened. This is most likely because we just didn't find this
    error and put the proper error code there.
  - UNAUTHORIZED: You tried to do something you're not able to do.
  - FORBIDDEN: You tried to do something that can't be done.
  - CONFIRMATION_REQUIRED: The operation is destructive and needs user's confirmation
  - INVALID_INPUT: We were given something that is invalid for some reason (malformed,
    duplicate of a unique field, etc).
  - NOT_FOUND: We were looking for something that we need and didn't find it.
  - THIRD_PARTY_ERROR: We got an error back from a third party (like Stipe, AWS, etc.).
  - UNSUPPORTED_OPERATION: You tried to either query or execute a mutation with
    arguments that are no longer supported.
  
  There are also pre-existing error codes that we are deprecating, all relating to Stripe.
  They are either "stripe", or a code that follows a format like "stripe.card_exp", where
  the text after the dot is the reason for the error that Stripe returned to us.
  
  In the future these will all be replaced with THIRD_PARTY_ERROR, and context about the
  specific errors from Stripe will be included in the `context` field.
  """
  code: String!
  """
  A list of key-value pairs that provide context about the returned error.
  
  These are most often used to include error information from third party services like
  Stripe and AWS. If more context for a certain type of error is needed, please file an issue
  with the backend team so we can add it.
  """
  context: [ErrorContext!]
  """Additional information for the error"""
  extensions: UserErrorExtensions!
  """
  An error message with more context to help the user.
  
  This should not be used for anything other than being shown to an end user. To determine the
  cause and context for an error, use the `code` and `context` fields in this object instead.
  """
  message: String!
}

"""Additional data for errors"""
type UserErrorExtensions {
  """Extension error code"""
  code: String
  """Minimum required client version for Sketch"""
  minimumRequiredClientVersion: String
  """Reason code for this error"""
  reason: String
  """Error code forwarded from Stripe"""
  stripeErrorCode: String
}

type UserPasswordResetPayload {
  """A list of errors, raised when executing this migrations."""
  errors: [UserError]!
  """Indicates whether the mutation completed successfully or not."""
  successful: Boolean!
}

type UserPasswordUpdatePayload {
  """A list of errors, raised when executing this migrations."""
  errors: [UserError]!
  """Indicates whether the mutation completed successfully or not."""
  successful: Boolean!
  user: User
}

"""User preferences"""
type UserPreferences {
  """Show onboarding first steps to user?"""
  showOnboardingFirstSteps: Boolean!
  """Show modal with info about new 50Gb storage limit (true unless already shown?"""
  showStorageLimitChanges: Boolean!
}

type UserRequestPasswordResetPayload {
  """A list of errors, raised when executing this migrations."""
  errors: [UserError]!
  """Indicates whether the mutation completed successfully or not."""
  successful: Boolean!
}

type UserUpdatePayload {
  """A list of errors, raised when executing this migrations."""
  errors: [UserError]!
  """Indicates whether the mutation completed successfully or not."""
  successful: Boolean!
  user: User
}

"""'Updates' in UI terminology, depending on kind either 'Saves' or 'Versions'"""
type Version {
  """Created after versioning?"""
  createdAfterVersioning: Boolean!
  """Created timestamp"""
  createdAt: DateTime!
  """User"""
  creator: PublicUser
  """Description"""
  description: String
  """Document"""
  document: Document
  """If the version has a component manifest. False means components hasn't been processed"""
  hasComponentManifest: Boolean!
  """IDentifier"""
  id: String @deprecated(reason: "Use identifier instead.")
  """Unique identifier"""
  identifier: UUID!
  """Version's kind"""
  kind: Kind!
  """Message"""
  message: String @deprecated(reason: "Use description instead.")
  """
  Version order.
  
  Non-empty only when version is returned in version history.
  """
  order: Int
  """The status of presentation files for this version"""
  presentationStatus: PresentationFileStatus!
  """The preview images for this Share"""
  previewFiles(
    """The scale of the image (Retina or not)"""
    scale: Int
    """The file type of the preview image"""
    type: FileType
  ): [File]! @deprecated(reason: "Use document.previewFile to get the Thumbnail of the document")
  """Thumbnails of the `previewFiles`"""
  previewThumbnails: [Thumbnail]! @deprecated(reason: "Use document.previewFile to get the Thumbnail of the document")
  """The share the version belongs to"""
  share: Share!
  """Short id"""
  shortId: ShortId!
  """Updated timestamp"""
  updatedAt: DateTime!
  """Determines if the user is the creator of the version"""
  userIsCreator: Boolean!
  """(Deprecated) Please migrate to userIsCreator"""
  viewerIsCreator: Boolean @deprecated(reason: "Please migrate to userIsCreator")
}

"""Response when deleting a version"""
type VersionDeletePayload {
  """A list of errors, raised when executing this migrations."""
  errors: [UserError]!
  share: Share
  """Indicates whether the mutation completed successfully or not."""
  successful: Boolean!
  versionDeleted: VersionDeleted
}

"""Deleted Version"""
type VersionDeleted {
  """Created at"""
  createdAt: DateTime!
  """Creator"""
  creator: PublicUser
  """Deleted at"""
  deletedAt: DateTime!
  """Identifier"""
  identifier: UUID!
  """Version's kind"""
  kind: Kind!
  """
  Version order.
  
  Non-empty only when version is returned in version history.
  """
  order: Int
  """Short id"""
  shortId: ShortId!
  """Updated at"""
  updatedAt: DateTime!
  """Whether the user is creator"""
  userIsCreator: Boolean!
}

"""Event that fires when version is successfully deleted"""
type VersionDeletedEvent {
  """Share"""
  share: Share!
  """Version Deleted"""
  versionDeleted: VersionDeleted!
}

"""Version History - includes deleted versions"""
type VersionHistory {
  """List of version history items"""
  entries: [VersionHistoryItem!]!
  """Pagination metadata"""
  meta: PaginationMeta!
}

"""Unavailable Version"""
type VersionUnavailable {
  """Created at"""
  createdAt: DateTime!
  """Creator"""
  creator: PublicUser
  """Identifier"""
  identifier: UUID!
  """
  Version order.
  
  Non-empty only when version is returned in version history.
  """
  order: Int
  """Whether the user is creator"""
  userIsCreator: Boolean!
}

"""List of versions with pagination info"""
type Versions {
  """List of versions"""
  entries: [Version!]!
  """Pagination metadata"""
  meta: PaginationMeta!
}

"""A space for users to store, share and sync documents across the Sketch platform"""
type Workspace {
  """Avatar"""
  avatar: Avatar
  """Determines if the document upload capability can be restricted by an admin"""
  canUseRestrictedUploads: Boolean!
  """
  Data about the Customer corresponding to this Workspace. Note: `PERSONAL` workspaces do
  not have an associated customer, as they have no subscription.
  """
  customer: WorkspaceCustomer
  """Paginated list of design systems that belong to this workspace"""
  designSystems(
    after: String
    before: String
    limit: Int = 20
    """Search params"""
    search: DesignSystemSearchParams
  ): DesignSystems!
  """List of feature flags"""
  featureFlags: [String!]!
  """Features enabled and configured for this workspace"""
  features: WorkspaceFeatures!
  """Workspace's unique identifier"""
  identifier: UUID!
  """
  A list of members in this workspace.
  Note: This field is restricted and certain roles cannot access the `list` field.
  The `userCanAccess` field indicates whether the currently authenticated user
  can access the `list` field, if `false` the value of `list` is `null`
  """
  memberships: WorkspaceMembershipsRestricted!
  """Workspace's name"""
  name: String!
  """List of permission groups in the Workspace"""
  permissionGroups(
    after: String
    before: String
    limit: Int = 20
    """Search by term"""
    search: String
  ): PermissionGroups!
  """
  The community profile of the workspace.
  
  The profile is nullable as it will resolve to `null` in the following
  circumstances:
  
  - A super admin has disabled the profile for the workspace
  - The workspace does not have a profile
  - The profile is private and the user is not a workspace admin. Only
    workspace admins can view their workspace's profile if it is private.
  """
  profile: WorkspaceProfile
  """List of projects that belong to this workspace"""
  projects(
    after: String
    """Filter if a project has been archived or not. Defaults to unarchived projects."""
    archived: ProjectArchivedStatus = UNARCHIVED
    before: String
    limit: Int = 20
    """Filter if a project has been pinned or not. Defaults to all projects."""
    pinned: ProjectPinnedStatus = ALL
    """Filter projects"""
    search: WorkspaceProjectsSearchInput
    """
    If true, only top-level projects will be returned.
    If false, nested projects will also be included.
    
    Defaults to true.
    """
    topLevel: Boolean! = true
    """Project type to filter by. Defaults to all types."""
    type: ProjectType
  ): Projects!
  """Is SCIM enabled for this workspace?"""
  scimEnabled: Boolean!
  """The security email for the workspace."""
  securityEmail: Email
  """List of shares that belong to this workspace"""
  shares(
    after: String
    """Filter if a share has been archived or not. Defaults to all shares."""
    archived: ShareArchivedStatus = UNARCHIVED
    before: String
    limit: Int = 20
    """Available params for searching shares of this workspace"""
    search: SharesSearchParams
    """Share search order"""
    sortOrder: ShareSortOrder = LAST_MODIFIED_DESC
  ): Shares!
  """The status of the workspace"""
  status: WorkspaceStatus!
  """List of storage items that belong to this workspace"""
  storageItems(
    after: String
    """
    If true, storage items from all nested levels of the workspace will be included.
    Otherwise, only items that are not in projects will be included.
    
    Defaults to false.
    """
    includeAllNestedLevels: Boolean! = false
    limit: Int = 20
    """Search params for storage items in this workspace"""
    search: StorageItemsSearchParams
    """Filter storage items by their source. Can be `archive` or `trash`."""
    source: StorageItemSource
  ): StorageItems!
  """
  If Support Access is enabled, this field indicates its expiration (UTC) date.
  `null` otherwise.
  """
  supportAccessGrantedUntil: DateTime
  """The type of workspace. This can be either `standard`, `personal` or `student`"""
  type: WorkspaceType!
  """Determines if uploads are restricted and for whom"""
  uploadsRestrictedFor: UploadsRestrictedForType!
  """Whether the currently authenticated user can administer this Workspace"""
  userCanAdminister: Boolean!
  """Whether the currently authenticated user is able to edit in this Workspace"""
  userCanEdit: Boolean!
  """
  Whether or not the authenticated user has permission to edit any of the content
  (for example shares or projects) in this Workspace.
  
  Note: This is distinct to the `userCanEdit` field which infers the user's write
  permissions at the workspace level. For example: A user with a `GUEST`
  membership could have a `true` value for `userHasEditableContent` while
  also having a `false` value for `userCanEdit`.
  """
  userHasEditableContent: Boolean!
  """Whether the currently authenticated user is a member of this Workspace"""
  userIsMember: Boolean! @deprecated(reason: "This field is no longer supported, please use UserRole instead.")
  """Whether the currently authenticated user is the owner of this Workspace"""
  userIsOwner: Boolean!
  """The currently authenticated user's role within this Workspace"""
  userRole: WorkspaceMembershipRole!
  """Retrieve workspace membership by identifier"""
  workspaceMembership(
    """Workspace Membership UUID"""
    identifier: UUID
  ): WorkspaceMembership
}

"""
This event is dispatched every time workspace state relative to current user
changes for any reason.
"""
type WorkspaceChangedEvent {
  """The customer to whom the workspace subscription belongs to"""
  customerIdentifier: UUID!
  """The subscription status of workspace customer's subscription"""
  customerStatus: BillingStatus!
  """The date that the workspace customer subscription itself is scheduled to end"""
  customerSubscriptionEnd: DateTime
  """The date when workspace customer subscription's trial period is scheduled to end"""
  customerTrialEnd: DateTime
  """Identifier of the affected workspace"""
  workspaceIdentifier: UUID!
}

"""Data related to the paying Customer"""
type WorkspaceCustomer {
  """Billing related information from payments"""
  billing: Billing
  """Whether this Customer Workspace can use SSO"""
  canUseSso: Boolean! @deprecated(reason: "Use workspaces.entries.features.sso instead.")
  """Customer's unique identifier, corresponds to the id in paymentsql"""
  identifier: UUID!
  """
  "When a user signs up and a workspace is created during the process, the
  'metadata.source' field of the `SignUp` mutation represents the application used.
  Valid values are 'ios', 'mac', 'macappstore', or 'web'. If no value, or if an
  unrecognized value is provided, the source defaults to 'web'."
  """
  source: String!
  """Fetch SSO config for a Customer"""
  ssoConfig: WorkspaceSsoConfig
  """Whether SSO is enabled for this Customer's Workspaces"""
  ssoEnabled: Boolean!
  """Customer short name for SSO, if enabled"""
  ssoShortName: String
  """SSO login URL for this Customer"""
  ssoStartUrl: String
  """Whether or not the customer has agreed to the Terms of service"""
  tosAgreed: Boolean!
  """Workspaces that belong to this Customer"""
  workspaces(after: String, before: String, limit: Int = 20): Workspaces
}

"""This event is dispatched when a customer's subscription changes for any reason"""
type WorkspaceCustomerSubscriptionUpdatedEvent {
  """The customer to whom the updated subscription belongs to"""
  customerIdentifier: UUID!
  """A list of identifiers for the workspaces that belong to this customer"""
  customerWorkspaces: [UUID!]!
  """The subscription status for this customer's subscription"""
  status: BillingStatus!
  """The date that the subscription itself is scheduled to end"""
  subscriptionEnd: DateTime
  """The date when the subscription's trial period is scheduled to end"""
  trialEnd: DateTime
}

"""Features available to a Workspace"""
type WorkspaceFeatures {
  """Is the Archive feature available for this workspace?"""
  archiveEnabled: Boolean!
  """Are Design Systems enabled for this workspace?"""
  designSystemsEnabled: Boolean!
  """Is the encryption enabled for this workspace?"""
  encryptionEnabled: Boolean!
  """Is the Permission Group feature available for this workspace?"""
  permissionGroupsEnabled: Boolean!
  """Are public links restricted in this workspace?"""
  restrictedPublicLinks: Boolean!
  """Is the SSO feature available for this workspace?"""
  ssoEnabled: Boolean!
  """Is the Unlimited Storage feature available for this workspace?"""
  unlimitedStorageEnabled: Boolean!
  """Is the Unlimited Trial feature available for this workspace?"""
  unlimitedTrialEnabled: Boolean!
  """Is the User Permissions Directory feature available for this workspace?"""
  userDirectoryEnabled: Boolean!
  """Is the workspace profile feature enabled in this workspace?"""
  workspaceProfileEnabled: Boolean!
}

"""Workspace Invite"""
type WorkspaceInvite {
  """Email address of the invite's recipient"""
  email: String!
  """Workspace's unique identifier"""
  identifier: UUID!
}

"""List of workspace members with pagination info"""
type WorkspaceMembers {
  """List of workspace members"""
  entries: [OrganizationUser!]!
  """Pagination metadata"""
  meta: PaginationMeta!
}

"""The response for the report mutation"""
type WorkspaceMembersReportResponse {
  """The URl to download the file"""
  downloadUrl: String!
}

"""Relation between a user and the workspace they're a member of"""
type WorkspaceMembership {
  """Timestamp for membership acceptance"""
  acceptedAt: NaiveDateTime
  """The activity status for this workspace member"""
  activityStatus: ActivityStatus
  """Workspace membership identifier"""
  identifier: UUID!
  """
  The associated invite to the workspace.
    This field is null if the invited user already exists (`user` field is null until acceptance).
  """
  invite: WorkspaceInvite
  """User who sent the invitation"""
  inviter: WorkspaceUser
  """Indicates whether the membership has an editor seat or not"""
  isEditor: Boolean!
  """Whether the user is the owner of the workspace"""
  isOwner: Boolean!
  """Permission group memberships belonging to this workspace member"""
  permissionGroupMemberships(
    after: String
    before: String
    limit: Int = 20
    """Search permission group by name"""
    search: String
  ): PermissionGroupMemberships!
  """Project memberships belonging to this workspace member"""
  projectMemberships(
    after: String
    before: String
    limit: Int = 20
    """Allowed parameters to filter projects"""
    search: ProjectMemberAccessSearchParams
  ): ProjectMemberships!
  """The role of the associated user in this membership"""
  role: WorkspaceMembershipRole!
  """Share memberships belonging to this workspace member"""
  shareMemberships(
    after: String
    before: String
    limit: Int = 20
    """Allowed parameters to filter shares"""
    search: ShareMemberAccessSearchParams
  ): ShareMemberships!
  """
  The associated user.
    This field is null if the user doesn't exist yet but was invited (`invite` field isn't null).
  """
  user: WorkspaceUser
  """The associated workspace"""
  workspace: Workspace!
}

"""This event is dispatched when a workspace membership is changed or deleted"""
type WorkspaceMembershipUpdatedEvent {
  """Workspace membership status after update"""
  status: WorkspaceMembershipStatus!
  """The workspace the updated membership belongs to"""
  workspaceIdentifier: UUID!
}

"""List of workspace memberships"""
type WorkspaceMemberships {
  """Paginated workspace memberships"""
  entries: [WorkspaceMembership!]!
  """Pagination information"""
  meta: PaginationMeta!
}

"""List of workspace memberships, only available for users with right access"""
type WorkspaceMembershipsRestricted {
  """List of workspace memberships"""
  list(
    """The type of access the user has for files in the workspace"""
    accessLevel: WorkspaceMemberAccessLevel
    """The activity status for a workspace member based on their last login"""
    activityStatus: UserActivityStatus
    after: String
    before: String
    """A list of roles to exclude in the returned list. Takes precedence over role parameter."""
    excludeRoles: [WorkspaceMembershipRole]
    limit: Int = 20
    """Order type"""
    order: WorkspaceMembershipOrderType
    """Order sorting direction (asc, desc)"""
    orderDirection: OrderDirection = ASC
    """The role of the user within the workspace"""
    role: WorkspaceMembershipRole
    """Search"""
    search: String
  ): WorkspaceMemberships
  """Whether the user can access this workspace membership list"""
  userCanAccess: Boolean!
}

"""Community profile information for a Workspace"""
type WorkspaceProfile {
  """Profile's description"""
  description: String
  """Donate URL"""
  donateUrl: String
  """Workspace profile's unique identifier"""
  identifier: UUID!
  """Is this profile officially representing someone or an organization?"""
  isOfficial: Boolean!
  """Is this profile available to the public?"""
  isPublic: Boolean!
  """List of publications with pagination info"""
  publications(
    after: String
    before: String
    """List of publication identifiers to exclude from the results"""
    exclude: [UUID!]! = []
    """Include only those publications whose identifiers are present in the list."""
    include: [UUID!]
    limit: Int = 20
    """Available params for searching publications of this workspace profile."""
    search: PublicationsSearchParams
    """Workspace profile publication sort order"""
    sortOrder: PublicationSortOrder! = LATEST_FIRST
  ): Publications!
  """Short URL Name"""
  shortUrlName: String!
  """Website URL"""
  websiteUrl: String
  """Public workspace information"""
  workspace: PublicWorkspace!
}

"""Result object for SSO config lookup"""
type WorkspaceSsoConfig {
  """The service provider Acs URL to set during configuration"""
  acsUrl: String
  """Workspace’s attribute mapping configuration"""
  attributeMapping: AttributeMappingEntry
  """Workspace Customer’s SSO configuration"""
  config: IdentityProviderConfig
  """The service provider Entity ID to set during configuration"""
  serviceProviderEntityId: String
}

"""Workspace Storage"""
type WorkspaceStorage {
  """Workspace's storage limit"""
  limit: Float
  """Workspace's number of shares"""
  shareCount: Int!
  """Workspace's used storage"""
  used: Float!
}

"""A user that is part of a workspace. Allowed to expose a little more than PublicUser."""
type WorkspaceUser {
  """User avatar"""
  avatar: Avatar
  """User email"""
  email: String!
  """User identifier"""
  identifier: UUID!
  """User name"""
  name: String!
}

"""List of workspaces"""
type Workspaces {
  """Paginated workspaces"""
  entries: [Workspace!]!
  """Pagination information"""
  meta: PaginationMeta!
}

"""Object representing the page an Annotation is pinned to"""
union AnnotationPage = Page | UnprocessedPage

"""Artboard Revision Item - Different states of Revisions"""
union ArtboardRevisionItem = Revision | RevisionDeleted | RevisionUnavailable

"""Object representing current subject of the Annotation"""
union CurrentSubject = Artboard | ColorVariable | LayerStyle | Page | Symbol | TextStyle | UnprocessedSubject

"""Different states of Revisions"""
union FrameRevisionItem = Revision | RevisionDeleted | RevisionUnavailable

"""Union between workspace membership and permission group"""
union InvitableUserOrPermissionGroup = PermissionGroup | WorkspaceMembership

"""Union type for a permission group relation"""
union PermissionGroupRelation = PermissionGroupRelationProject | PermissionGroupRelationShare

"""Union type for membership pagination items for projects"""
union ProjectMembershipPaginationItem = PermissionGroupRelationProject | ProjectMembership

"""
Events that are published whenever a Share is added to or removed from a
Collection.
"""
union ShareCollectionChangedEvent = ShareAddedToCollectionEvent | ShareRemovedFromCollectionEvent

"""Union type for membership pagination items for shares"""
union ShareMembershipPaginationItem = PermissionGroupRelationShare | ShareMembership

"""Union between workspace and project."""
union TransferDestination = Project | Workspace

"""Union type for trashed items (shares and projects)"""
union TrashedItem = Project | Share | TrashedProject | TrashedShare

"""Version History Item"""
union VersionHistoryItem = Version | VersionDeleted | VersionUnavailable

"""Parameters that identify a pending share membership invitation"""
input AcceptMembershipParams {
  """The short id of the share of which the currently signed in user has a pending membership."""
  shareShortId: ShortId
  """
  A unique JWT generated for the membership invitation. The token is
  included in invite links, and can be used to accept the membership using
  the invited email address.
  """
  token: String
}

"""Parameters for the mutation acceptProjectMembershipInvitation"""
input AcceptProjectMembershipInvitationParams {
  """The UUID of the project membership to accept"""
  projectMembershipIdentifier: UUID
  """The token from the email"""
  token: String
}

"""Parameters for the mutation addPermissionGroupMembers"""
input AddPermissionGroupMembersParams {
  """The UUID of the permission group to update"""
  identifier: UUID!
  """List of workspace member identifier to be added to the permission group"""
  members: [UUID!]
}

"""
Parameters for the mutation addPermissionGroupRelation,
must have either shareIdentifier or projectIdentifier.

Deprecated
"""
input AddPermissionGroupRelationParams {
  """Access level"""
  accessLevel: PrivateAccessLevel
  """Identifier of permission group"""
  permissionGroupIdentifier: UUID!
  """Identifier of project"""
  projectIdentifier: UUID
  """Identifier of share"""
  shareIdentifier: UUID
}

"""
Input parameters for adding a new share membership. Either pass an email
or a user identifier
"""
input AddShareMembershipParams {
  """Indication if user has confirmed the operation"""
  confirmed: Boolean = false
  """When provided, add the user as a share member, as guest if not part of the workspace"""
  email: String
  """If the user is a guest, whether or not they can comment"""
  guestCommentsEnabled: Boolean
  """If the user is a guest, whether or not they can inspect"""
  guestInspectEnabled: Boolean
  """Sets access level for member"""
  privateAccessLevel: PrivateAccessLevel
  """Identifier of the share"""
  shareIdentifier: UUID!
  """When provided, add the user as a share member"""
  userIdentifier: UUID
}

"""Generic address object"""
input Address {
  """City"""
  city: String!
  """Country"""
  country: String!
  """Address line"""
  line: String!
  """Post code"""
  postCode: String!
  """State"""
  state: String
}

"""Coordinates for floating annotations"""
input AnnotationCoordinatesInput {
  """The annotation's position along the X axis"""
  x: Float!
  """The annotation's position along the Y axis"""
  y: Float!
}

"""Information about the subject of the annotation, which can be artboard or page."""
input AnnotationSubjectInput {
  """The permanentId of the subject"""
  permanentId: String!
  """The type of the subject"""
  type: AnnotationSubjectType!
}

"""Input object for a single SAML attribute"""
input AttributeMappingEntryParams {
  """Attribute name"""
  mapping: String
  """Update value on each login"""
  updateOnLogin: Boolean! = false
}

"""Input parameters for canceling the scheduled update of seats for a Workspace"""
input CancelScheduledBillingSeatsParams {
  """Workspace identifier"""
  workspaceIdentifier: UUID!
}

"""Attribues of the design system"""
input CreateDesignSystemInput {
  """Design system description"""
  description: String
  """Design system name"""
  name: String!
  """Design system icon file"""
  preview: Upload
  """Shares to be added to the design system"""
  shares: [UUID!]!
}

"""Input parameters for requesting a institution subscription"""
input CreateInstitutionApplicationParams {
  """Address of the institution"""
  address: Address!
  """Comments that may be relevant to the application"""
  comments: String
  """Institution phone or email"""
  contactInfo: String
  """Course-related files documentation"""
  courseDocumentation: [Upload!]!
  """Courses at the institution for which the application is being made"""
  courses: String!
  """Name of the institution"""
  institutionName: String!
  """URL of the institution"""
  institutionUrl: String!
  """Files supporting the application"""
  proof: [Upload!]!
  """Number of seats requested"""
  seats: Int!
  """Workspace identifier"""
  workspaceIdentifier: UUID
}

"""Parameters to create a partner workspace"""
input CreatePartnerWorkspaceParams {
  """Workspace avatar file"""
  avatar: Upload
  """The currency in which the workspace will be billed, defaults to USD"""
  currency: Currency = USD
  """Workspace name"""
  name: String!
  """The customer email that will become the workspace owner"""
  ownerEmail: Email!
  """Number of seats for the subscription"""
  seats: Int!
  """Shipping details for the invited customer"""
  shipping: ShippingDetailsInput!
  """
  Whether or not the user has agreed to the ToS.
  
  This must be `true` or the mutation will fail
  """
  tosAgreed: Boolean!
}

"""Parameters for the mutation createPermissionGroup"""
input CreatePermissionGroupParams {
  """List of workspace member identifier to be added to the permission group"""
  members: [UUID!]
  """The name of the permission group"""
  name: String!
  """The UUID of the workspace to create the permission group on"""
  workspaceIdentifier: UUID!
}

"""Input parameters for requesting a student subscription"""
input CreateStudentApplicationParams {
  """Comments that may be relevant to the application"""
  comments: String
  """The country from which the applicant originates"""
  country: String
  """Courses at the institution for which the application is being made"""
  courses: String
  """Name of the institution"""
  institutionName: String!
  """URL of the institution"""
  institutionUrl: String!
  """Files supporting the application"""
  proof: [Upload!]!
  """Workspace identifier"""
  workspaceIdentifier: UUID
}

"""Input parameters for requesting a teacher subscription"""
input CreateTeacherApplicationParams {
  """Comments that may be relevant to the application"""
  comments: String
  """The country from which the applicant originates"""
  country: String
  """Courses at the institution for which the application is being made"""
  courses: String
  """Name of the institution"""
  institutionName: String!
  """URL of the institution"""
  institutionUrl: String!
  """Files supporting the application"""
  proof: [Upload!]!
  """Workspace identifier"""
  workspaceIdentifier: UUID
}

"""Parameters to create a workspace"""
input CreateWorkspaceParams {
  """Workspace avatar file"""
  avatar: Upload
  """Billing info. Requires payment_method to be set too."""
  billing: WorkspaceBillingInput
  """Workspace members"""
  members: [WorkspaceMemberInput]
  """Workspace name"""
  name: String
  """Payment method for Stripe. Requires billing to be set too."""
  paymentMethod: String
  """Plan ID, can be fetched from the `availablePlans` query on payments"""
  planId: String
  """Promo code"""
  promotionCode: String
  """Amount of seats, defaults to 1"""
  seats: Int
  """utm_source"""
  source: String
  """Whether the workspace will have a trial period or not"""
  trial: Boolean
}

"""Parameters for creating a Workspace Profile"""
input CreateWorkspaceProfileParams {
  """Profile's description"""
  description: String
  """Shares to publish alongside creating the profile"""
  shares: [UUID]
  """Profile's unique short URL name"""
  shortUrlName: String
  """Website URL"""
  websiteUrl: String
}

"""
An input object describing a guest that should be invited to the newly
created project. If the guest does not have a workspace membership, they
will be invited to the workspace.
"""
input CreateWorkspaceProjectGuestToInvite {
  """The email address of the guest that should be invited."""
  email: Email!
  """
  Whether or not this guest will be permitted to comment within the
  project.
  """
  guestCommentsEnabled: Boolean!
  """
  Whether or not this guest will be permitted to inspect within the
  project.
  """
  guestInspectEnabled: Boolean!
}

"""Input parameters for creating a new share"""
input CreateWorkspaceShareParams {
  """
  The coedit compatibilty version of the share
  
  This value determines which Sketch releases can edit the Share.
  """
  coeditCompatibilityVersion: Int
  """The identifier of the collection this share should be added to"""
  collectionIdentifier: UUID
  """
  An identifier value for the new share.
  (If left empty a value will be automatically generated)
  """
  identifier: UUID
  """Title of the share"""
  name: String!
  """The identifier of the project this share should be added to"""
  projectIdentifier: UUID
  """This shares initial version"""
  version: ShareCreateVersionParams
  """The identifier of the workspace this share belongs to"""
  workspaceIdentifier: UUID!
}

"""Curated libraries search params"""
input CuratedSketchLibrarySearchInput {
  """Name"""
  name: String
}

"""Curated templates search params"""
input CuratedSketchTemplateSearchInput {
  """Name"""
  name: String
}

"""Curated libraries search params"""
input CuratedThirdPartyLibrarySearchInput {
  """Name"""
  name: String
}

"""Parameters for the mutation deletePermissionGroup"""
input DeletePermissionGroupParams {
  """The UUID of the permission group to delete"""
  permissionGroupIdentifier: UUID!
}

"""Design system search params"""
input DesignSystemSearchParams {
  """Case-insensitive search in name"""
  name: String
}

"""Design system shares search params"""
input DesignSystemSharesSearchParams {
  """Case-insensitive search in share name"""
  name: String
}

"""Input parameters to the duplicateShareToDrafts mutation"""
input DuplicateShareToDraftsParams {
  """Identifier of the share to duplicate"""
  sourceShareIdentifier: UUID!
  """Identifier of the version to duplicate"""
  sourceVersionIdentifier: UUID!
  """Identifier of the workspace to duplicate to"""
  targetWorkspaceIdentifier: UUID!
}

"""Parameters for inviting members to a Workspace"""
input InviteWorkspaceMembersParams {
  """Workspace members to invite"""
  members: [WorkspaceMemberInviteInput]!
  """Workspace identifier"""
  workspaceIdentifier: UUID!
}

"""Parameters for inviting a partner to a Workspace"""
input InviteWorkspacePartnerParams {
  """Email of the Partner to invite"""
  email: Email!
  """Workspace identifier"""
  workspaceIdentifier: UUID!
}

"""A minimalist version of a storage item."""
input MinimalStorageItem {
  """The identifier of the storage item."""
  identifier: UUID!
  """The type of the storage item."""
  type: StorageItemType!
}

"""Input for moving annotations in batch"""
input MoveAnnotationsInput {
  """Annotation identifier"""
  annotationIdentifier: UUID!
  """New position of the annotation, given in (X,Y) coordinates"""
  coordinates: AnnotationCoordinatesInput!
  """UUID of the frame to which the annotation should be linked"""
  frameUuid: String
  """UUID of the page to which the annotation should be linked"""
  pageUuid: String
  """Information about the subject of the annotation, which can be artboard or page"""
  subject: AnnotationSubjectInput
}

"""multipart uploaded etag"""
input MultipartEtag {
  """part etag"""
  etag: String
  """part number"""
  partNumber: Int
}

"""Input object for names"""
input NameMappingParams {
  """First name attribute"""
  firstName: String
  """Surname attribute"""
  surname: String
  """Update value on each login"""
  updateOnLogin: Boolean! = false
}

"""The input type for notifications"""
input NotificationInput {
  """The state of the notification"""
  state: NotificationState!
}

"""Organization shares search param"""
input OrganizationSharesSearchInput {
  """Organization share filter"""
  filter: OrganizationShareFilterType
  """Is current version downloadable"""
  isCurrentVersionDownloadable: Boolean
  """Name"""
  name: String
}

"""An input object used when inviting permission group when creating a project"""
input PermissionGroupParam {
  """Access level for the group"""
  accessLevel: PrivateAccessLevel!
  """Identifer of permission group"""
  identifier: UUID!
}

"""Parameters for the mutation pinProject"""
input PinProjectParams {
  """The UUID of the project to pin"""
  projectIdentifier: UUID!
}

"""Parameters for the mutation pinShare"""
input PinShareParams {
  """The UUID of the share to pin"""
  shareIdentifier: UUID!
}

"""A minimalist version of a preview content item."""
input PreviewContentItem {
  """The identifier of the preview content item."""
  identifier: UUID!
  """The type of the preview content item."""
  type: PreviewItemType!
}

"""Allowed parameters to filter project memberships within workspace membership query"""
input ProjectMemberAccessSearchParams {
  """Queries projects with a name that contains the given search query string."""
  name: String
}

"""Project shares search input"""
input ProjectSharesSearchInput {
  """Is current version downloadable?"""
  isCurrentVersionDownloadable: Boolean
  """Name"""
  name: String
}

"""Publications search params"""
input PublicationsSearchParams {
  """Date that is less than or equal to the publication creation date."""
  createdAfter: Date
  """Date that is greater than or equal to the publication creation date."""
  createdBefore: Date
  """Document type of the associated share."""
  documentType: ShareType
  """Name of the associated share or short url name of the workspace profile."""
  name: String
}

"""Parameters for the mutation removePermissionGroupMember"""
input RemovePermissionGroupMemberParams {
  """Identifier of permission group membership to be removed from the permission group"""
  member: UUID!
}

"""Parameters for the mutation removePermissionGroupRelation"""
input RemovePermissionGroupRelationParams {
  """Identifier of relation to delete"""
  relationIdentifier: UUID!
}

"""
The input needed for rendering downloadable assets.

If only a document identifier is passed then assets will be rendered for all layers in the
document. If you want to render assets for select layers, you must pass the layer uuids from
the sketch document for those layers.
"""
input RenderDownloadableAssetsInput {
  """Sketchql identifier of the relevant document."""
  documentIdentifier: String!
  """Input to render downloadable assets for one or more layers."""
  renderLayerDownloadableAssetsInput: RenderLayerDownloadableAssetsInput
}

"""Input to render downloadable assets for one or more layers."""
input RenderLayerDownloadableAssetsInput {
  """
  List of export formats.
  
  If the list is empty then all defined export formats for the layer will be generated
  and any defined scales will be ignored.
  """
  formats: [ExportFormat!]!
  """Layer uuids from the import data for layers for which to export assets"""
  layerUuids: [String!]!
  """
  List of scales for the export.
  
  If the list is empty then all defined export formats for the later will be generated
  and any defined formats will be ignored.
  """
  scales: [Float!]!
}

"""Input parameters for creating a new share"""
input ShareCreateParams {
  """
  An id value for the new share.
  (If left empty a value will be automatically generated)
  """
  identifier: UUID
  """Title of the share"""
  name: String!
  """The identifier of the organization this share belongs to"""
  organizationIdentifier: UUID
  """The identifier of the project this share belongs to"""
  projectIdentifier: UUID
  """This shares initial version"""
  version: ShareCreateVersionParams
}

"""Input parameters for creating a new version of a share"""
input ShareCreateVersionParams {
  """
  An id value for the new version.
  (If left empty a value will be automatically generated)
  """
  identifier: UUID
  """Title of the document"""
  name: String!
}

"""Allowed parameters to filter share memberships within workspace membership query"""
input ShareMemberAccessSearchParams {
  """Queries shares with a name that contains the given search query string."""
  name: String
}

"""Input parameters pertaining to a share's properties"""
input ShareParams {
  """Enables comments"""
  commentsEnabled: Boolean
  """Edits the description given to a share"""
  description: String
  """Edits the name given to a share"""
  name: String
  """Allows exporting of tokens via a public available url"""
  publicTokenExport: PublicTokenExport
  """The type of the share"""
  type: ShareType
}

"""Input for searching shares"""
input ShareSearchInput {
  """How to filter the shares"""
  filter: ShareFilterType = OWN
  """If current version is downloadable"""
  isCurrentVersionDownloadable: Boolean
  """Queries shares with a name that contains the given search query string."""
  name: String
}

"""Shares search params"""
input SharesSearchParams {
  """
  A list of WorkspaceShareFilterTypes to apply to the search.
  
  Clients can optionally provide one or more filters to apply to the
  search. See WorkspaceShareFilterTypes for a list of supported filters.
  
  **NOTE** previously clients could provide a single filter via the
  `filter` field. `filter` has been deprecated in favour of `filters`, but
  to maintain compatibility with older clients we still support `filter`.
  If `filter` is provided we assume the request is coming from an older
  client that does not support `filters`, and so `filter` takes precedence.
  
  Defaults to an empty list.
  """
  filters: [WorkspaceShareFilterType!] = []
  """Whether the current version is downloadable or not"""
  isCurrentVersionDownloadable: Boolean
  """Name"""
  name: String
}

"""Parameters for customer address"""
input ShippingAddress {
  """City"""
  city: String!
  """Country"""
  country: String!
  """Line 1"""
  line1: String!
  """Line 2"""
  line2: String
  """Postal code"""
  postalCode: String!
  """State"""
  state: String
}

"""Parameters for customer shipping details"""
input ShippingDetailsInput {
  """Customer address"""
  address: ShippingAddress!
  """Customer name"""
  name: String!
}

"""Input for signing up"""
input SignUpInput {
  """Whether a workspace should be created for this user"""
  createWorkspace: Boolean
  """Email address"""
  email: String!
  """Whether the user has agreed to receive marketing communication"""
  marketingConsent: Boolean
  """Metadata regarding the source of traffic for user signup"""
  metadata: SignupMetadata
  """Display Name"""
  name: String!
  """Password"""
  password: String!
  """Whether the user has agreed to the Privacy Policy"""
  privacyPolicyAgreed: Boolean
  """The general skill set of the user"""
  professionalRole: UserProfessionalRole
  """Whether the user has agreed to the Terms of Service"""
  tosAgreed: Boolean
}

"""Metadata regarding the source of traffic for user signup"""
input SignupMetadata {
  """utm_campaign"""
  campaign: String
  """utm_content"""
  content: String
  """utm_medium"""
  medium: String
  """utm_source"""
  source: String
  """utm_term"""
  term: String
}

"""Workspace storage items search params"""
input StorageItemsSearchParams {
  """
  A list of StorageItemFilterTypes to apply to the search.
  
  Clients can optionally provide one or more filters to apply to the
  search. See StorageItemFilterTypes for a list of supported filters.
  
  Defaults to an empty list.
  """
  filters: [StorageItemFilterType!]! = []
  """Allows to search workspace storage items by name."""
  name: String
  """
  A list of StorageItemTypes to apply to the search.
  
  Clients can optionally provide one or more types to apply to the
  search. Defaults to both project and share.
  """
  types: [StorageItemType!]! = [PROJECT, SHARE]
}

"""The input type for subscriptions"""
input SubscriptionInput {
  """The state of the subscription"""
  status: NotificationSubscriptionStatus!
}

"""Transfer destinations search params"""
input TransferDestinationSearchParams {
  """Allows to search possible destinations by name."""
  name: String
}

"""Trash search params"""
input TrashSearchParams {
  """Allows to search trashed shares by name"""
  name: String
}

"""Parameters for the mutation unpinProject"""
input UnpinProjectParams {
  """The UUID of the project to unpin"""
  projectIdentifier: UUID!
}

"""Parameters for the mutation unpinShare"""
input UnpinShareParams {
  """The UUID of the share to unpin"""
  shareIdentifier: UUID!
}

"""
SAML attribute mappings configuration.

(Deprecated) The`organizationUpdateAttributeMapping` mutation has been deprecated.
Please use `updateWorkspaceCustomerSsoAttributeMapping`.
"""
input UpdateAttributeMappingParams {
  """Attribute name for Avatar URL"""
  avatarUrl: AttributeMappingEntryParams!
  """Attribute name for Email"""
  email: AttributeMappingEntryParams!
  """Attribute name for First Name"""
  firstName: AttributeMappingEntryParams
  """Attribute mapping options for names"""
  fullName: NameMappingParams
  """Attribute name for Surname"""
  surname: AttributeMappingEntryParams
}

"""Input parameters for updating the total seats for a Workspace"""
input UpdateBillingSeatsParams {
  """Billing period in which the update should be made"""
  billingPeriod: BillingPeriodInput!
  """New total number of seats for the workspace"""
  numberOfSeats: Int!
  """Workspace identifier"""
  workspaceIdentifier: UUID!
}

"""Design system attributes to be updated"""
input UpdateDesignSystemInput {
  """Design system main area content (json)"""
  content: Json
  """Design system description"""
  description: String
  """Design system header image"""
  header: Upload
  """Design system name"""
  name: String
  """Design system icon image"""
  preview: Upload
  """Shares to be added to the design system"""
  shares: [UUID!]
}

"""Design system page attributes to be updated"""
input UpdateDesignSystemPageInput {
  """Page content (json)"""
  content: Json
  """Page description"""
  description: String
  """Name of the page"""
  name: String
  """Version of the page to update"""
  version: Int
}

"""
Configure organization SSO identity provider parameters.

(Deprecated) The`organizationUpdateIdentityProvider` mutation has been deprecated.
Please use `updateWorkspaceCustomerSsoIdentityProviderConfig`.
"""
input UpdateIdentityProviderConfigParams {
  """Binding type"""
  binding: SsoBindingType!
  """Identity provider's X.509 certificate"""
  certificate: String!
  """SSO Entity ID"""
  entityId: String!
  """Identity provider's sign-in URL"""
  ssoUrl: String!
}

"""Parameters for the mutation updatePermissionGroup"""
input UpdatePermissionGroupParams {
  """The UUID of the permission group to update"""
  identifier: UUID!
  """The name of the permission group"""
  name: String
}

"""
Parameters for the mutation updatePermissionGroupRelation.

Deprecated
"""
input UpdatePermissionGroupRelationParams {
  """Update access level"""
  accessLevel: PrivateAccessLevel
  """Identifier of relation to update"""
  relationIdentifier: UUID!
}

"""Parameters to update the restricted public links"""
input UpdateRestrictedPublicLinksParams {
  """Value of restricted public link to set"""
  enabled: Boolean!
  """Workspace identifier"""
  workspaceIdentifier: UUID!
}

"""Parameters to update workspace's restricted uploads state"""
input UpdateRestrictedUploadsStateParams {
  """Workspace identifier"""
  identifier: UUID!
  """Whether the uploads and some online capabilities should be restricted"""
  restrictedUploads: Boolean!
}

"""Input parameters for updating a new share membership"""
input UpdateShareMembershipParams {
  """Indication if user has confirmed the operation"""
  confirmed: Boolean = false
  """If the user is a guest, whether or not they can comment"""
  guestCommentsEnabled: Boolean
  """If the user is a guest, whether or not they can inspect"""
  guestInspectEnabled: Boolean
  """Identifier of the share membership"""
  identifier: UUID!
  """Sets access level for member"""
  privateAccessLevel: PrivateAccessLevel
}

"""Input parameters pertaining to update_share_parent_permissions mutation"""
input UpdateShareParentPermissionsParams {
  """Indication if user has confirmed the operation"""
  confirmed: Boolean
  """The share you want to update permissions of"""
  identifier: UUID!
  """Access level for parent entity members"""
  parentAccessLevel: ParentAccessLevel!
}

"""Input parameters pertaining to a share's permissions"""
input UpdateSharePublicPermissionsParams {
  """The share you want to update permissions of"""
  identifier: UUID!
  """Sets access level for external and anonymous users"""
  publicAccessLevel: PublicAccessLevel!
  """Enables commenting for external users"""
  publicCommentsEnabled: Boolean!
  """Enables inspector for external users"""
  publicInspectEnabled: Boolean!
}

"""Input parameters for updating the the SSO attribute mappings for a workspace customer"""
input UpdateWorkspaceCustomerSsoAttributeMappingParams {
  """Attribute name for Email"""
  email: AttributeMappingEntryParams!
  """Attribute name for First Name"""
  firstName: AttributeMappingEntryParams
  """Attribute mapping options for names"""
  fullName: NameMappingParams
  """Attribute name for Surname"""
  surname: AttributeMappingEntryParams
}

"""Configure organization SSO identity provider parameters"""
input UpdateWorkspaceCustomerSsoIdentityProviderConfigParams {
  """Binding type"""
  binding: SsoBindingType!
  """Identity provider's X.509 certificate"""
  certificate: String!
  """SSO Entity ID"""
  entityId: String!
  """Identity provider's sign-in URL"""
  ssoUrl: String!
}

"""Parameters to update a workspace membership"""
input UpdateWorkspaceMemberParams {
  """Member's access level"""
  accessLevel: WorkspaceMemberAccessLevel
  """Membership identifier"""
  membershipIdentifier: UUID!
  """The role this member has in the workspace"""
  role: WorkspaceMembershipRole
}

"""Parameters to update a workspace"""
input UpdateWorkspaceParams {
  """Workspace avatar file"""
  avatar: Upload
  """Workspace identifier"""
  identifier: UUID!
  """Workspace name"""
  name: String
}

"""Parameters for updating a Workspace Profile"""
input UpdateWorkspaceProfileParams {
  """Profile's description"""
  description: String
  """Identifier for the workspace profile to update"""
  identifier: UUID!
  """Is this profile available to the public?"""
  isPublic: Boolean
  """Shares to publish alongside creating the profile"""
  shares: [UUID]
  """Profile's unique short URL name"""
  shortUrlName: String
  """Website URL"""
  websiteUrl: String
}

"""Parameters for updating a Workspace Profile Short URL"""
input UpdateWorkspaceProfileShortUrlParams {
  """Workspace profile's unique identifier"""
  identifier: UUID!
  """Profile's unique short URL name"""
  shortUrlName: String!
}

"""Parameters to update a workspace security email"""
input UpdateWorkspaceSecurityEmailParams {
  """Workspace identifier"""
  identifier: UUID!
  """The security email to set for the workspace"""
  securityEmail: Email
}

"""Parameters to upgrade a personal workspace to a standard one"""
input UpgradePersonalWorkspaceParams {
  """Workspace avatar file"""
  avatar: Upload
  """Billing info"""
  billing: WorkspaceBillingInput!
  """Identifier of the personal workspace to upgrade"""
  identifier: UUID!
  """Workspace members"""
  members: [WorkspaceMemberInput]!
  """Workspace name"""
  name: String!
  """Whether the user has agreed to the Privacy Policy"""
  userPrivacyPolicyAgreed: Boolean!
  """Whether the user has agreed to the Terms of Service"""
  userTosAgreed: Boolean!
}

"""Input object for filtering user notifications"""
input UserNotificationFilterType {
  """Allow complete filtering via search"""
  search: String
  """The states of the notification."""
  states: [NotificationState]
}

"""User parameters"""
input UserParams {
  """Display Name"""
  name: String
  """The general skill set of the user"""
  professionalRole: UserProfessionalRole
  """Receive email notifications about comment activity"""
  receiveEmailNotifications: Boolean
}

"""Input arguments"""
input UserPasswordResetParams {
  """New Password"""
  newPassword: String!
  """Reset token"""
  token: String!
}

"""Input arguments"""
input UserPasswordUpdateParams {
  """Current Password"""
  currentPassword: String!
  """New Password"""
  password: String!
}

"""Parameters for billing address"""
input WorkspaceBillingAddressInput {
  """City"""
  city: String!
  """Country"""
  country: String!
  """Line 1"""
  line1: String!
  """Line 2"""
  line2: String
  """Postal code"""
  postalCode: String!
  """State"""
  state: String
}

"""Parameters for workspace billing"""
input WorkspaceBillingInput {
  """Billing address"""
  address: WorkspaceBillingAddressInput
  """The currency in which the workspace will be billed"""
  currency: Currency
  """Billing email"""
  email: String!
  """Billing name"""
  name: String!
  """Tax/VAT ID"""
  taxId: String
}

"""Details of a workspace member"""
input WorkspaceMemberInput {
  """Member's access level"""
  accessLevel: WorkspaceMemberAccessLevel!
  """Member's email address"""
  email: String!
  """Member's role"""
  role: WorkspaceMembershipRole
}

"""Details of a workspace member"""
input WorkspaceMemberInviteInput {
  """Member's access level"""
  accessLevel: WorkspaceMemberAccessLevel!
  """Member's email address"""
  email: String!
  """Member's role"""
  role: WorkspaceMembershipInviteRole
}

"""Workspace projects search input"""
input WorkspaceProjectsSearchInput {
  """Name"""
  name: String
}

schema {
  query: RootQueryType
  mutation: RootMutationType
  subscription: RootSubscriptionType
}
